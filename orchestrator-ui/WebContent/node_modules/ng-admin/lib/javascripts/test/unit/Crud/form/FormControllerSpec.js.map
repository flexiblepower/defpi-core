{"version":3,"sources":["../../../../../../src/javascripts/test/unit/Crud/form/FormControllerSpec.js"],"names":["describe","FormController","require","Field","Entity","humane","$scope","$injector","beforeEach","inject","$controller","$rootScope","_$injector_","$new","entity","identifier","$translate","text","Configuration","getErrorMessageFor","$state","go","jasmine","createSpy","get","and","callFake","state","params","current","name","writeQueries","deleteOne","$q","when","progression","start","done","notification","id","view","title","description","actions","getEntity","fields","validate","onSubmitError","entry","transformToRest","HttpErrorService","handleError","previousState","dataStore","getFirstEntry","$event","preventDefault","values","createOne","Promise","reject","it","deletedId","formController","form","$valid","submitCreation","then","assert","fail","catch","error","expect","calls","argsFor","toBe","fromStateParams","$emit","$digest","updateOne","submitEdition"],"mappings":"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","file":"FormControllerSpec.js","sourcesContent":["describe('FormController', function () {\n    'use strict';\n\n    var FormController = require('../../../../ng-admin/Crud/form/FormController'),\n        Field = require('admin-config/lib/Field/Field'),\n        Entity = require('admin-config/lib/Entity/Entity'),\n        humane = require('humane-js');\n\n    let $scope, $injector;\n    beforeEach(inject(function ($controller, $rootScope, _$injector_) {\n        $scope = $rootScope.$new();\n        $injector = _$injector_;\n    }));\n\n    const entity = new Entity('post')\n        .identifier(new Field('id'));\n    const $translate = text => text;\n    const Configuration = () => ({\n        getErrorMessageFor: () => '',\n    });\n    const $state = {\n        go: jasmine.createSpy('$state.go'),\n        get: jasmine.createSpy('$state.get').and.callFake(state => state),\n        params: {},\n        current:{\n            name: 'list',\n            params: {},\n        }\n    };\n    let writeQueries = {\n        deleteOne: jasmine.createSpy('writeQueries.deleteOne').and.callFake(() => $q.when())\n    };\n    const progression = {\n        start: () => true,\n        done: () => true,\n    };\n    const notification = humane;\n    const params = {\n        id: 3,\n        entity,\n    };\n    const view = {\n        title: () => 'My view',\n        description: () => 'Description',\n        actions: () => [],\n        getEntity: () => entity,\n        fields: () => [],\n        validate: () => true,\n        onSubmitError: () => () => true,\n    };\n    let entry = {\n        transformToRest: () => {},\n    };\n    const HttpErrorService = {\n        handleError: jasmine.createSpy('HttpErrorService.handleError')\n    };\n\n    const previousState = {};\n\n    const dataStore = {\n        getFirstEntry: jasmine.createSpy('dataStore.getFirstEntry')\n            .and.callFake(() => entry),\n    };\n\n    const $event = {\n        preventDefault: () => {},\n    }\n\n    describe('submitCreation', function() {\n        describe('on error', function() {\n            beforeEach(() => {\n                entry = {\n                    ...entry,\n                    values: {\n                        id: 3,\n                    }\n                };\n                writeQueries = {\n                    createOne: jasmine.createSpy('writeQueries.createOne')\n                        .and.callFake(() => Promise.reject(\"Here's a bad bad bad error\"))\n                };\n            });\n\n            it('should call HttpErrorService handler', (done) => {\n                // assume we are on post #3 deletion page\n                const deletedId = 3;\n\n                let formController = new FormController($scope, $state, $injector, $translate, previousState, writeQueries, Configuration, progression, notification, view, dataStore, HttpErrorService);\n\n                formController.form = {\n                    $valid: true,\n                };\n\n                formController.submitCreation($event)\n                    .then(() => {\n                        assert.fail();\n                        done();\n                    })\n                    .catch((error) => {\n                        expect(HttpErrorService.handleError.calls.argsFor(0)[5]).toBe(\"Here's a bad bad bad error\")\n                        done();\n                    });\n\n                const fromStateParams = { entity: 'post', id: 3 };\n                $scope.$emit('$stateChangeSuccess', {}, {}, {}, fromStateParams);\n\n                $scope.$digest();\n            });\n        });\n    });\n\n    describe('submitEdition', function() {\n        describe('on error', function() {\n\n            beforeEach(() => {\n                entry = {\n                    ...entry,\n                    values: {\n                        id: 3,\n                    }\n                };\n                writeQueries = {\n                    updateOne: jasmine.createSpy('writeQueries.updateOne')\n                        .and.callFake(() => Promise.reject(\"Here's a bad bad bad error\"))\n                };\n            });\n\n            it('should call HttpErrorService handler', (done) => {\n                // assume we are on post #3 deletion page\n                const deletedId = 3;\n\n                let formController = new FormController($scope, $state, $injector, $translate, previousState, writeQueries, Configuration, progression, notification, view, dataStore, HttpErrorService);\n\n                formController.form = {\n                    $valid: true,\n                };\n\n                formController.submitEdition($event)\n                    .then(() => {\n                        assert.fail();\n                        done();\n                    })\n                    .catch((error) => {\n                        expect(HttpErrorService.handleError.calls.argsFor(0)[5]).toBe(\"Here's a bad bad bad error\")\n                        done();\n                    });\n\n                const fromStateParams = { entity: 'post', id: 3 };\n                $scope.$emit('$stateChangeSuccess', {}, {}, {}, fromStateParams);\n\n                $scope.$digest();\n            });\n        });\n    });\n});\n"]}
{"version":3,"sources":["../../../../../../src/javascripts/test/unit/Crud/list/maDatagridMultiSelectorSpec.js"],"names":["describe","directive","require","Entry","$compile","scope","directiveUsage","angular","module","beforeEach","mock","inject","_$compile_","_$rootScope_","entries","some","selection","it","element","$digest","expect","children","indeterminate","toBe","checked","pop","concat"],"mappings":"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","file":"maDatagridMultiSelectorSpec.js","sourcesContent":["/*global angular,inject,describe,it,expect,beforeEach,module*/\ndescribe('directive: ma-datagrid-multi-selector', function () {\n    'use strict';\n\n    var directive = require('../../../../ng-admin/Crud/list/maDatagridMultiSelector'),\n        Entry = require('admin-config/lib/Entry'),\n        $compile,\n        scope,\n        directiveUsage = '<ma-datagrid-multi-selector entries=\"entries\" selection=\"selection\"></ma-datagrid-multi-selector>';\n\n    angular.module('testapp_DatagridMultiSelector', [])\n        .directive('maDatagridMultiSelector', directive);\n\n    beforeEach(angular.mock.module('testapp_DatagridMultiSelector'));\n\n    beforeEach(inject(function (_$compile_, _$rootScope_) {\n        $compile = _$compile_;\n        scope = _$rootScope_;\n        scope.entries = [new Entry('entity', {some: 'values'}, 'entity_1'), new Entry('entity', {some: 'values'}, 'entity_2'), new Entry('entity', {some: 'values'}, 'entity_3')];\n        scope.selection = [new Entry('entity', {some: 'values'}, 'entity_2'), new Entry('entity', {some: 'values'}, 'entity_3')];\n    }));\n\n    it('checkbox should be indeterminate if entries does not correspond to selection', function () {\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n\n        expect(element.children()[0].indeterminate).toBe(true);\n        expect(element.children()[0].checked).toBe(false);\n    });\n\n    it('checkbox should be true if entries correspond to selection', function () {\n        scope.selection = scope.entries;\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n\n        expect(element.children()[0].indeterminate).toBe(false);\n        expect(element.children()[0].checked).toBe(true);\n    });\n\n    it('checkbox should be true if entries correspond to selection even if order differ', function () {\n        scope.selection = [scope.entries[2], scope.entries[1], scope.entries[0]];\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n\n        expect(element.children()[0].indeterminate).toBe(false);\n        expect(element.children()[0].checked).toBe(true);\n    });\n\n    it('checkbox should be false if selection is empty', function () {\n        scope.selection = [];\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n\n        expect(element.children()[0].indeterminate).toBe(false);\n        expect(element.children()[0].checked).toBe(false);\n    });\n\n    it('checkbox should become indeterminate once selection stop corresponding to entries', function () {\n        scope.selection = scope.entries;\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n\n        expect(element.children()[0].indeterminate).toBe(false);\n        expect(element.children()[0].checked).toBe(true);\n\n        scope.selection = [scope.selection.pop()];\n        scope.$digest();\n\n        expect(element.children()[0].indeterminate).toBe(true);\n        expect(element.children()[0].checked).toBe(false);\n    });\n\n    it('checkbox should become indeterminate once entries stop corresponding to selection', function () {\n        scope.selection = scope.entries;\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n\n        expect(element.children()[0].indeterminate).toBe(false);\n        expect(element.children()[0].checked).toBe(true);\n\n        scope.entries = scope.entries.concat(new Entry('entity', {some: 'value'}, 'entity_4'));\n\n        scope.$digest();\n\n        expect(element.children()[0].indeterminate).toBe(true);\n        expect(element.children()[0].checked).toBe(false);\n    });\n\n\n    it('checkbox should become false once selection become empty', function () {\n        scope.selection = scope.entries;\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n\n        expect(element.children()[0].indeterminate).toBe(false);\n        expect(element.children()[0].checked).toBe(true);\n\n        scope.selection = [];\n        scope.$digest();\n\n        expect(element.children()[0].indeterminate).toBe(false);\n        expect(element.children()[0].checked).toBe(false);\n    });\n\n    it('checkbox should become true once entries correspond to selection', function () {\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n\n        expect(element.children()[0].indeterminate).toBe(true);\n        expect(element.children()[0].checked).toBe(false);\n\n        scope.selection = scope.entries;\n        scope.$digest();\n\n        expect(element.children()[0].indeterminate).toBe(false);\n        expect(element.children()[0].checked).toBe(true);\n    });\n\n    it('checkbox should be false if selection is empty', function () {\n        scope.selection = [];\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n\n        expect(element.children()[0].indeterminate).toBe(false);\n        expect(element.children()[0].checked).toBe(false);\n    });\n});\n"]}
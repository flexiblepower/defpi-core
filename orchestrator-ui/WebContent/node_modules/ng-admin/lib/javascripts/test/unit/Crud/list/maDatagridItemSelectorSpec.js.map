{"version":3,"sources":["../../../../../../src/javascripts/test/unit/Crud/list/maDatagridItemSelectorSpec.js"],"names":["describe","directive","require","Entry","$compile","scope","directiveUsage","angular","module","beforeEach","mock","inject","_$compile_","_$rootScope_","entry","some","selection","it","element","$digest","expect","children","checked","toBe","push","concat"],"mappings":";;AAAA;AACAA,SAAS,sCAAT,EAAiD,YAAY;AACzD;;AAEA,QAAIC,YAAYC,QAAQ,uDAAR,CAAhB;AAAA,QACIC,QAAQD,QAAQ,wBAAR,CADZ;AAAA,QAEIE,QAFJ;AAAA,QAGIC,KAHJ;AAAA,QAIIC,iBAAiB,6FAJrB;;AAMAC,YAAQC,MAAR,CAAe,8BAAf,EAA+C,EAA/C,EACKP,SADL,CACe,wBADf,EACyCA,SADzC;;AAGAQ,eAAWF,QAAQG,IAAR,CAAaF,MAAb,CAAoB,8BAApB,CAAX;;AAEAC,eAAWE,OAAO,UAAUC,UAAV,EAAsBC,YAAtB,EAAoC;AAClDT,mBAAWQ,UAAX;AACAP,gBAAQQ,YAAR;AACAR,cAAMS,KAAN,GAAc,IAAIX,KAAJ,CAAU,QAAV,EAAoB,EAACY,MAAM,QAAP,EAApB,EAAsC,UAAtC,CAAd;AACAV,cAAMW,SAAN,GAAkB,CAAC,IAAIb,KAAJ,CAAU,QAAV,EAAoB,EAACY,MAAM,QAAP,EAApB,EAAsC,UAAtC,CAAD,EAAoD,IAAIZ,KAAJ,CAAU,QAAV,EAAoB,EAACY,MAAM,QAAP,EAApB,EAAsC,UAAtC,CAApD,CAAlB;AACH,KALU,CAAX;;AAOAE,OAAG,kDAAH,EAAuD,YAAY;AAC/D,YAAIC,UAAUd,SAASE,cAAT,EAAyBD,KAAzB,CAAd;AACAA,cAAMc,OAAN;;AAEAC,eAAOF,QAAQG,QAAR,GAAmB,CAAnB,EAAsBC,OAA7B,EAAsCC,IAAtC,CAA2C,KAA3C;AACH,KALD;;AAOAN,OAAG,4CAAH,EAAiD,YAAY;AACzDZ,cAAMW,SAAN,CAAgBQ,IAAhB,CAAqBnB,MAAMS,KAA3B;AACA,YAAII,UAAUd,SAASE,cAAT,EAAyBD,KAAzB,CAAd;AACAA,cAAMc,OAAN;;AAEAC,eAAOF,QAAQG,QAAR,GAAmB,CAAnB,EAAsBC,OAA7B,EAAsCC,IAAtC,CAA2C,IAA3C;AACH,KAND;;AAQAN,OAAG,0DAAH,EAA+D,YAAY;AACvE,YAAIC,UAAUd,SAASE,cAAT,EAAyBD,KAAzB,CAAd;AACAA,cAAMc,OAAN;;AAEAC,eAAOF,QAAQG,QAAR,GAAmB,CAAnB,EAAsBC,OAA7B,EAAsCC,IAAtC,CAA2C,KAA3C;AACAlB,cAAMW,SAAN,GAAkBX,MAAMW,SAAN,CAAgBS,MAAhB,CAAuBpB,MAAMS,KAA7B,CAAlB;AACAT,cAAMc,OAAN;AACAC,eAAOF,QAAQG,QAAR,GAAmB,CAAnB,EAAsBC,OAA7B,EAAsCC,IAAtC,CAA2C,IAA3C;AACH,KARD;;AAUAN,OAAG,wDAAH,EAA6D,YAAY;AACrEZ,cAAMW,SAAN,GAAkBX,MAAMW,SAAN,CAAgBS,MAAhB,CAAuBpB,MAAMS,KAA7B,CAAlB;AACA,YAAII,UAAUd,SAASE,cAAT,EAAyBD,KAAzB,CAAd;AACAA,cAAMc,OAAN;;AAEAC,eAAOF,QAAQG,QAAR,GAAmB,CAAnB,EAAsBC,OAA7B,EAAsCC,IAAtC,CAA2C,IAA3C;AACAlB,cAAMW,SAAN,GAAkB,EAAlB;AACAX,cAAMc,OAAN;AACAC,eAAOF,QAAQG,QAAR,GAAmB,CAAnB,EAAsBC,OAA7B,EAAsCC,IAAtC,CAA2C,KAA3C;AACH,KATD;AAUH,CAxDD","file":"maDatagridItemSelectorSpec.js","sourcesContent":["/*global angular,inject,describe,it,expect,beforeEach,module*/\ndescribe('directive: ma-datagrid-item-selector', function () {\n    'use strict';\n\n    var directive = require('../../../../ng-admin/Crud/list/maDatagridItemSelector'),\n        Entry = require('admin-config/lib/Entry'),\n        $compile,\n        scope,\n        directiveUsage = '<ma-datagrid-item-selector entry=\"entry\" selection=\"selection\"></ma-datagrid-item-selector>';\n\n    angular.module('testapp_DatagridItemSelector', [])\n        .directive('maDatagridItemSelector', directive);\n\n    beforeEach(angular.mock.module('testapp_DatagridItemSelector'));\n\n    beforeEach(inject(function (_$compile_, _$rootScope_) {\n        $compile = _$compile_;\n        scope = _$rootScope_;\n        scope.entry = new Entry('entity', {some: 'values'}, 'entity_1');\n        scope.selection = [new Entry('entity', {some: 'values'}, 'entity_2'), new Entry('entity', {some: 'values'}, 'entity_3')];\n    }));\n\n    it('should be unchecked if entry is not in selection', function () {\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n\n        expect(element.children()[0].checked).toBe(false);\n    });\n\n    it('should be checked if entry is in selection', function () {\n        scope.selection.push(scope.entry);\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n\n        expect(element.children()[0].checked).toBe(true);\n    });\n\n    it('should become checked if entry is removed from selection', function () {\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n\n        expect(element.children()[0].checked).toBe(false);\n        scope.selection = scope.selection.concat(scope.entry);\n        scope.$digest();\n        expect(element.children()[0].checked).toBe(true);\n    });\n\n    it('should become unchecked if entry is added to selection', function () {\n        scope.selection = scope.selection.concat(scope.entry);\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n\n        expect(element.children()[0].checked).toBe(true);\n        scope.selection = [];\n        scope.$digest();\n        expect(element.children()[0].checked).toBe(false);\n    });\n});\n"]}
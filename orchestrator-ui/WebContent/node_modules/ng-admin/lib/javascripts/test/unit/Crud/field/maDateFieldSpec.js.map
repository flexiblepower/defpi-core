{"version":3,"sources":["../../../../../../src/javascripts/test/unit/Crud/field/maDateFieldSpec.js"],"names":["describe","dateDirective","require","DateField","angular","module","filter","text","directive","$compile","scope","directiveUsage","beforeEach","mock","inject","_$compile_","_$rootScope_","it","field","element","$digest","expect","find","eq","attr","toBe","value","Date","format","val","date","attributes","placeholder","toEqual","now","isolatedScope","isolateScope","rawValue","triggerHandler"],"mappings":"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","file":"maDateFieldSpec.js","sourcesContent":["/*global angular,inject,describe,it,expect,beforeEach*/\ndescribe('directive: date-field', function() {\n    'use strict';\n\n    var dateDirective = require('../../../../ng-admin/Crud/field/maDateField');\n    var DateField = require('admin-config/lib/Field/DateField');\n\n    angular.module('testapp_DateField', ['ui.bootstrap', 'ui.bootstrap.tpls'])\n        .filter('translate', () => text => text)\n        .directive('maDateField', dateDirective);\n\n    var $compile,\n        scope,\n        directiveUsage = '<ma-date-field field=\"field\" value=\"value\"></ma-date-field>';\n\n    beforeEach(angular.mock.module('testapp_DateField'));\n\n    beforeEach(inject(function(_$compile_, _$rootScope_){\n        $compile = _$compile_;\n        scope = _$rootScope_;\n    }));\n\n    it(\"should contain an input tag\", function () {\n        scope.field = new DateField();\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.find('input').eq(0).attr('type')).toBe('text');\n    });\n\n    it('should format default value correctly', function () {\n        scope.value = new Date(2014, 2, 1);\n        scope.field = (new DateField()).format('yyyy-MM-dd');\n\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n\n        expect(element.find('input').eq(0).val()).toBe('2014-03-01');\n    });\n\n    it(\"should use the supplied format as datepicker parameter\", function () {\n        scope.field = new DateField().format('yyyy-MM');\n        var date = new Date('2015-01-23');\n        scope.value = date;\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.find('input').eq(0).attr('uib-datepicker-popup')).toBe('yyyy-MM');\n    });\n\n    it(\"should add any supplied attribute\", function () {\n        scope.field = new DateField().attributes({ placeholder: 'here the date' });\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.find('input').eq(0).attr('placeholder')).toEqual('here the date');\n    });\n\n    it(\"should contain the bounded value\", function () {\n        var now = '2015-04-05';\n        scope.value = new Date(now);\n        scope.field = new DateField();\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.find('input').eq(0).val()).toBe(now);\n    });\n\n    it('should update rawValue when updating value directly', () => {\n        const now = new Date('2016-09-18');\n        scope.value = now;\n        scope.field = new DateField();\n\n        const element = $compile(directiveUsage)(scope);\n        scope.$digest();\n\n        scope.value = new Date('2010-01-01');\n        scope.$digest();\n\n        expect(element.find('input').eq(0).val()).toBe('2010-01-01');\n    });\n\n    it('should update value when updating the rawValue directly', () => {\n        const now = new Date('2016-09-18');\n        scope.value = now;\n        scope.field = new DateField();\n\n        const element = $compile(directiveUsage)(scope);\n        const isolatedScope = element.isolateScope();\n\n        isolatedScope.rawValue = new Date('2010-01-01');\n        isolatedScope.$digest();\n\n        expect(isolatedScope.value).toBe('2010-01-01');\n    });\n\n    it('should not update value if input is invalid', () => {\n        const now = '2016-09-18';\n        scope.value = now;\n        scope.field = new DateField();\n\n        const element = $compile(directiveUsage)(scope);\n        const isolatedScope = element.isolateScope();\n\n        element.find('input').val('2016-09-1').triggerHandler('input');\n        isolatedScope.$digest();\n        expect(isolatedScope.value).toBe('2016-09-18');\n\n        element.find('input').val('2016-09-19').triggerHandler('input');\n        isolatedScope.$digest();\n        expect(isolatedScope.value).toBe('2016-09-19');\n    })\n});\n"]}
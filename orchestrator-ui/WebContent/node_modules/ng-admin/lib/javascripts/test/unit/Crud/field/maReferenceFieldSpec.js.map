{"version":3,"sources":["../../../../../../src/javascripts/test/unit/Crud/field/maReferenceFieldSpec.js"],"names":["describe","choiceDirective","require","referenceDirective","ReferenceField","mixins","DataStore","$compile","$timeout","scope","directiveUsage","angular","module","filter","text","directive","beforeEach","mock","$provide","service","$q","refresh","jasmine","createSpy","and","callFake","buildPromise","value","label","MockedReferenceRefresher","inject","_$compile_","_$rootScope_","_$timeout_","ReferenceRefresher","datastore","field","targetField","name","targetEntity","identifier","remoteComplete","refreshDelay","it","element","$digest","uiSelect","querySelector","expect","toBeTruthy","controller","choices","attr","flush","toHaveBeenCalled","toJson","items","toEqual","toBe"],"mappings":"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","file":"maReferenceFieldSpec.js","sourcesContent":["describe('ReferenceField', function() {\n    var choiceDirective = require('../../../../ng-admin/Crud/field/maChoiceField');\n    var referenceDirective = require('../../../../ng-admin/Crud/field/maReferenceField');\n    var ReferenceField = require('admin-config/lib/Field/ReferenceField');\n    var mixins = require('../../../mock/mixins');\n    var DataStore = require('admin-config/lib/DataStore/DataStore');\n\n    var $compile, $timeout, scope;\n    const directiveUsage = `\n        <ma-reference-field\n            entry=\"entry\"\n            field=\"field\"\n            value=\"value\"\n            datastore=\"datastore\">\n        </ma-reference-field>`;\n\n    angular.module('myTestingApp', ['ui.select', 'testapp_DataStore'])\n        .filter('translate', () => text => text)\n        .directive('maChoiceField', choiceDirective)\n        .directive('maReferenceField', referenceDirective);\n\n    beforeEach(function() {\n        angular.mock.module(function($provide) {\n            $provide.service('ReferenceRefresher', function($q) {\n                this.refresh = jasmine.createSpy('refresh').and.callFake(function() {\n                    return mixins.buildPromise([\n                        { value: 1, label: 'foo' },\n                        { value: 2, label: 'bar' },\n                        { value: 3, label: 'qux' }\n                    ]);\n                });\n            });\n        });\n    });\n\n    beforeEach(angular.mock.module('myTestingApp'));\n\n    var MockedReferenceRefresher;\n    beforeEach(inject(function (_$compile_, _$rootScope_, _$timeout_, ReferenceRefresher) {\n        $compile = _$compile_;\n        $timeout = _$timeout_;\n        scope = _$rootScope_;\n        MockedReferenceRefresher = ReferenceRefresher;\n    }));\n\n    beforeEach(function() {\n        scope.datastore = new DataStore();\n        scope.field = new ReferenceField('post_id')\n            .targetField({\n                name: () => 'name'\n            })\n            .targetEntity({\n                identifier: () => {\n                    return {\n                        name: () => 'id'\n                    };\n                }\n            })\n            .remoteComplete(true, { refreshDelay: 500 });\n    });\n\n    it('should be an ui-select field', function() {\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n\n        var uiSelect = element[0].querySelector('.ui-select-container');\n        expect(uiSelect).toBeTruthy();\n    });\n\n    it('should call remote API when inputting first characters', function () {\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n\n        var uiSelect = angular.element(element[0].querySelector('.ui-select-container')).controller('uiSelect');\n        var choices = angular.element(element[0].querySelector('.ui-select-choices'));\n\n        uiSelect.refresh(element.attr('refresh'));\n        $timeout.flush();\n        scope.$digest();\n\n        expect(MockedReferenceRefresher.refresh).toHaveBeenCalled();\n        expect(angular.toJson(uiSelect.items)).toEqual(angular.toJson([\n            { value: 1, label: 'foo' },\n            { value: 2, label: 'bar' },\n            { value: 3, label: 'qux' }\n        ]));\n    });\n\n    it('should be pre-filled with related label at initialization', function () {\n        scope.value = 2;\n\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        $timeout.flush();\n\n        var uiSelect = angular.element(element[0].querySelector('.ui-select-match-text'));\n        expect(uiSelect.text()).toBe('bar');\n    });\n\n    it('should get all choices loaded at initialization if refreshDelay is null', function() {\n        scope.field.remoteComplete(true, { refreshDelay: null });\n\n        var element = $compile(directiveUsage)(scope);\n        $timeout.flush();\n        scope.$digest();\n\n        var uiSelect = angular.element(element[0].querySelector('.ui-select-container')).controller('uiSelect');\n        expect(MockedReferenceRefresher.refresh).toHaveBeenCalled();\n        expect(uiSelect.items).toEqual([\n            { value: 1, label: 'foo' },\n            { value: 2, label: 'bar' },\n            { value: 3, label: 'qux' }\n        ]);\n    });\n});\n"]}
{"version":3,"sources":["../../../../../../src/javascripts/test/unit/Crud/field/maEmbeddedListFieldSpec.js"],"names":["describe","directive","require","Field","EmbeddedListField","angular","module","restrict","scope","translate","translateValues","template","value","$compile","directiveUsage","beforeEach","mock","inject","_$compile_","_$rootScope_","it","field","targetFields","num","name","dummy","element","$digest","expect","find","length","toBe","eq","text","trim","label","querySelector","textContent"],"mappings":"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","file":"maEmbeddedListFieldSpec.js","sourcesContent":["/*global angular,inject,describe,it,expect,beforeEach*/\ndescribe('directive: ma-embedded-list-field', function () {\n    'use strict';\n\n    var directive = require('../../../../ng-admin/Crud/field/maEmbeddedListField');\n    var Field = require('admin-config/lib/Field/Field');\n    var EmbeddedListField = require('admin-config/lib/Field/EmbeddedListField');\n\n    angular.module('testapp_EmbeddedListField', [])\n        .directive('translate', () => ({\n            restrict: 'A',\n            scope: { translate: '@', translateValues: '=' },\n            template: '{{ translate }} {{ translateValues.name }}'\n        }))\n        .directive('maEmbeddedListField', directive)\n        .directive('maField', function() {\n            return {\n                scope: { value: '=' },\n                template: '<input ng-model=\"value\"></input>'\n            };\n        });\n\n    var $compile,\n        scope,\n        directiveUsage = '<ma-embedded-list-field field=\"field\" value=\"value\" datastore=\"datastore\"></ma-embedded-list-field>';\n\n    beforeEach(angular.mock.module('testapp_EmbeddedListField'));\n\n    beforeEach(inject(function (_$compile_, _$rootScope_) {\n        $compile = _$compile_;\n        scope = _$rootScope_;\n    }));\n\n    it('should contain a list of subforms with bounded inputs', function () {\n        scope.field = new EmbeddedListField('dummy')\n            .targetFields([new Field('num'), new Field('name')]);\n        scope.value = [{ num: 1, name: 'foo', dummy: 0 }, { num: 2, name: 'bar', dummy: 1 }];\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.find('ng-form').length).toBe(2);\n        expect(element.find('input').length).toBe(4);\n        expect(element.find('a').eq(0).text().trim()).toBe('REMOVE');\n        expect(element.find('input').eq(0).scope().value).toBe(1);\n        expect(element.find('input').eq(1).scope().value).toBe('foo');\n        expect(element.find('a').eq(1).text().trim()).toBe('REMOVE');\n        expect(element.find('input').eq(2).scope().value).toBe(2);\n        expect(element.find('input').eq(3).scope().value).toBe('bar');\n        expect(element.find('a').eq(2).text().trim()).toBe('ADD_NEW dummy');\n    });\n\n    describe('Add Button', () => {\n        it('should display lower-cased label', () => {\n            scope.field = new EmbeddedListField('dummy_field')\n                .label('Awesome Entity');\n\n            var element = $compile(directiveUsage)(scope);\n            scope.$digest();\n\n            expect(element[0].querySelector('span[translate]').textContent.trim()).toBe('ADD_NEW awesome entity');\n        });\n    });\n});\n"]}
{"version":3,"sources":["../../../../../../src/javascripts/test/unit/Crud/misc/EntryFormatterSpec.js"],"names":["EntryFormatter","require","$filter","filter","value","format","getField","literal","field","Object","keys","forEach","attr","describe","entryFormatter","beforeEach","it","formatter","getFormatter","type","name","label","number","expect","values","toEqual","Number","text","Text","boolean","Boolean","listValues","reference","Reference","references","References","date","Date","mapped","unmapped","Mapped","supported","unsupported","Supported"],"mappings":"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","file":"EntryFormatterSpec.js","sourcesContent":["/*global jasmine,angular,describe,it,expect,beforeEach,spyOn*/\nvar EntryFormatter = require('../../../../ng-admin/Crud/misc/EntryFormatter');\nvar $filter = function (filter) {\n    return function (value, format) {\n        return {\n            filter: filter,\n            value: value,\n            format: format\n        };\n    };\n};\n\nfunction getField(literal) {\n    var field = {};\n    Object.keys(literal).forEach(function (attr) {\n        field[attr] = function () {\n            return literal[attr];\n        };\n    });\n    return field;\n}\n\ndescribe(\"Service: EntryFormatter.getFormatter formatter\", function () {\n    'use strict';\n\n    var entryFormatter;\n    beforeEach(function () {\n        entryFormatter = new EntryFormatter($filter);\n    });\n\n    it('formatter should format field of type number', function () {\n        var formatter = entryFormatter.getFormatter([getField({\n            type: 'number',\n            name: 'number',\n            label: 'Number',\n            format: '0.000%'\n        })]);\n        var number = 56;\n\n        expect(formatter({ values: { number: number } })).toEqual({ Number: { filter: 'numeraljs',  value: 56, format: '0.000%' } });\n    });\n\n    it('formatter should format field of type text', function () {\n        var formatter = entryFormatter.getFormatter([getField({\n            type: 'text',\n            name: 'text',\n            label: 'Text'\n        })]);\n\n        expect(formatter({values: {text: 'Hello World'}})).toEqual({Text: 'Hello World'});\n    });\n\n    it('formatter should format field of type boolean', function () {\n        var formatter = entryFormatter.getFormatter([getField({\n            type: 'boolean',\n            name: 'boolean',\n            label: 'Boolean'\n        })]);\n\n        expect(formatter({values: {boolean: true}})).toEqual({Boolean: true});\n    });\n\n    it('formatter should format field of type reference', function () {\n        var formatter = entryFormatter.getFormatter([getField({\n            type: 'reference',\n            name: 'reference',\n            label: 'Reference'\n        })]);\n\n        expect(formatter({listValues: {reference: 'a reference'}})).toEqual({Reference: 'a reference'});\n    });\n\n    it('formatter should format field of type reference_many', function () {\n        var formatter = entryFormatter.getFormatter([getField({\n            type: 'reference_many',\n            name: 'references',\n            label: 'References'\n        })]);\n\n        expect(formatter({listValues: {references: ['referenced_value1', 'referenced_value2']}})).toEqual({References: 'referenced_value1, referenced_value2'});\n    });\n\n    it('formatter should format field of type date', function () {\n        var formatter = entryFormatter.getFormatter([getField({\n            type: 'date',\n            name: 'date',\n            label: 'Date',\n            format: 'yyyy/mm/dd'\n        })]);\n        var date = new Date();\n\n        expect(formatter({values: {date: date}})).toEqual({Date: {\n            filter: 'date',\n            value: date,\n            format: 'yyyy/mm/dd'\n        }});\n    });\n\n    it ('formatter should discard unmapped field', function () {\n        var formatter = entryFormatter.getFormatter([getField({\n            type: 'text',\n            name: 'mapped',\n            label: 'Mapped'\n        })]);\n\n        expect(formatter({values: {mapped: 'mapped', unmapped: 'unmapped'}})).toEqual({Mapped: 'mapped'});\n\n    });\n\n    it ('formatter should not map unsupported field', function () {\n        var formatter = entryFormatter.getFormatter([\n            getField({\n                type: 'unsupported',\n                name: 'unsupported',\n                label: 'Unsupported'\n            }),\n            getField({\n                type: 'text',\n                name: 'supported',\n                label: 'Supported'\n            })\n        ]);\n\n        expect(formatter({values: {supported: 'supported', unsupported: 'unsupported'}})).toEqual({Supported: 'supported'});\n\n    });\n});\n"]}
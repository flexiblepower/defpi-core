{"version":3,"sources":["../../../../../../src/javascripts/test/unit/Crud/column/maBooleanColumnSpec.js"],"names":["describe","directive","require","BooleanField","angular","module","$compile","scope","directiveUsage","beforeEach","mock","inject","_$compile_","_$rootScope_","it","field","element","$digest","expect","children","nodeName","toBe","value","className"],"mappings":";;AAAA;AACAA,SAAS,8BAAT,EAAyC,YAAY;AACjD;;AAEA,QAAIC,YAAYC,QAAQ,kDAAR,CAAhB;AACA,QAAIC,eAAeD,QAAQ,qCAAR,CAAnB;;AAEAE,YAAQC,MAAR,CAAe,uBAAf,EAAwC,EAAxC,EAA4CJ,SAA5C,CAAsD,iBAAtD,EAAyEA,SAAzE;;AAEA,QAAIK,QAAJ;AAAA,QACIC,KADJ;AAAA,QAEIC,iBAAiB,qEAFrB;;AAIAC,eAAWL,QAAQM,IAAR,CAAaL,MAAb,CAAoB,uBAApB,CAAX;;AAEAI,eAAWE,OAAO,UAAUC,UAAV,EAAsBC,YAAtB,EAAoC;AAClDP,mBAAWM,UAAX;AACAL,gBAAQM,YAAR;AACH,KAHU,CAAX;;AAKAC,OAAG,2BAAH,EAAgC,YAAY;AACxCP,cAAMQ,KAAN,GAAc,IAAIZ,YAAJ,EAAd;AACA,YAAIa,UAAUV,SAASE,cAAT,EAAyBD,KAAzB,CAAd;AACAA,cAAMU,OAAN;AACAC,eAAOF,QAAQG,QAAR,GAAmB,CAAnB,EAAsBC,QAA7B,EAAuCC,IAAvC,CAA4C,MAA5C;AACH,KALD;;AAOAP,OAAG,sFAAH,EAA2F,YAAY;AACnGP,cAAMQ,KAAN,GAAc,IAAIZ,YAAJ,EAAd;AACAI,cAAMe,KAAN,GAAc,IAAd;AACA,YAAIN,UAAUV,SAASE,cAAT,EAAyBD,KAAzB,CAAd;AACAA,cAAMU,OAAN;AACAC,eAAOF,QAAQG,QAAR,GAAmB,CAAnB,EAAsBI,SAA7B,EAAwCF,IAAxC,CAA6C,wBAA7C;AACH,KAND;;AAQAP,OAAG,2FAAH,EAAgG,YAAY;AACxGP,cAAMQ,KAAN,GAAc,IAAIZ,YAAJ,EAAd;AACAI,cAAMe,KAAN,GAAc,KAAd;AACA,YAAIN,UAAUV,SAASE,cAAT,EAAyBD,KAAzB,CAAd;AACAA,cAAMU,OAAN;AACAC,eAAOF,QAAQG,QAAR,GAAmB,CAAnB,EAAsBI,SAA7B,EAAwCF,IAAxC,CAA6C,4BAA7C;AACH,KAND;;AAQAP,OAAG,wFAAH,EAA6F,YAAY;AACrGP,cAAMQ,KAAN,GAAc,IAAIZ,YAAJ,EAAd;AACAI,cAAMe,KAAN,GAAc,CAAd;AACA,YAAIN,UAAUV,SAASE,cAAT,EAAyBD,KAAzB,CAAd;AACAA,cAAMU,OAAN;AACAC,eAAOF,QAAQG,QAAR,GAAmB,CAAnB,EAAsBI,SAA7B,EAAwCF,IAAxC,CAA6C,wBAA7C;AACH,KAND;;AAQAP,OAAG,2FAAH,EAAgG,YAAY;AACxGP,cAAMQ,KAAN,GAAc,IAAIZ,YAAJ,EAAd;AACAI,cAAMe,KAAN,GAAc,CAAd;AACA,YAAIN,UAAUV,SAASE,cAAT,EAAyBD,KAAzB,CAAd;AACAA,cAAMU,OAAN;AACAC,eAAOF,QAAQG,QAAR,GAAmB,CAAnB,EAAsBI,SAA7B,EAAwCF,IAAxC,CAA6C,4BAA7C;AACH,KAND;AAOH,CAzDD","file":"maBooleanColumnSpec.js","sourcesContent":["/*global angular,inject,describe,it,expect,beforeEach*/\ndescribe('directive: ma-boolean-column', function () {\n    'use strict';\n\n    var directive = require('../../../../ng-admin/Crud/column/maBooleanColumn');\n    var BooleanField = require('admin-config/lib/Field/BooleanField');\n\n    angular.module('testapp_BooleanColumn', []).directive('maBooleanColumn', directive);\n\n    var $compile,\n        scope,\n        directiveUsage = '<ma-boolean-column field=\"field\" value=\"value\"></ma-boolean-column>';\n\n    beforeEach(angular.mock.module('testapp_BooleanColumn'));\n\n    beforeEach(inject(function (_$compile_, _$rootScope_) {\n        $compile = _$compile_;\n        scope = _$rootScope_;\n    }));\n\n    it(\"should contain a span tag\", function () {\n        scope.field = new BooleanField();\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.children()[0].nodeName).toBe('SPAN');\n    });\n\n    it(\"should contain a span tag with classes glyphicon and glyphicon-ok when value is true\", function () {\n        scope.field = new BooleanField();\n        scope.value = true;\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.children()[0].className).toBe('glyphicon glyphicon-ok');\n    });\n\n    it(\"should contain a span tag with classes glyphicon and glyphicon-remove when value is false\", function () {\n        scope.field = new BooleanField();\n        scope.value = false;\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.children()[0].className).toBe('glyphicon glyphicon-remove');\n    });\n\n    it(\"should contain a span tag with classes glyphicon and glyphicon-ok when value is truthy\", function () {\n        scope.field = new BooleanField();\n        scope.value = 1;\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.children()[0].className).toBe('glyphicon glyphicon-ok');\n    });\n\n    it(\"should contain a span tag with classes glyphicon and glyphicon-remove when value is falsy\", function () {\n        scope.field = new BooleanField();\n        scope.value = 0;\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.children()[0].className).toBe('glyphicon glyphicon-remove');\n    });\n});\n"]}
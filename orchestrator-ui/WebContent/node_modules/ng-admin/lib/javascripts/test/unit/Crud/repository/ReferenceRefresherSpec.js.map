{"version":3,"sources":["../../../../../../src/javascripts/test/unit/Crud/repository/ReferenceRefresherSpec.js"],"names":["assert","require","mixins","ReferenceField","ReadQueries","ReferenceRefresher","describe","fakeEntity","fakeField","beforeEach","name","identifier","targetEntity","targetField","flattenable","getMappedValue","v","type","it","readQueries","spy","spyOn","and","returnValue","buildPromise","refresher","refresh","expect","toHaveBeenCalled","toHaveBeenCalledWith","jasmine","any","Object","done","post","id","title","then","results","toEqual","value","label","e"],"mappings":"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","file":"ReferenceRefresherSpec.js","sourcesContent":["var assert = require('chai').assert;\nvar mixins = require('../../../mock/mixins');\nvar ReferenceField = require('admin-config/lib/Field/ReferenceField');\nvar ReadQueries = require('admin-config/lib/Queries/ReadQueries');\nvar ReferenceRefresher = require('../../../../ng-admin/Crud/repository/ReferenceRefresher');\n\ndescribe('ReferenceRefresher', function() {\n    var fakeEntity, fakeField;\n    beforeEach(function() {\n        fakeEntity = {\n            name: () => 'fooEntity',\n            identifier: () => {\n                return {\n                    name: () => 'id'\n                }\n            }\n        };\n\n        fakeField = {\n            name: () => 'post',\n            targetEntity: () => fakeEntity,\n            targetField: ()  => {\n                return {\n                    name: () => 'title',\n                    flattenable: () => false,\n                    getMappedValue: v => v\n                }\n            },\n            type: () => 'reference'\n        };\n    });\n\n    describe('refresh', function() {\n        it('should call remote API with given search parameter', function() {\n            var readQueries = new ReadQueries();\n            var spy = spyOn(readQueries, 'getAllReferencedData');\n            spy.and.returnValue(mixins.buildPromise({ 'post': [] }));\n\n            var refresher = new ReferenceRefresher(readQueries);\n            refresher.refresh(fakeField, null, 'foo');\n\n            expect(spy).toHaveBeenCalled();\n            expect(spy).toHaveBeenCalledWith(jasmine.any(Object), 'foo');\n        });\n\n        it('should format correctly returned results', function(done) {\n            var readQueries = new ReadQueries();\n            var spy = spyOn(readQueries, 'getAllReferencedData');\n            spy.and.returnValue(mixins.buildPromise({\n                post: [\n                    { id: 1, title: 'Discover some awesome stuff' },\n                    { id: 2, title: 'Another great post'}\n                ]\n            }));\n\n            var refresher = new ReferenceRefresher(readQueries);\n            refresher.refresh(fakeField, null, 'foo').then(function(results) {\n                expect(results).toEqual([\n                    { value: 1, label: 'Discover some awesome stuff' },\n                    { value: 2, label: 'Another great post' }\n                ]);\n                done();\n            });\n        });\n\n        describe('Choice deduplication (to fix some UI-Select duplicated options)', function() {\n            var refresher;\n            beforeEach(function() {\n                var readQueries = new ReadQueries();\n                var spy = spyOn(readQueries, 'getAllReferencedData');\n                spy.and.returnValue(mixins.buildPromise({\n                    post: [\n                        { id: 1, title: 'Discover some awesome stuff' },\n                        { id: 2, title: 'Another great post'}\n                    ]\n                }));\n\n                refresher = new ReferenceRefresher(readQueries);\n            });\n\n            it('should remove already selected values from result list in case of multiple choices component', function(done) {\n                fakeField.type = () => 'reference_many';\n\n                refresher.refresh(fakeField, [1], 'foo').then(function(results) {\n                    expect(results).toEqual([\n                        { value: 2, label: 'Another great post' }\n                    ]);\n                    done();\n                });\n            });\n\n            it('should not de-duplicate simple choice in case of single choice component', function(done) {\n                fakeField.type = () => 'reference';\n\n                refresher.refresh(fakeField, [1], 'foo').then(function(results) {\n                    expect(results).toEqual([\n                        { value: 1, label: 'Discover some awesome stuff' },\n                        { value: 2, label: 'Another great post' }\n                    ]);\n                    done();\n                });\n            });\n        });\n\n        it('should return value transformed by `maps` field functions', function(done) {\n            var readQueries = new ReadQueries();\n            var spy = spyOn(readQueries, 'getAllReferencedData');\n            spy.and.returnValue(mixins.buildPromise({\n                post: [\n                    { id: 1, title: 'Discover some awesome stuff' },\n                    { id: 2, title: 'Another great post'}\n                ]\n            }));\n\n            fakeField = {\n                name: () => 'post',\n                targetEntity: () => fakeEntity,\n                targetField: ()  => {\n                    return {\n                        name: () => 'title',\n                        flattenable: () => false,\n                        getMappedValue: (v, e) => `${e.title} (#${e.id})`\n                    }\n                },\n                type: () => 'reference'\n            };\n\n            var refresher = new ReferenceRefresher(readQueries);\n            refresher.refresh(fakeField, null).then(function(results) {\n                expect(results).toEqual([\n                    { value: 1, label: 'Discover some awesome stuff (#1)' },\n                    { value: 2, label: 'Another great post (#2)' }\n                ]);\n                done();\n            });\n        });\n    });\n});\n"]}
{"version":3,"sources":["../../../../../../src/javascripts/test/unit/Crud/column/maColumnSpec.js"],"names":["describe","directive","require","Field","angular","module","service","string","getReadWidget","$compile","scope","directiveUsage","beforeEach","mock","inject","_$compile_","_$rootScope_","it","field","entry","values","foo","entity","isReadOnly","editionView","enabled","element","$digest","expect","html","toContain","template","not"],"mappings":";;AAAA;AACAA,SAAS,sBAAT,EAAiC,YAAY;AACzC;;AAEA,QAAIC,YAAYC,QAAQ,2CAAR,CAAhB;AACA,QAAIC,QAAQD,QAAQ,8BAAR,CAAZ;AACAE,YAAQC,MAAR,CAAe,gBAAf,EAAiC,EAAjC,EACKJ,SADL,CACe,UADf,EAC2BA,SAD3B,EAEKK,OAFL,CAEa,wBAFb,EAEuC;AAAA,eAAO,EAAEC,QAAQ,EAAEC,eAAe;AAAA,2BAAM,OAAN;AAAA,iBAAjB,EAAV,EAAP;AAAA,KAFvC,EAGKF,OAHL,CAGa,QAHb,EAGuB;AAAA,eAAO,EAAP;AAAA,KAHvB,EAIKA,OAJL,CAIa,eAJb,EAI8B;AAAA,eAAO,EAAP;AAAA,KAJ9B,EAKKA,OALL,CAKa,sBALb,EAKqC;AAAA,eAAO,EAAP;AAAA,KALrC;;AAOA,QAAIG,QAAJ;AAAA,QACIC,KADJ;AAAA,QAEIC,iBAAiB,iGAFrB;;AAIAC,eAAWR,QAAQS,IAAR,CAAaR,MAAb,CAAoB,gBAApB,CAAX;;AAEAO,eAAWE,OAAO,UAAUC,UAAV,EAAsBC,YAAtB,EAAoC;AAClDP,mBAAWM,UAAX;AACAL,gBAAQM,YAAR;AACH,KAHU,CAAX;;AAKAC,OAAG,6EAAH,EAAkF,YAAY;AAC1FP,cAAMQ,KAAN,GAAc,IAAIf,KAAJ,CAAU,KAAV,CAAd;AACAO,cAAMS,KAAN,GAAc,EAAEC,QAAQ,EAAEC,KAAK,IAAP,EAAV,EAAd;AACAX,cAAMY,MAAN,GAAe,EAAEC,YAAY,KAAd,EAAqBC,aAAa;AAAA,uBAAO,EAAEC,SAAS,IAAX,EAAP;AAAA,aAAlC,EAAf;AACA,YAAIC,UAAUjB,SAASE,cAAT,EAAyBD,KAAzB,CAAd;AACAA,cAAMiB,OAAN;AACAC,eAAOF,QAAQG,IAAR,EAAP,EAAuBC,SAAvB,CAAiC,OAAjC;AACH,KAPD;;AASAb,OAAG,qEAAH,EAA0E,YAAY;AAClFP,cAAMQ,KAAN,GAAc,IAAIf,KAAJ,CAAU,KAAV,EAAiB4B,QAAjB,CAA0B,OAA1B,CAAd;AACArB,cAAMS,KAAN,GAAc,EAAEC,QAAQ,EAAEC,KAAK,IAAP,EAAV,EAAd;AACAX,cAAMY,MAAN,GAAe,EAAEC,YAAY,KAAd,EAAqBC,aAAa;AAAA,uBAAO,EAAEC,SAAS,IAAX,EAAP;AAAA,aAAlC,EAAf;AACA,YAAIC,UAAUjB,SAASE,cAAT,EAAyBD,KAAzB,CAAd;AACAA,cAAMiB,OAAN;AACAC,eAAOF,QAAQG,IAAR,EAAP,EAAuBG,GAAvB,CAA2BF,SAA3B,CAAqC,OAArC;AACAF,eAAOF,QAAQG,IAAR,EAAP,EAAuBC,SAAvB,CAAiC,OAAjC;AACH,KARD;AAUH,CA1CD","file":"maColumnSpec.js","sourcesContent":["/*global angular,inject,describe,it,expect,beforeEach*/\ndescribe('directive: ma-column', function () {\n    'use strict';\n\n    var directive = require('../../../../ng-admin/Crud/column/maColumn');\n    var Field = require('admin-config/lib/Field/Field');\n    angular.module('testapp_Column', [])\n        .directive('maColumn', directive)\n        .service('FieldViewConfiguration', () => ({ string: { getReadWidget: () => 'DUMMY' } }))\n        .service('$state', () => ({}))\n        .service('$anchorScroll', () => ({}))\n        .service('NgAdminConfiguration', () => ({}));\n\n    var $compile,\n        scope,\n        directiveUsage = '<ma-column field=\"::field\" entry=\"entry\" entity=\"::entity\" datastore=\"::dataStore\"></ma-column>';\n\n    beforeEach(angular.mock.module('testapp_Column'));\n\n    beforeEach(inject(function (_$compile_, _$rootScope_) {\n        $compile = _$compile_;\n        scope = _$rootScope_;\n    }));\n\n    it(\"should render the ReadWidget from the fieldView Configuration for that type\", function () {\n        scope.field = new Field('foo');\n        scope.entry = { values: { foo: null } };\n        scope.entity = { isReadOnly: false, editionView: () => ({ enabled: true })};\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.html()).toContain('DUMMY');\n    });\n\n    it(\"should render the Field template instead of the ReadWidget when set\", function () {\n        scope.field = new Field('foo').template('YOPLA');\n        scope.entry = { values: { foo: null } };\n        scope.entity = { isReadOnly: false, editionView: () => ({ enabled: true })};\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.html()).not.toContain('DUMMY');\n        expect(element.html()).toContain('YOPLA');\n    });\n\n});\n"]}
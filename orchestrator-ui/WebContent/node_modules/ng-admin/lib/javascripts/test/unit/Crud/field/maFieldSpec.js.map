{"version":3,"sources":["../../../../../../src/javascripts/test/unit/Crud/field/maFieldSpec.js"],"names":["describe","directive","require","Field","angular","module","filter","text","service","string","getWriteWidget","$compile","scope","directiveUsage","beforeEach","mock","inject","_$compile_","_$rootScope_","it","field","form","foo","element","$digest","expect","html","toContain","template","not"],"mappings":";;AAAA;AACAA,SAAS,qBAAT,EAAgC,YAAY;AACxC;;AAEA,QAAIC,YAAYC,QAAQ,yCAAR,CAAhB;AACA,QAAIC,QAAQD,QAAQ,8BAAR,CAAZ;AACAE,YAAQC,MAAR,CAAe,eAAf,EAAgC,EAAhC,EACKC,MADL,CACY,WADZ,EACyB;AAAA,eAAM;AAAA,mBAAQC,IAAR;AAAA,SAAN;AAAA,KADzB,EAEKN,SAFL,CAEe,SAFf,EAE0BA,SAF1B,EAGKO,OAHL,CAGa,wBAHb,EAGuC;AAAA,eAAO,EAAEC,QAAQ,EAAEC,gBAAgB;AAAA,2BAAM,OAAN;AAAA,iBAAlB,EAAV,EAAP;AAAA,KAHvC;;AAKA,QAAIC,QAAJ;AAAA,QACIC,KADJ;AAAA,QAEIC,iBAAiB,2GAFrB;;AAIAC,eAAWV,QAAQW,IAAR,CAAaV,MAAb,CAAoB,eAApB,CAAX;;AAEAS,eAAWE,OAAO,UAAUC,UAAV,EAAsBC,YAAtB,EAAoC;AAClDP,mBAAWM,UAAX;AACAL,gBAAQM,YAAR;AACH,KAHU,CAAX;;AAKAC,OAAG,8EAAH,EAAmF,YAAY;AAC3FP,cAAMQ,KAAN,GAAc,IAAIjB,KAAJ,CAAU,KAAV,CAAd;AACAS,cAAMS,IAAN,GAAa,EAAEC,KAAK,EAAP,EAAb;AACA,YAAIC,UAAUZ,SAASE,cAAT,EAAyBD,KAAzB,CAAd;AACAA,cAAMY,OAAN;AACAC,eAAOF,QAAQG,IAAR,EAAP,EAAuBC,SAAvB,CAAiC,OAAjC;AACH,KAND;;AAQAR,OAAG,sEAAH,EAA2E,YAAY;AACnFP,cAAMQ,KAAN,GAAc,IAAIjB,KAAJ,CAAU,KAAV,EAAiByB,QAAjB,CAA0B,OAA1B,CAAd;AACAhB,cAAMS,IAAN,GAAa,EAAEC,KAAK,EAAP,EAAb;AACA,YAAIC,UAAUZ,SAASE,cAAT,EAAyBD,KAAzB,CAAd;AACAA,cAAMY,OAAN;AACAC,eAAOF,QAAQG,IAAR,EAAP,EAAuBG,GAAvB,CAA2BF,SAA3B,CAAqC,OAArC;AACAF,eAAOF,QAAQG,IAAR,EAAP,EAAuBC,SAAvB,CAAiC,OAAjC;AACH,KAPD;AASH,CAtCD","file":"maFieldSpec.js","sourcesContent":["/*global angular,inject,describe,it,expect,beforeEach*/\ndescribe('directive: ma-field', function () {\n    'use strict';\n\n    var directive = require('../../../../ng-admin/Crud/field/maField');\n    var Field = require('admin-config/lib/Field/Field');\n    angular.module('testapp_Field', [])\n        .filter('translate', () => text => text)\n        .directive('maField', directive)\n        .service('FieldViewConfiguration', () => ({ string: { getWriteWidget: () => 'DUMMY' } }));\n\n    var $compile,\n        scope,\n        directiveUsage = '<ma-field field=\"::field\" entry=\"entry\" entity=\"::entity\" form=\"form\" datastore=\"::dataStore\"></ma-field>';\n\n    beforeEach(angular.mock.module('testapp_Field'));\n\n    beforeEach(inject(function (_$compile_, _$rootScope_) {\n        $compile = _$compile_;\n        scope = _$rootScope_;\n    }));\n\n    it(\"should render the WriteWidget from the fieldView Configuration for that type\", function () {\n        scope.field = new Field('foo');\n        scope.form = { foo: {} };\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.html()).toContain('DUMMY');\n    });\n\n    it(\"should render the Field template instead of the WriteWidget when set\", function () {\n        scope.field = new Field('foo').template('YOPLA');\n        scope.form = { foo: {} };\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.html()).not.toContain('DUMMY');\n        expect(element.html()).toContain('YOPLA');\n    });\n\n});\n"]}
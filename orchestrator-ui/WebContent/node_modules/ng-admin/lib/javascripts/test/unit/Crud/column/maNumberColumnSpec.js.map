{"version":3,"sources":["../../../../../../src/javascripts/test/unit/Crud/column/maNumberColumnSpec.js"],"names":["describe","directive","require","NumberField","angular","module","filter","$compile","scope","directiveUsage","beforeEach","mock","inject","_$compile_","_$rootScope_","it","field","element","$digest","expect","children","nodeName","toBe","value","find","html","format"],"mappings":";;AAAA;AACAA,SAAS,6BAAT,EAAwC,YAAY;AAChD;;AAEA,QAAIC,YAAYC,QAAQ,iDAAR,CAAhB;AACA,QAAIC,cAAcD,QAAQ,oCAAR,CAAlB;;AAEAE,YAAQC,MAAR,CAAe,sBAAf,EAAuC,CAAC,aAAD,CAAvC,EACKC,MADL,CACY,aADZ,EAC2BJ,QAAQ,gFAAR,CAD3B,EAEKD,SAFL,CAEe,gBAFf,EAEiCA,SAFjC;;AAIA,QAAIM,QAAJ;AAAA,QACIC,KADJ;AAAA,QAEIC,iBAAiB,mEAFrB;;AAIAC,eAAWN,QAAQO,IAAR,CAAaN,MAAb,CAAoB,sBAApB,CAAX;;AAEAK,eAAWE,OAAO,UAAUC,UAAV,EAAsBC,YAAtB,EAAoC;AAClDP,mBAAWM,UAAX;AACAL,gBAAQM,YAAR;AACH,KAHU,CAAX;;AAKAC,OAAG,2BAAH,EAAgC,YAAY;AACxCP,cAAMQ,KAAN,GAAc,IAAIb,WAAJ,EAAd;AACA,YAAIc,UAAUV,SAASE,cAAT,EAAyBD,KAAzB,CAAd;AACAA,cAAMU,OAAN;AACAC,eAAOF,QAAQG,QAAR,GAAmB,CAAnB,EAAsBC,QAA7B,EAAuCC,IAAvC,CAA4C,MAA5C;AACH,KALD;;AAOAP,OAAG,uCAAH,EAA4C,YAAY;AACpDP,cAAMQ,KAAN,GAAc,IAAIb,WAAJ,EAAd;AACAK,cAAMe,KAAN,GAAc,GAAd;AACA,YAAIN,UAAUV,SAASE,cAAT,EAAyBD,KAAzB,CAAd;AACAA,cAAMU,OAAN;AACAC,eAAOF,QAAQO,IAAR,CAAa,MAAb,EAAqBC,IAArB,EAAP,EAAoCH,IAApC,CAAyC,KAAzC;AACAd,cAAMe,KAAN,GAAc,GAAd;AACAf,cAAMU,OAAN;AACAC,eAAOF,QAAQO,IAAR,CAAa,MAAb,EAAqBC,IAArB,EAAP,EAAoCH,IAApC,CAAyC,KAAzC;AACH,KATD;;AAWAP,OAAG,uCAAH,EAA4C,YAAY;AACpDP,cAAMQ,KAAN,GAAc,IAAIb,WAAJ,GAAkBuB,MAAlB,CAAyB,WAAzB,CAAd;AACAlB,cAAMe,KAAN,GAAc,MAAd;AACA,YAAIN,UAAUV,SAASE,cAAT,EAAyBD,KAAzB,CAAd;AACAA,cAAMU,OAAN;AACAC,eAAOF,QAAQO,IAAR,CAAa,MAAb,EAAqBC,IAArB,EAAP,EAAoCH,IAApC,CAAyC,WAAzC;AACH,KAND;AAOH,CA9CD","file":"maNumberColumnSpec.js","sourcesContent":["/*global angular,inject,describe,it,expect,beforeEach*/\ndescribe('directive: ma-number-column', function () {\n    'use strict';\n\n    var directive = require('../../../../ng-admin/Crud/column/maNumberColumn');\n    var NumberField = require('admin-config/lib/Field/NumberField');\n\n    angular.module('testapp_NumberColumn', ['ngNumeraljs'])\n        .filter('ngNumeraljs', require('../../../../../../node_modules/angular-numeraljs/dist/angular-numeraljs.min.js'))\n        .directive('maNumberColumn', directive);\n\n    var $compile,\n        scope,\n        directiveUsage = '<ma-number-column field=\"field\" value=\"value\"></ma-number-column>';\n\n    beforeEach(angular.mock.module('testapp_NumberColumn'));\n\n    beforeEach(inject(function (_$compile_, _$rootScope_) {\n        $compile = _$compile_;\n        scope = _$rootScope_;\n    }));\n\n    it(\"should contain a span tag\", function () {\n        scope.field = new NumberField();\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.children()[0].nodeName).toBe('SPAN');\n    });\n\n    it(\"should contain the bounded value with\", function () {\n        scope.field = new NumberField();\n        scope.value = 123;\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.find('span').html()).toBe('123');\n        scope.value = 456;\n        scope.$digest();\n        expect(element.find('span').html()).toBe('456');\n    });\n\n    it(\"should use the provided number format\", function () {\n        scope.field = new NumberField().format('$0,000.00');\n        scope.value = 1234.5;\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.find('span').html()).toBe('$1,234.50');\n    });\n});\n"]}
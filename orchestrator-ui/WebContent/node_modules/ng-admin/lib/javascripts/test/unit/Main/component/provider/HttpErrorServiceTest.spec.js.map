{"version":3,"sources":["../../../../../../../src/javascripts/test/unit/Main/component/provider/HttpErrorServiceTest.spec.js"],"names":["HttpErrorServiceProvider","require","describe","$state","$translate","HttpErrorService","notification","angular","module","service","go","jasmine","createSpy","and","returnValue","then","cb","log","provider","beforeEach","mock","inject","_$state_","_$translate_","_HttpErrorService_","_notification_","it","event","preventDefault","error","status","handleError","expect","toHaveBeenCalled","toHaveBeenCalledWith","data","message","toBe","e","addnCls"],"mappings":"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","file":"HttpErrorServiceTest.spec.js","sourcesContent":["const HttpErrorServiceProvider = require('../../../../../ng-admin/Main/component/provider/HttpErrorService');\n\ndescribe('Http Error Service', () => {\n    let $state;\n    let $translate;\n    let HttpErrorService;\n    let notification;\n\n    angular.module('test_HttpErrorService', [])\n        .service('$state', () => ({\n            go: jasmine.createSpy('$state.go'),\n        }))\n        .service('$translate', () => (\n            jasmine.createSpy('$translate').and.returnValue({ then: cb => cb('translated') })\n        ))\n        .service('notification', () => ({\n            log: jasmine.createSpy('notification.log'),\n        }))\n        .provider('HttpErrorService', HttpErrorServiceProvider);\n\n    beforeEach(angular.mock.module('test_HttpErrorService'));\n\n    beforeEach(inject(function (_$state_, _$translate_, _HttpErrorService_, _notification_) {\n        $state = _$state_;\n        $translate = _$translate_;\n        HttpErrorService = _HttpErrorService_;\n        notification = _notification_;\n    }));\n\n    it('should redirect to `ma-404` state when receiving a 404 error', () => {\n        const event = {\n            preventDefault: jasmine.createSpy(),\n        };\n\n        const error = { status: 404 };\n        HttpErrorService.handleError(event, '', '', '', '', error);\n\n        expect(event.preventDefault).toHaveBeenCalled();\n        expect($state.go).toHaveBeenCalledWith('ma-404');\n    });\n\n    it('should display a translated forbidden error notification in case of 403', () => {\n        const error = {\n            status: 403,\n            data: {\n                message: 'Forbidden access',\n            },\n        };\n\n        try {\n            HttpErrorService.handleError('', '', '', '', '', error);\n            expect(true).toBe(false);\n        } catch (e) {\n            // should throw an exception in case of 403\n        }\n\n        expect($translate).toHaveBeenCalledWith('STATE_FORBIDDEN_ERROR', { message: 'Forbidden access' });\n        expect(notification.log).toHaveBeenCalledWith('translated', { addnCls: 'humane-flatty-error' });\n    });\n\n    it('should display generic translated error notification if neither 404 nor 403', () => {\n        const error = {\n            status: 500,\n            data: {\n              message: 'Unknown error',\n            }\n        };\n\n        try {\n            HttpErrorService.handleError('', '', '', '', '', error);\n            expect(true).toBe(false);\n        } catch (e) {\n            // should throw an exception in case of 500\n        }\n\n        expect($translate).toHaveBeenCalledWith('STATE_CHANGE_ERROR', { message: 'Unknown error' });\n        expect(notification.log).toHaveBeenCalledWith('translated', { addnCls: 'humane-flatty-error' });\n    });\n});\n"]}
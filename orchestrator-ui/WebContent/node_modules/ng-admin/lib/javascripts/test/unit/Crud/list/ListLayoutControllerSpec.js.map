{"version":3,"sources":["../../../../../../src/javascripts/test/unit/Crud/list/ListLayoutControllerSpec.js"],"names":["describe","getCurrentSearchParam","require","it","location","search","JSON","stringify","name","filters","pinned","getMappedValue","value","expect","toEqual","defaultValue","firstname"],"mappings":"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","file":"ListLayoutControllerSpec.js","sourcesContent":["/*global describe,it,expect,beforeEach*/\ndescribe('ListLayoutController', function () {\n    var getCurrentSearchParam = require('../../../../ng-admin/Crud/list/ListLayoutController').getCurrentSearchParam;\n\n    describe('getCurrentSearchParam', function () {\n        it('should return search url parameter mapped by filter', function () {\n            const location = {\n                search: function () {\n                    return { search: JSON.stringify({ name: 'doe' }) };\n                }\n            };\n\n            const filters = [\n                { pinned: function () { return false; }, name: function() { return 'name'; }, getMappedValue: function (value) { return `mapped name for ${value}`; } },\n                { pinned: function () { return false; }, name: function() { return 'firstname'; }, getMappedValue: function (value) { return `mapped firstname for ${value}`; } }\n            ];\n\n            expect(getCurrentSearchParam(location, filters)).toEqual({ name: 'mapped name for doe' });\n        });\n\n        it('should add pinned filter defaultValue if not already set', function () {\n            const location = {\n                search: function () {\n                    return { search: JSON.stringify({ name: 'doe' }) };\n                }\n            };\n\n            const filters = [\n                {\n                    pinned: function () { return false; },\n                    name: function() { return 'name'; },\n                    getMappedValue: function (value) { return `mapped name for ${value}`; }\n                },\n                {\n                    pinned: function () { return true; },\n                    name: function() { return 'firstname'; },\n                    getMappedValue: function (value) { return `mapped firstname for ${value}`; },\n                    defaultValue: function (value) { return `default value for firstname`; }\n                }\n            ];\n\n            expect(getCurrentSearchParam(location, filters))\n            .toEqual({ name: 'mapped name for doe', firstname: 'mapped firstname for default value for firstname' });\n        });\n\n        it('should ignore pinned filter if location search has already a corresponding value', function () {\n            const location = {\n                search: function () {\n                    return { search: JSON.stringify({ name: 'doe', firstname: 'john' }) };\n                }\n            };\n\n            const filters = [\n                {\n                    pinned: function () { return false; },\n                    name: function() { return 'name'; },\n                    getMappedValue: function (value) { return `mapped name for ${value}`; }\n                },\n                {\n                    pinned: function () { return true; },\n                    name: function() { return 'firstname'; },\n                    getMappedValue: function (value) { return `mapped firstname for ${value}`; },\n                    defaultValue: function (value) { return `mapped firstname for default value for firstname`; }\n                }\n            ];\n\n            expect(getCurrentSearchParam(location, filters))\n            .toEqual({ name: 'mapped name for doe', firstname: 'mapped firstname for john' });\n        });\n    });\n});\n"]}
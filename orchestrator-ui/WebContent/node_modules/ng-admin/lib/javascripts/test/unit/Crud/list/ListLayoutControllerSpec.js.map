{"version":3,"sources":["../../../../../../src/javascripts/test/unit/Crud/list/ListLayoutControllerSpec.js"],"names":["describe","it","spyOn","prototype","and","returnValue","$scope","$watch","$on","$location","path","search","view","getEntity","batchActions","actions","filters","my_column","pinned","listLayoutController","expect","updateFilters","toHaveBeenCalled","location","JSON","stringify","name","getMappedValue","value","toEqual","firstname","defaultValue"],"mappings":"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","file":"ListLayoutControllerSpec.js","sourcesContent":["/*global describe,it,expect,beforeEach*/\nimport ListLayoutController, {getCurrentSearchParam} from '../../../../ng-admin/Crud/list/ListLayoutController'\n\ndescribe('ListLayoutController', function () {\n    describe('constructor', () => {\n        it('should update filters if initialized with any', () => {\n            spyOn(ListLayoutController.prototype, 'updateFilters');\n            spyOn(ListLayoutController, 'getCurrentSearchParam')\n                .and.returnValue({});\n\n            const $scope = {\n                $watch: () => {},\n                $on: () => {},\n            };\n\n            const $location = {\n                path: () => '/my_entity',\n                search: () => '',\n            };\n\n            const view = {\n                getEntity: () => 'my_entity',\n                batchActions: () => [],\n                actions: () => [],\n                filters: () => [{\n                    my_column: 17,\n                    pinned: () => true,\n                }],\n            };\n\n            const listLayoutController = new ListLayoutController(\n                $scope, null, null, $location, null, view, null\n            );\n\n            expect(ListLayoutController.prototype.updateFilters)\n                .toHaveBeenCalled();\n        });\n    });\n\n\n    describe('getCurrentSearchParam', function () {\n        it('should return search url parameter mapped by filter', function () {\n            const location = {\n                search: function () {\n                    return { search: JSON.stringify({ name: 'doe' }) };\n                }\n            };\n\n            const filters = [\n                { pinned: function () { return false; }, name: function() { return 'name'; }, getMappedValue: function (value) { return `mapped name for ${value}`; } },\n                { pinned: function () { return false; }, name: function() { return 'firstname'; }, getMappedValue: function (value) { return `mapped firstname for ${value}`; } }\n            ];\n\n            expect(getCurrentSearchParam(location, filters)).toEqual({ name: 'mapped name for doe' });\n        });\n\n        it('should ignore pinned filter if location search has already a corresponding value', function () {\n            const location = {\n                search: function () {\n                    return { search: JSON.stringify({ name: 'doe', firstname: 'john' }) };\n                }\n            };\n\n            const filters = [\n                {\n                    pinned: function () { return false; },\n                    name: function() { return 'name'; },\n                    getMappedValue: function (value) { return `mapped name for ${value}`; }\n                },\n                {\n                    pinned: function () { return true; },\n                    name: function() { return 'firstname'; },\n                    getMappedValue: function (value) { return `mapped firstname for ${value}`; },\n                    defaultValue: function (value) { return `mapped firstname for default value for firstname`; }\n                }\n            ];\n\n            expect(getCurrentSearchParam(location, filters))\n            .toEqual({ name: 'mapped name for doe', firstname: 'mapped firstname for john' });\n        });\n    });\n});\n"]}
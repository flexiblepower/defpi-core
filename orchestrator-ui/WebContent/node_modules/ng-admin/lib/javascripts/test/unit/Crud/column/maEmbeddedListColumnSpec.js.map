{"version":3,"sources":["../../../../../../src/javascripts/test/unit/Crud/column/maEmbeddedListColumnSpec.js"],"names":["describe","directive","require","Field","EmbeddedListField","angular","module","service","$compile","scope","directiveUsage","beforeEach","mock","inject","_$compile_","_$rootScope_","it","field","targetFields","value","num","name","dummy","element","$digest","expect","children","nodeName","toBe","datagridScope","eq","entries","length","values","toEqual","sortField","sortDir","permanentFilters"],"mappings":"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","file":"maEmbeddedListColumnSpec.js","sourcesContent":["/*global angular,inject,describe,it,expect,beforeEach*/\ndescribe('directive: ma-embedded-list-column', function () {\n    'use strict';\n\n    var directive = require('../../../../ng-admin/Crud/column/maEmbeddedListColumn');\n    var Field = require('admin-config/lib/Field/Field');\n    var EmbeddedListField = require('admin-config/lib/Field/EmbeddedListField');\n\n    angular.module('testapp_EmbeddedListColumn', [])\n        .directive('maEmbeddedListColumn', directive)\n        .service('NgAdminConfiguration', () => () => ({}));\n\n    var $compile,\n        scope,\n        directiveUsage = '<ma-embedded-list-column field=\"field\" value=\"value\" datastore=\"datastore\"></ma-embedded-list-column>';\n\n    beforeEach(angular.mock.module('testapp_EmbeddedListColumn'));\n\n    beforeEach(inject(function (_$compile_, _$rootScope_) {\n        $compile = _$compile_;\n        scope = _$rootScope_;\n    }));\n\n    it('should contain a datagrid', function () {\n        scope.field = new EmbeddedListField()\n            .targetFields([new Field('num'), new Field('name')]);\n        scope.value = [{ num: 1, name: 'foo', dummy: 0 }, { num: 2, name: 'bar', dummy: 1 }];\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.children()[0].nodeName).toBe('MA-DATAGRID');\n        const datagridScope = element.children().eq(0).scope();\n        expect(datagridScope.entries.length).toBe(2);\n        expect(datagridScope.entries[0].values).toEqual({ num: 1, name: 'foo', dummy: 0 });\n        expect(datagridScope.entries[1].values).toEqual({ num: 2, name: 'bar', dummy: 1 });\n        expect(datagridScope.targetFields.length).toBe(2);\n        expect(datagridScope.targetFields[0].name()).toBe('num');\n        expect(datagridScope.targetFields[1].name()).toBe('name');\n    });\n\n    it('should sort the list according to the sortField', function () {\n        scope.field = new EmbeddedListField()\n            .targetFields([new Field('num'), new Field('name')])\n            .sortField('num')\n            .sortDir('DESC');\n        scope.value = [{ num: 1, name: 'foo', dummy: 0 }, { num: 2, name: 'bar', dummy: 1 }];\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        const datagridScope = angular.element(element.children()[0]).scope();\n        expect(datagridScope.entries.length).toBe(2);\n        expect(datagridScope.entries[0].values).toEqual({ num: 2, name: 'bar', dummy: 1 });\n        expect(datagridScope.entries[1].values).toEqual({ num: 1, name: 'foo', dummy: 0 });\n        expect(datagridScope.sortField).toEqual('num');\n        expect(datagridScope.sortDir).toEqual('DESC');\n    });\n\n    it('should filter the list according to the permanentFilters', function () {\n        scope.field = new EmbeddedListField()\n            .targetFields([new Field('num'), new Field('name')])\n            .permanentFilters({ name: 'foo' });\n        scope.value = [{ num: 1, name: 'foo', dummy: 0 }, { num: 2, name: 'bar', dummy: 1 }];\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        const datagridScope = angular.element(element.children()[0]).scope();\n        expect(datagridScope.entries.length).toBe(1);\n        expect(datagridScope.entries[0].values).toEqual({ num: 1, name: 'foo', dummy: 0 });\n    });\n\n});\n"]}
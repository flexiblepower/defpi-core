{"version":3,"sources":["../../../../../../src/javascripts/test/unit/Crud/field/maJsonFieldSpec.js"],"names":["describe","directive","require","Field","angular","module","$compile","scope","directiveUsage","beforeEach","mock","inject","_$compile_","_$rootScope_","it","field","element","$digest","expect","children","nodeName","toBe","attributes","placeholder","toEqual","find","val","value","bar","JSON","stringify","parse","triggerHandler"],"mappings":";;AAAA;AACAA,SAAS,uBAAT,EAAkC,YAAY;AAC1C;;AAEA,QAAIC,YAAYC,QAAQ,6CAAR,CAAhB;AACA,QAAIC,QAAQD,QAAQ,8BAAR,CAAZ;;AAEAE,YAAQC,MAAR,CAAe,mBAAf,EAAoC,EAApC,EAAwCJ,SAAxC,CAAkD,aAAlD,EAAiEA,SAAjE;;AAEA,QAAIK,QAAJ;AAAA,QACIC,KADJ;AAAA,QAEIC,iBAAiB,6DAFrB;;AAIAC,eAAWL,QAAQM,IAAR,CAAaL,MAAb,CAAoB,mBAApB,CAAX;;AAEAI,eAAWE,OAAO,UAAUC,UAAV,EAAsBC,YAAtB,EAAoC;AAClDP,mBAAWM,UAAX;AACAL,gBAAQM,YAAR;AACH,KAHU,CAAX;;AAKAC,OAAG,+BAAH,EAAoC,YAAY;AAC5CP,cAAMQ,KAAN,GAAc,IAAIZ,KAAJ,EAAd;AACA,YAAIa,UAAUV,SAASE,cAAT,EAAyBD,KAAzB,CAAd;AACAA,cAAMU,OAAN;AACAC,eAAOF,QAAQG,QAAR,GAAmB,CAAnB,EAAsBC,QAA7B,EAAuCC,IAAvC,CAA4C,UAA5C;AACH,KALD;;AAOAP,OAAG,mCAAH,EAAwC,YAAY;AAChDP,cAAMQ,KAAN,GAAc,IAAIZ,KAAJ,GAAYmB,UAAZ,CAAuB,EAAEC,aAAa,UAAf,EAAvB,CAAd;AACA,YAAIP,UAAUV,SAASE,cAAT,EAAyBD,KAAzB,CAAd;AACAA,cAAMU,OAAN;AACAC,eAAOF,QAAQG,QAAR,GAAmB,CAAnB,EAAsBI,WAA7B,EAA0CC,OAA1C,CAAkD,UAAlD;AACH,KALD;;AAOAV,OAAG,4CAAH,EAAiD,YAAY;AACzDP,cAAMQ,KAAN,GAAc,IAAIZ,KAAJ,EAAd;AACA,YAAIa,UAAUV,SAASE,cAAT,EAAyBD,KAAzB,CAAd;AACAA,cAAMU,OAAN;AACAC,eAAOF,QAAQS,IAAR,CAAa,UAAb,EAAyBC,GAAzB,EAAP,EAAuCL,IAAvC,CAA4C,EAA5C;AACH,KALD;;AAOAP,OAAG,4EAAH,EAAiF,YAAY;AACzFP,cAAMQ,KAAN,GAAc,IAAIZ,KAAJ,EAAd;AACAI,cAAMoB,KAAN,GAAc,CAAC,KAAD,EAAQ,EAAEC,KAAK,GAAP,EAAR,CAAd;AACA,YAAIZ,UAAUV,SAASE,cAAT,EAAyBD,KAAzB,CAAd;AACAA,cAAMU,OAAN;AACAC,eAAOF,QAAQS,IAAR,CAAa,UAAb,EAAyBC,GAAzB,EAAP,EAAuCL,IAAvC,CAA4CQ,KAAKC,SAAL,CAAeD,KAAKE,KAAL,CAAW,qBAAX,CAAf,EAAkD,IAAlD,EAAwD,CAAxD,CAA5C;AACH,KAND;;AAQAjB,OAAG,+DAAH,EAAoE,YAAY;AAC5EP,cAAMQ,KAAN,GAAc,IAAIZ,KAAJ,EAAd;AACA,YAAIa,UAAUV,SAASE,cAAT,EAAyBD,KAAzB,CAAd;AACAA,cAAMU,OAAN;AACAD,gBAAQS,IAAR,CAAa,UAAb,EAAyBC,GAAzB,CAA6BG,KAAKC,SAAL,CAAeD,KAAKE,KAAL,CAAW,qBAAX,CAAf,EAAkD,IAAlD,EAAwD,CAAxD,CAA7B;AACA;AACA;AACAf,gBAAQS,IAAR,CAAa,UAAb,EAAyBO,cAAzB,CAAwC,OAAxC;AACAzB,cAAMU,OAAN;AACA;AACAC,eAAOW,KAAKC,SAAL,CAAevB,MAAMoB,KAArB,CAAP,EAAoCN,IAApC,CAAyCQ,KAAKC,SAAL,CAAe,CAAC,KAAD,EAAO,EAAC,OAAM,GAAP,EAAP,CAAf,CAAzC;AACH,KAXD;AAYH,CA5DD","file":"maJsonFieldSpec.js","sourcesContent":["/*global angular,inject,describe,it,expect,beforeEach*/\ndescribe('directive: json-field', function () {\n    'use strict';\n\n    var directive = require('../../../../ng-admin/Crud/field/maJsonField');\n    var Field = require('admin-config/lib/Field/Field');\n\n    angular.module('testapp_JsonField', []).directive('maJsonField', directive);\n\n    var $compile,\n        scope,\n        directiveUsage = '<ma-json-field field=\"field\" value=\"value\"></ma-json-field>';\n\n    beforeEach(angular.mock.module('testapp_JsonField'));\n\n    beforeEach(inject(function (_$compile_, _$rootScope_) {\n        $compile = _$compile_;\n        scope = _$rootScope_;\n    }));\n\n    it(\"should contain a textarea tag\", function () {\n        scope.field = new Field();\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.children()[0].nodeName).toBe('TEXTAREA');\n    });\n\n    it(\"should add any supplied attribute\", function () {\n        scope.field = new Field().attributes({ placeholder: 'fill me!' });\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.children()[0].placeholder).toEqual('fill me!');\n    });\n\n    it(\"should use an empty string for null values\", function () {\n        scope.field = new Field();\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.find('textarea').val()).toBe('');\n    });\n\n    it(\"should be initialized with the stringified bounded value as textarea value\", function () {\n        scope.field = new Field();\n        scope.value = [\"foo\", { bar: 123 }];\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.find('textarea').val()).toBe(JSON.stringify(JSON.parse('[\"foo\",{\"bar\":123}]'), null, 2));\n    });\n\n    it(\"should convert the JSON string into a JavaScript object value\", function () {\n        scope.field = new Field();\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        element.find('textarea').val(JSON.stringify(JSON.parse('[\"foo\",{\"bar\":456}]'), null, 2));\n        // ngModel listens for \"input\" event\n        // http://stackoverflow.com/questions/15739960/how-does-angularjs-internally-catch-events-like-onclick-onchange/15740287#15740287\n        element.find('textarea').triggerHandler('input');\n        scope.$digest();\n        // We must compare on datas, because objects are different, even with same datas\n        expect(JSON.stringify(scope.value)).toBe(JSON.stringify([\"foo\",{\"bar\":456}]));\n    });\n});\n"]}
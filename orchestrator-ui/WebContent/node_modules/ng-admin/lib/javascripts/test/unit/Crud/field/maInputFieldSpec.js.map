{"version":3,"sources":["../../../../../../src/javascripts/test/unit/Crud/field/maInputFieldSpec.js"],"names":["describe","directive","require","Field","angular","module","$compile","scope","directiveUsage","beforeEach","mock","inject","_$compile_","_$rootScope_","it","field","element","$digest","expect","children","nodeName","toBe","type","attributes","autocomplete","getAttribute","toEqual","min","max","input","value","find","val","step"],"mappings":"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","file":"maInputFieldSpec.js","sourcesContent":["/*global angular,inject,describe,it,expect,beforeEach*/\ndescribe('directive: input-field', function () {\n    'use strict';\n\n    var directive = require('../../../../ng-admin/Crud/field/maInputField');\n    var Field = require('admin-config/lib/Field/Field');\n    angular.module('testapp_InputField', []).directive('maInputField', directive);\n\n    var $compile,\n        scope,\n        directiveUsage = '<ma-input-field type=\"{{ type }}\" field=\"field\" value=\"value\"></ma-input-field>';\n\n    beforeEach(angular.mock.module('testapp_InputField'));\n\n    beforeEach(inject(function (_$compile_, _$rootScope_) {\n        $compile = _$compile_;\n        scope = _$rootScope_;\n    }));\n\n    it(\"should contain an input tag\", function () {\n        scope.field = new Field();\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.children()[0].nodeName).toBe('INPUT');\n        expect(element.children()[0].type).toBe('text');\n    });\n\n    it(\"should use the passed type\", function () {\n        scope.field = new Field();\n        scope.type = \"checkbox\";\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.children()[0].type).toBe('checkbox');\n    });\n\n    it(\"should add any supplied attribute\", function () {\n        scope.field = new Field().attributes({ autocomplete: 'off' });\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.children()[0].getAttribute('autocomplete')).toEqual('off');\n    });\n\n    it(\"should use the field min and max attributes\", function () {\n        scope.field = new Field().attributes({ min: -2, max: 2 });\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        var input = element.children()[0];\n        expect(input.getAttribute('min')).toEqual('-2');\n        expect(input.getAttribute('max')).toEqual('2');\n    });\n\n    it(\"should contain the bounded value\", function () {\n        scope.field = new Field();\n        scope.value = \"foobar\";\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.find('input').val()).toBe('foobar');\n        scope.value = \"baz\";\n        scope.$digest();\n        expect(element.find('input').val()).toBe('baz');\n    });\n\n    it('should set `step` attribute in scope if passed as element attribute', function() {\n        scope.field = new Field().attributes({ step: 'any' });\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.find('input')[0].step).toBe('any');\n    });\n});\n"]}
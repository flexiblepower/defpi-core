{"version":3,"sources":["../../../../../../src/javascripts/test/unit/Crud/delete/DeleteControllerSpec.js"],"names":["describe","DeleteController","require","Entity","humane","$scope","$window","$q","beforeEach","inject","$controller","$rootScope","_$window_","_$q_","$new","$translate","text","Configuration","getErrorMessageFor","$state","go","jasmine","createSpy","get","params","writeQueries","deleteOne","and","callFake","when","progression","start","done","notification","id","entity","view","title","description","actions","getEntity","entry","it","deletedId","deleteController","then","expect","toHaveBeenCalled","fromStateParams","$emit","$digest","calls","argsFor","toBe","toEqual","commentId","history","back"],"mappings":"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","file":"DeleteControllerSpec.js","sourcesContent":["describe('DeleteController', function () {\n    'use strict';\n\n    var DeleteController = require('../../../../ng-admin/Crud/delete/DeleteController'),\n        Entity = require('admin-config/lib/Entity/Entity'),\n        humane = require('humane-js');\n\n    var $scope, $window, $q;\n    beforeEach(inject(function ($controller, $rootScope, _$window_, _$q_) {\n        $scope = $rootScope.$new();\n        $window = _$window_;\n        $q = _$q_;\n    }));\n\n    describe('deleteOne', function() {\n        var $translate = text => text;\n        var Configuration = () => ({\n            getErrorMessageFor: () => '',\n        });\n        var $state = {\n            go: jasmine.createSpy('$state.go'),\n            get: jasmine.createSpy('$state.get'),\n            params: {}\n        };\n        var writeQueries = {\n            deleteOne: jasmine.createSpy('writeQueries.deleteOne').and.callFake(() => $q.when())\n        };\n        var progression = {\n            start: () => true,\n            done: () => true,\n        };\n        var notification = humane;\n        var params = {\n            id: 3,\n            entity: new Entity('post')\n        };\n        var view = {\n            title: () => 'My view',\n            description: () => 'Description',\n            actions: () => [],\n            getEntity: () => new Entity('post')\n        };\n        var entry = {};\n        describe('on success', function() {\n            it('should delete given entity', function(done) {\n                // assume we are on post #3 deletion page\n                const entity = new Entity('post');\n                const deletedId = 3;\n                const view = {\n                    title: () => 'Deleting a post',\n                    description: () => 'Remove a post',\n                    actions: () => [],\n                    getEntity: () => entity\n                };\n\n                let deleteController = new DeleteController($scope, $window, $state, $q, $translate, writeQueries, Configuration, progression, notification, {\n                    id: deletedId,\n                    entity: 'post'\n                }, view, entry);\n\n                deleteController.deleteOne(view, 3).then(function() {\n                    expect(writeQueries.deleteOne).toHaveBeenCalled();\n                    done();\n                }, done);\n\n                const fromStateParams = { entity: 'post', id: 3 };\n                $scope.$emit('$stateChangeSuccess', {}, {}, {}, fromStateParams);\n\n                $scope.$digest();\n            });\n\n            it('should redirect to entity list view if previous page is specific to deleted entity', function(done) {\n                // assume we are on post #3 deletion page\n                const entity = new Entity('post');\n                const deletedId = 3;\n                const view = {\n                    title: () => 'Deleting a post',\n                    description: () => 'Remove a post',\n                    actions: () => [],\n                    getEntity: () => entity\n                };\n\n                let deleteController = new DeleteController($scope, $window, $state, $q, $translate, writeQueries, Configuration, progression, notification, {\n                    id: deletedId,\n                    entity: 'post'\n                }, view, entry);\n\n                deleteController.deleteOne(view, 3).then(function() {\n                    expect($state.get.calls.argsFor(0)[0]).toBe('list');\n                    expect($state.go.calls.argsFor(0)[1]).toEqual({\n                        entity: 'post'\n                    });\n                    done();\n                }, done);\n\n                // assume we come from post #3 page\n                const fromStateParams = { entity: 'post', id: deletedId };\n                $scope.$emit('$stateChangeSuccess', {}, {}, {}, fromStateParams);\n\n                $scope.$digest();\n            });\n\n            it('should redirect to previous page if not specific to deleted entity', function(done) {\n                // assume we are on comment #7 deletion page\n                const commentId = 7;\n                const view = {\n                    title: () => 'Deleting a comment',\n                    description: () => 'Remove a comment',\n                    actions: () => [],\n                    getEntity: () => new Entity('comment')\n                };\n\n                let $window = { history: { back: jasmine.createSpy('$window.history.back') } };\n                let deleteController = new DeleteController($scope, $window, $state, $q, $translate, writeQueries, Configuration, progression, notification, {\n                    id: commentId,\n                    entity: 'comment'\n                }, view, entry);\n\n                deleteController.deleteOne(view, 3).then(function() {\n                    expect($window.history.back).toHaveBeenCalled();\n                    done();\n                }, done);\n\n                // assume we come from post #3 page\n                const fromStateParams = { entity: 'post', id: 3 };\n                $scope.$emit('$stateChangeSuccess', {}, {}, {}, fromStateParams);\n\n                $scope.$digest();\n            });\n        });\n    });\n});\n"]}
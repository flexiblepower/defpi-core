{"version":3,"sources":["../../../../../../src/javascripts/test/unit/Crud/delete/DeleteControllerSpec.js"],"names":["describe","DeleteController","require","Entity","humane","$scope","$window","$q","beforeEach","inject","$controller","$rootScope","_$window_","_$q_","$new","$translate","text","Configuration","getErrorMessageFor","$state","go","jasmine","createSpy","get","and","callFake","state","params","writeQueries","deleteOne","when","progression","start","done","notification","id","entity","view","title","description","actions","getEntity","entry","HttpErrorService","handleError","it","deletedId","deleteController","then","expect","toHaveBeenCalled","fromStateParams","$emit","$digest","calls","argsFor","toBe","toEqual","commentId","history","back","Promise","reject","assert","fail","catch"],"mappings":"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","file":"DeleteControllerSpec.js","sourcesContent":["describe('DeleteController', function () {\n    'use strict';\n\n    var DeleteController = require('../../../../ng-admin/Crud/delete/DeleteController'),\n        Entity = require('admin-config/lib/Entity/Entity'),\n        humane = require('humane-js');\n\n    var $scope, $window, $q;\n    beforeEach(inject(function ($controller, $rootScope, _$window_, _$q_) {\n        $scope = $rootScope.$new();\n        $window = _$window_;\n        $q = _$q_;\n    }));\n\n    describe('deleteOne', function() {\n        var $translate = text => text;\n        var Configuration = () => ({\n            getErrorMessageFor: () => '',\n        });\n        var $state = {\n            go: jasmine.createSpy('$state.go'),\n            get: jasmine.createSpy('$state.get').and.callFake(state => state),\n            params: {}\n        };\n        var writeQueries = {\n            deleteOne: jasmine.createSpy('writeQueries.deleteOne').and.callFake(() => $q.when())\n        };\n        var progression = {\n            start: () => true,\n            done: () => true,\n        };\n        var notification = humane;\n        var params = {\n            id: 3,\n            entity: new Entity('post')\n        };\n        var view = {\n            title: () => 'My view',\n            description: () => 'Description',\n            actions: () => [],\n            getEntity: () => new Entity('post')\n        };\n        var entry = {};\n        const HttpErrorService = {\n            handleError: jasmine.createSpy('HttpErrorService.handleError')\n        };\n        describe('on success', function() {\n            it('should delete given entity', function(done) {\n                // assume we are on post #3 deletion page\n                const entity = new Entity('post');\n                const deletedId = 3;\n                const view = {\n                    title: () => 'Deleting a post',\n                    description: () => 'Remove a post',\n                    actions: () => [],\n                    getEntity: () => entity\n                };\n\n                let deleteController = new DeleteController($scope, $window, $state, $q, $translate, writeQueries, Configuration, progression, notification, {\n                    id: deletedId,\n                    entity: 'post'\n                }, view, entry, HttpErrorService);\n\n                deleteController.deleteOne(view, 3).then(function() {\n                    expect(writeQueries.deleteOne).toHaveBeenCalled();\n                    done();\n                }, done);\n\n                const fromStateParams = { entity: 'post', id: 3 };\n                $scope.$emit('$stateChangeSuccess', {}, {}, {}, fromStateParams);\n\n                $scope.$digest();\n            });\n\n            it('should redirect to entity list view if previous page is specific to deleted entity', function(done) {\n                // assume we are on post #3 deletion page\n                const entity = new Entity('post');\n                const deletedId = 3;\n                const view = {\n                    title: () => 'Deleting a post',\n                    description: () => 'Remove a post',\n                    actions: () => [],\n                    getEntity: () => entity\n                };\n\n                let deleteController = new DeleteController($scope, $window, $state, $q, $translate, writeQueries, Configuration, progression, notification, {\n                    id: deletedId,\n                    entity: 'post'\n                }, view, entry, HttpErrorService);\n\n                deleteController.deleteOne(view, 3).then(function() {\n                    expect($state.get.calls.argsFor(0)[0]).toBe('list');\n                    expect($state.go.calls.argsFor(0)[1]).toEqual({\n                        entity: 'post'\n                    });\n                    done();\n                }, done);\n\n                // assume we come from post #3 page\n                const fromStateParams = { entity: 'post', id: deletedId };\n                $scope.$emit('$stateChangeSuccess', {}, {}, {}, fromStateParams);\n\n                $scope.$digest();\n            });\n\n            it('should redirect to previous page if not specific to deleted entity', function(done) {\n                // assume we are on comment #7 deletion page\n                const commentId = 7;\n                const view = {\n                    title: () => 'Deleting a comment',\n                    description: () => 'Remove a comment',\n                    actions: () => [],\n                    getEntity: () => new Entity('comment')\n                };\n\n                let $window = { history: { back: jasmine.createSpy('$window.history.back') } };\n                let deleteController = new DeleteController($scope, $window, $state, $q, $translate, writeQueries, Configuration, progression, notification, {\n                    id: commentId,\n                    entity: 'comment'\n                }, view, entry, HttpErrorService);\n\n                deleteController.deleteOne(view, 3).then(function() {\n                    expect($window.history.back).toHaveBeenCalled();\n                    done();\n                }, done);\n\n                // assume we come from post #3 page\n                const fromStateParams = { entity: 'post', id: 3 };\n                $scope.$emit('$stateChangeSuccess', {}, {}, {}, fromStateParams);\n\n                $scope.$digest();\n            });\n        });\n        describe('on error', function() {\n            writeQueries = {\n                deleteOne: jasmine.createSpy('writeQueries.deleteOne')\n                    .and.callFake(() => Promise.reject(\"Here's a bad bad bad error\"))\n            };\n            it('should call HttpErrorService handler', (done) => {\n                // assume we are on post #3 deletion page\n                const entity = new Entity('post');\n                const deletedId = 3;\n                const view = {\n                    title: () => 'Deleting a post',\n                    description: () => 'Remove a post',\n                    actions: () => [],\n                    getEntity: () => entity\n                };\n\n                let deleteController = new DeleteController($scope, $window, $state, $q, $translate, writeQueries, Configuration, progression, notification, {\n                    id: deletedId,\n                    entity: 'post'\n                }, view, entry, HttpErrorService);\n\n                deleteController.deleteOne(view, 3)\n                    .then(() => {\n                        assert.fail();\n                        done();\n                    })\n                    .catch(() => {\n                        expect(HttpErrorService.handleError.calls.argsFor(0)[5]).toBe(\"Here's a bad bad bad error\")\n                        done();\n                    });\n\n                const fromStateParams = { entity: 'post', id: 3 };\n                $scope.$emit('$stateChangeSuccess', {}, {}, {}, fromStateParams);\n\n                $scope.$digest();\n            });\n        });\n    });\n});\n"]}
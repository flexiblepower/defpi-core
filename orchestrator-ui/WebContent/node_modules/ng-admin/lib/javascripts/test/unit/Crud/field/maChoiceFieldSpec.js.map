{"version":3,"sources":["../../../../../../src/javascripts/test/unit/Crud/field/maChoiceFieldSpec.js"],"names":["describe","directive","require","ChoiceField","angular","module","filter","text","$compile","scope","directiveUsage","beforeEach","mock","inject","_$compile_","_$rootScope_","it","field","element","$digest","uiSelect","children","expect","classList","contains","toBeTruthy","attributes","disabled","getAttribute","test","isRequired","expectedAllowClearValue","validation","required","querySelector","toEqual","toString","choices","label","value","controller","toJson","items","JSON","stringify","entry","choicesFuncWasCalled","moo","selected","subCategories","category","sc","values","subcategory","toBe"],"mappings":"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","file":"maChoiceFieldSpec.js","sourcesContent":["/*global angular,inject,describe,it,expect,beforeEach*/\ndescribe('directive: choice-field', function () {\n    var directive = require('../../../../ng-admin/Crud/field/maChoiceField');\n    var ChoiceField = require('admin-config/lib/Field/ChoiceField');\n\n    angular.module('testapp_ChoiceField', ['ui.select'])\n        .filter('translate', () => text => text)\n        .directive('maChoiceField', directive);\n\n    var $compile,\n        scope,\n        directiveUsage = '<ma-choice-field entry=\"entry\" field=\"field\" value=\"value\"></ma-choice-field>';\n\n    beforeEach(angular.mock.module('testapp_ChoiceField'));\n\n    beforeEach(inject(function (_$compile_, _$rootScope_) {\n        $compile = _$compile_;\n        scope = _$rootScope_;\n    }));\n\n    it(\"should contain a ui-select tag\", function () {\n        scope.field = new ChoiceField();\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n\n        var uiSelect = element.children()[0];\n        expect(uiSelect.classList.contains('ui-select-container')).toBeTruthy();\n    });\n\n    it(\"should add any supplied attribute\", function () {\n        scope.field = new ChoiceField().attributes({ disabled: true });\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n        expect(element.children()[0].getAttribute('disabled')).toBeTruthy();\n    });\n\n    it('should allow to remove selected option only if not required', function() {\n        function test(isRequired, expectedAllowClearValue) {\n            scope.field = new ChoiceField().validation({ required: isRequired });\n            var element = $compile(directiveUsage)(scope);\n            scope.$digest();\n\n            expect(element[0].querySelector('.ui-select-match').getAttribute('allow-clear')).toEqual(expectedAllowClearValue.toString());\n        }\n\n        test(true, false);\n        test(false, true);\n    });\n\n    it(\"should contain the choices as options\", function () {\n        scope.field = new ChoiceField().choices([\n            {label: 'foo', value: 'bar'},\n            {label: 'baz', value: 'bazValue'}\n        ]);\n\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n\n        var uiSelect = angular.element(element.children()[0]).controller('uiSelect');\n        expect(angular.toJson(uiSelect.items)).toEqual(JSON.stringify([\n            {label: 'foo', value: 'bar'},\n            {label: 'baz', value: 'bazValue'}\n        ]));\n    });\n\n    it(\"should contain the choices from choicesFunc as options\", function () {\n        var choices = [\n            {label: 'foo', value: 'bar'},\n            {label: 'baz', value: 'bazValue'}\n        ];\n\n        scope.field = new ChoiceField().choices(function(entry){\n            return choices;\n        });\n\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n\n        var uiSelect = angular.element(element.children()[0]).controller('uiSelect');\n        expect(angular.toJson(uiSelect.items)).toEqual(JSON.stringify([\n            {label: 'foo', value: 'bar'},\n            {label: 'baz', value: 'bazValue'}\n        ]));\n    });\n\n    it(\"should pass entry to choicesFunc\", function () {\n        var choices = [];\n        var choicesFuncWasCalled = false;\n\n        scope.entry = {moo: 'boo'};\n        scope.field = new ChoiceField().choices(function(entry){\n            expect(entry.moo).toEqual('boo');\n            choicesFuncWasCalled = true;\n            return choices;\n        });\n\n        $compile(directiveUsage)(scope);\n        scope.$digest();\n\n        expect(choicesFuncWasCalled).toBeTruthy();\n    });\n\n    it(\"should have the option with the bounded value selected\", function () {\n        scope.field = new ChoiceField().choices([\n            { label: 'foo', value: 'bar' },\n            { label: 'baz', value: 'bazValue' },\n        ]);\n\n        scope.value = 'bazValue';\n\n        var element = $compile(directiveUsage)(scope);\n        scope.$digest();\n\n        var uiSelect = angular.element(element.children()[0]).controller('uiSelect');\n        expect(angular.toJson(uiSelect.selected)).toEqual(JSON.stringify({\n            label: 'baz',\n            value: 'bazValue'\n        }));\n    });\n\n    it('should refresh choices if related entity is changed', () => {\n        const subCategories = [\n            { category: 'tech', label: 'Computers', value: 'computers' },\n            { category: 'tech', label: 'Gadgets', value: 'gadgets' },\n            { category: 'lifestyle', label: 'Travel', value: 'travel' },\n            { category: 'lifestyle', label: 'Fitness', value: 'fitness' }\n        ];\n\n        scope.field = new ChoiceField()\n            .choices(entry => subCategories.filter(\n                sc => sc.category === entry.values.category\n            ));\n\n        scope.entry = {\n            values: {\n                category: 'lifestyle',\n                subcategory: 'travel'\n            }\n        };\n\n        const element = $compile(directiveUsage)(scope);\n        scope.$digest();\n\n        // updating entry category should update subcategories\n        scope.entry.values.category = 'tech';\n        scope.$digest();\n\n        const uiSelect = angular.element(element.children()[0]).controller('uiSelect');\n        expect(angular.toJson(uiSelect.items)).toEqual(JSON.stringify([\n            { category: 'tech', label: 'Computers', value: 'computers' },\n            { category: 'tech', label: 'Gadgets', value: 'gadgets' },\n        ]));\n    });\n\n    it('should unset currently selected value if choices change', () => {\n        const subCategories = [\n            { category: 'tech', label: 'Computers', value: 'computers' },\n            { category: 'tech', label: 'Gadgets', value: 'gadgets' },\n            { category: 'lifestyle', label: 'Travel', value: 'travel' },\n            { category: 'lifestyle', label: 'Fitness', value: 'fitness' }\n        ];\n\n        scope.field = new ChoiceField()\n            .choices(entry => subCategories.filter(\n                sc => sc.category === entry.values.category\n            ));\n\n        scope.value = 'travel';\n        scope.entry = {\n            values: {\n                category: 'lifestyle',\n                subcategory: 'travel'\n            }\n        };\n\n\n        const element = $compile(directiveUsage)(scope);\n        scope.$digest();\n\n        // updating entry category should update subcategories\n        scope.entry.values.category = 'tech';\n        scope.$digest();\n\n        const uiSelect = angular.element(element.children()[0]).controller('uiSelect');\n        expect(uiSelect.selected).toBe(null);\n    });\n});\n"]}
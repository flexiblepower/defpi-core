{"version":3,"sources":["../../../../../../src/javascripts/test/unit/Crud/list/maDatagridInfinitePaginationSpec.js"],"names":["directive","require","describe","$compile","$scope","$window","$document","element","bodyHeightMock","handler","pageSize","directiveUsage","waitForProcessing","scope","callback","interval","setInterval","processing","clearInterval","initializeBodyHeightMock","angular","querySelector","length","body","append","simulateLoadOnBodyHeight","page","css","simulateScrollToPage","scrollSize","scrollY","deltaY","initializeScope","nextPage","jasmine","createSpy","and","callFake","totalItems","itemsPerPage","initializeElement","$digest","module","beforeEach","mock","inject","_$compile_","_$rootScope_","_$window_","_$document_","$new","innerHeight","spyOn","evt","it","done","isolatedScope","isolateScope","expect","toHaveBeenCalled","calls","count","toEqual","argsForCall","push","afterEach","$destroy"],"mappings":"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","file":"maDatagridInfinitePaginationSpec.js","sourcesContent":["/*global angular,inject,describe,it,jasmine,expect,beforeEach,module*/\nconst directive = require('../../../../ng-admin/Crud/list/maDatagridInfinitePagination');\n\ndescribe('directive: ma-datagrid-infinite-pagination', function () {\n    let $compile;\n    let $scope;\n    let $window;\n    let $document;\n    let element;\n    let bodyHeightMock;\n    let handler;\n    let pageSize = 2000;\n    let directiveUsage = `<ma-datagrid-infinite-pagination\n        next-page=\"nextPage\"\n        total-items=\"{{ totalItems }}\"\n        per-page=\"{{ itemsPerPage }}\"\n    ></ma-datagrid-infinite-pagination>`;\n\n    function waitForProcessing(scope, callback) {\n        const interval = setInterval(() => {\n            if (!scope.processing) {\n                clearInterval(interval);\n                callback(null, true);\n            }\n        }, 100);\n    }\n\n    function initializeBodyHeightMock() {\n        if(!angular.element($document[0].querySelector('#mock')).length) {\n            bodyHeightMock = angular.element(`<div id=\"mock\" style=\"height:${pageSize}px\"></div>`)[0];\n            angular.element($document[0].body).append(bodyHeightMock);\n        } else {\n            simulateLoadOnBodyHeight(1);\n        }\n    }\n\n    function simulateLoadOnBodyHeight(page) {\n        angular.element($document[0].querySelector('#mock')).css('height',(pageSize*page) + 'px');\n    }\n\n    function simulateScrollToPage(page, scope, callback) {\n        const scrollSize = pageSize * (page - 1) + 1500;\n        $window.scrollY = scrollSize;\n        handler({ deltaY: scrollSize });\n\n        if (scope && callback) {\n            waitForProcessing(scope, callback);\n        }\n    }\n\n    function initializeScope(scope) {\n        scope.nextPage = jasmine.createSpy('nextPage').and.callFake(() => (page) => {\n            simulateLoadOnBodyHeight(page);\n        });\n        scope.totalItems = 100;\n        scope.itemsPerPage = 10;\n    }\n\n    function initializeElement() {\n        initializeScope($scope);\n        element = $compile(directiveUsage)($scope);\n        $scope.$digest();\n    }\n\n    angular.module('testapp_DatagridInfinitePagination', [])\n        .directive('maDatagridInfinitePagination', directive);\n\n    beforeEach(angular.mock.module('testapp_DatagridInfinitePagination'));\n\n    beforeEach(inject(function (_$compile_, _$rootScope_, _$window_, _$document_) {\n        $compile = _$compile_;\n        $scope = _$rootScope_.$new();\n        $window = _$window_;\n        $window.innerHeight = 759;\n        spyOn($window, 'addEventListener').and.callFake((evt, callback) => {\n            handler = callback;\n        });\n        $document = _$document_;\n        initializeBodyHeightMock();\n        initializeElement();\n    }));\n\n    it('should trigger next-page when scrolling', function (done) {\n        const isolatedScope = element.isolateScope();\n        initializeScope(isolatedScope);\n\n        waitForProcessing(isolatedScope, () => {\n            simulateScrollToPage(2, isolatedScope, () => {\n                expect(isolatedScope.nextPage).toHaveBeenCalled();\n                done();\n            });\n        });\n    });\n\n    it('should trigger next-page twice when scrolling twice', function(done) {\n        const isolatedScope = element.isolateScope();\n        initializeScope(isolatedScope);\n\n        waitForProcessing(isolatedScope, () => {\n            simulateScrollToPage(2, isolatedScope, () => {\n                simulateScrollToPage(3, isolatedScope, () => {\n                    expect(isolatedScope.nextPage.calls.count()).toEqual(3);\n                    done();\n                });\n            });\n        });\n    });\n\n    it('should trigger next-page with right page number', function(done) {\n        const isolatedScope = element.isolateScope();\n        initializeScope(isolatedScope);\n\n        const argsForCall = [];\n\n        isolatedScope.nextPage = jasmine.createSpy('nextPage').and.callFake(() => (page) => {\n            simulateLoadOnBodyHeight(page);\n            argsForCall.push(page);\n        });\n\n        waitForProcessing(isolatedScope, () => {\n            simulateScrollToPage(2, isolatedScope, () => {\n                simulateScrollToPage(3, isolatedScope, () => {\n                    expect(argsForCall[0]).toEqual(2);\n                    expect(argsForCall[1]).toEqual(3);\n                    done();\n                });\n            });\n        });\n    });\n\n    it('should not trigger next-page when scrolling up', function(done) {\n        const isolatedScope = element.isolateScope();\n        initializeScope(isolatedScope);\n\n        waitForProcessing(isolatedScope, () => {\n            simulateScrollToPage(2, isolatedScope, () => {\n                simulateScrollToPage(3, isolatedScope, () => {\n                    simulateScrollToPage(2, isolatedScope, () => {\n                        expect(isolatedScope.nextPage.calls.count()).toEqual(3);\n                        done();\n                    });\n                });\n            });\n        });\n    });\n\n    afterEach(function() {\n        $scope.$destroy();\n    });\n});\n"]}
{"version":3,"sources":["../../../../../../src/javascripts/test/unit/Crud/list/maDatagridInfinitePaginationSpec.js"],"names":["directive","require","describe","$compile","$scope","$window","$document","element","bodyHeightMock","handler","pageSize","directiveUsage","waitForProcessing","scope","callback","interval","setInterval","processing","clearInterval","removeBodyHeightMock","angular","querySelector","remove","addBodyHeightMock","body","append","initializeBodyHeightMock","simulateLoadOnBodyHeight","page","css","simulateScrollToPage","scrollSize","scrollY","deltaY","initializeScope","nextPage","jasmine","createSpy","and","callFake","totalItems","itemsPerPage","initializeElement","$digest","module","beforeEach","mock","inject","_$compile_","_$rootScope_","_$window_","_$document_","$new","innerHeight","spyOn","evt","func","it","done","isolatedScope","isolateScope","expect","toHaveBeenCalled","calls","count","toEqual","argsForCall","push","afterEach","$destroy"],"mappings":"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","file":"maDatagridInfinitePaginationSpec.js","sourcesContent":["import lodash from 'lodash';\n\n/*global angular,inject,describe,it,jasmine,expect,beforeEach,module*/\nconst directive = require('../../../../ng-admin/Crud/list/maDatagridInfinitePagination');\n\ndescribe('directive: ma-datagrid-infinite-pagination', function () {\n    let $compile;\n    let $scope;\n    let $window;\n    let $document;\n    let element;\n    let bodyHeightMock;\n    let handler;\n    let pageSize = 2000;\n    let directiveUsage = `<ma-datagrid-infinite-pagination\n        next-page=\"nextPage\"\n        total-items=\"{{ totalItems }}\"\n        per-page=\"{{ itemsPerPage }}\"\n    ></ma-datagrid-infinite-pagination>`;\n\n    function waitForProcessing(scope, callback) {\n        const interval = setInterval(() => {\n            if (!scope.processing) {\n                clearInterval(interval);\n                callback(null, true);\n            }\n        }, 100);\n    }\n\n    function removeBodyHeightMock(){\n        angular.element($document[0].querySelector('#mock')).remove();\n    }\n\n    function addBodyHeightMock(){\n        bodyHeightMock = angular.element(`<div id=\"mock\" style=\"height:${pageSize}px\"></div>`)[0];\n        angular.element($document[0].body).append(bodyHeightMock);\n    }\n\n    function initializeBodyHeightMock() {\n        removeBodyHeightMock();\n        addBodyHeightMock();\n        simulateLoadOnBodyHeight(1);\n    }\n\n    function simulateLoadOnBodyHeight(page) {\n        angular.element($document[0].querySelector('#mock')).css('height',(pageSize*page) + 'px');\n    }\n\n    function simulateScrollToPage(page, scope, callback) {\n        const scrollSize = pageSize * (page - 1) + 1500;\n        $window.scrollY = scrollSize;\n        handler({ deltaY: scrollSize });\n        callback();\n    }\n\n    function initializeScope(scope) {\n        scope.nextPage = jasmine.createSpy('nextPage').and.callFake(() => (page) => {\n            simulateLoadOnBodyHeight(page);\n        });\n        scope.totalItems = 100;\n        scope.itemsPerPage = 10;\n    }\n\n    function initializeElement() {\n        initializeScope($scope);\n        element = $compile(directiveUsage)($scope);\n        $scope.$digest();\n    }\n\n    angular.module('testapp_DatagridInfinitePagination', [])\n        .directive('maDatagridInfinitePagination', directive);\n\n    beforeEach(angular.mock.module('testapp_DatagridInfinitePagination'));\n\n    beforeEach(inject(function (_$compile_, _$rootScope_, _$window_, _$document_) {\n        $compile = _$compile_;\n        $scope = _$rootScope_.$new();\n        $window = _$window_;\n        $window.innerHeight = 759;\n        spyOn($window, 'addEventListener').and.callFake((evt, callback) => {\n            handler = callback;\n        });\n        spyOn(lodash, 'debounce').and.callFake(func => func);\n        $document = _$document_;\n        initializeBodyHeightMock();\n        initializeElement();\n    }));\n\n    it('should trigger next-page when scrolling', function (done) {\n        const isolatedScope = element.isolateScope();\n        initializeScope(isolatedScope);\n\n        waitForProcessing(isolatedScope, () => {\n            simulateScrollToPage(2, isolatedScope, () => {\n                waitForProcessing(isolatedScope, () => {\n                    expect(isolatedScope.nextPage).toHaveBeenCalled();\n                    done();\n                });\n            });\n        });\n    });\n\n    it('should trigger next-page twice when scrolling twice', function(done) {\n        const isolatedScope = element.isolateScope();\n        initializeScope(isolatedScope);\n\n        waitForProcessing(isolatedScope, () => {\n            simulateScrollToPage(2, isolatedScope, () => {\n                simulateScrollToPage(3, isolatedScope, () => {\n                    expect(isolatedScope.nextPage.calls.count()).toEqual(2);\n                    done();\n                });\n            });\n        });\n    });\n\n    it('should trigger next-page with right page number', function(done) {\n        const isolatedScope = element.isolateScope();\n        initializeScope(isolatedScope);\n\n        const argsForCall = [];\n\n        isolatedScope.nextPage = jasmine.createSpy('nextPage').and.callFake(() => (page) => {\n            simulateLoadOnBodyHeight(page);\n            argsForCall.push(page);\n        });\n\n        waitForProcessing(isolatedScope, () => {\n            simulateScrollToPage(2, isolatedScope, () => {\n                simulateScrollToPage(3, isolatedScope, () => {\n                    expect(argsForCall[0]).toEqual(2);\n                    expect(argsForCall[1]).toEqual(3);\n                    done();\n                });\n            });\n        });\n    });\n\n    it('should not trigger next-page when scrolling up', function(done) {\n        const isolatedScope = element.isolateScope();\n        initializeScope(isolatedScope);\n\n        waitForProcessing(isolatedScope, () => {\n            simulateScrollToPage(2, isolatedScope, () => {\n                simulateScrollToPage(3, isolatedScope, () => {\n                    simulateScrollToPage(2, isolatedScope, () => {\n                        expect(isolatedScope.nextPage.calls.count()).toEqual(2);\n                        done();\n                    });\n                });\n            });\n        });\n    });\n\n    afterEach(function() {\n        $scope.$destroy();\n    });\n});\n"]}
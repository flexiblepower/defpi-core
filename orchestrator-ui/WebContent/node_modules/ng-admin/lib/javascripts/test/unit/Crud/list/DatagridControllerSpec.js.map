{"version":3,"sources":["../../../../../../src/javascripts/test/unit/Crud/list/DatagridControllerSpec.js"],"names":["describe","DataGridController","require","Entity","Entry","dataGridController","entries","beforeEach","value","listActions","entity","selection","datastore","sort","sortDir","sortField","search","$observe","it","toggleSelect","expect","$scope","toEqual","toggleSelectAll"],"mappings":";;AAAA;AACAA,SAAS,yBAAT,EAAoC,YAAY;AAC5C,QAAIC,qBAAqBC,QAAQ,qDAAR,CAAzB;AAAA,QACIC,SAASD,QAAQ,gCAAR,CADb;AAAA,QAEIE,QAAQF,QAAQ,wBAAR,CAFZ;;AAIA,QAAIG,kBAAJ,EAAwBC,OAAxB;;AAEAC,eAAW,YAAY;AACnBD,kBAAU,CACN,IAAIF,KAAJ,CAAU,WAAV,EAAuB,EAACI,OAAO,CAAR,EAAvB,EAAmC,CAAnC,CADM,EAEN,IAAIJ,KAAJ,CAAU,WAAV,EAAuB,EAACI,OAAO,CAAR,EAAvB,EAAmC,CAAnC,CAFM,EAGN,IAAIJ,KAAJ,CAAU,WAAV,EAAuB,EAACI,OAAO,CAAR,EAAvB,EAAmC,CAAnC,CAHM,CAAV;;AAMAH,6BAAqB,IAAIJ,kBAAJ,CAAuB;AACxCQ,yBAAa;AAAA,uBAAM,EAAN;AAAA,aAD2B;AAExCC,oBAAQ;AAAA,uBAAM,IAAIP,MAAJ,CAAW,WAAX,CAAN;AAAA,aAFgC;AAGxCG,qBAASA,OAH+B;AAIxCK,uBAAW,EAJ6B;AAKxCC,uBAAW,qBAAM;AAAE,uBAAO,EAAP;AAAY,aALS;AAMxCC,kBAAM;AAAA,uBAAM,IAAN;AAAA,aANkC;AAOxCC,qBAAS;AAAA,uBAAM,IAAN;AAAA,aAP+B;AAQxCC,uBAAW;AAAA,uBAAM,IAAN;AAAA;AAR6B,SAAvB,EASlB;AACCC,oBAAQ,kBAAM;AACV,uBAAO,EAAP;AACH;AAHF,SATkB,EAalB,EAbkB,EAad,EAbc,EAaV,EAAEC,UAAU;AAAA,uBAAM,IAAN;AAAA,aAAZ,EAbU,CAArB;AAcH,KArBD;;AAuBAjB,aAAS,cAAT,EAAyB,YAAY;;AAEjCkB,WAAG,mDAAH,EAAwD,YAAY;AAChEb,+BAAmBc,YAAnB,CAAgCb,QAAQ,CAAR,CAAhC;AACAc,mBAAOf,mBAAmBgB,MAAnB,CAA0BV,SAAjC,EAA4CW,OAA5C,CAAoD,CAAChB,QAAQ,CAAR,CAAD,CAApD;AACH,SAHD;;AAKAY,WAAG,oDAAH,EAAyD,YAAY;AACjEb,+BAAmBgB,MAAnB,CAA0BV,SAA1B,GAAsCL,OAAtC;AACAD,+BAAmBc,YAAnB,CAAgCb,QAAQ,CAAR,CAAhC;AACAc,mBAAOf,mBAAmBgB,MAAnB,CAA0BV,SAAjC,EAA4CW,OAA5C,CAAoD,CAAChB,QAAQ,CAAR,CAAD,EAAaA,QAAQ,CAAR,CAAb,CAApD;AACH,SAJD;AAMH,KAbD;;AAeAN,aAAS,iBAAT,EAA4B,YAAY;AACpCkB,WAAG,uCAAH,EAA4C,YAAY;AACpDb,+BAAmBgB,MAAnB,CAA0BV,SAA1B,GAAsCL,OAAtC;AACAD,+BAAmBkB,eAAnB;AACAH,mBAAOf,mBAAmBgB,MAAnB,CAA0BV,SAAjC,EAA4CW,OAA5C,CAAoD,EAApD;AACH,SAJD;;AAMAJ,WAAG,+CAAH,EAAoD,YAAY;AAC5Db,+BAAmBgB,MAAnB,CAA0BV,SAA1B,GAAsC,CAACL,OAAD,CAAtC;AACAD,+BAAmBkB,eAAnB;AACAH,mBAAOf,mBAAmBgB,MAAnB,CAA0BV,SAAjC,EAA4CW,OAA5C,CAAoDhB,OAApD;AACH,SAJD;;AAMAY,WAAG,uDAAH,EAA4D,YAAY;AACpEb,+BAAmBgB,MAAnB,CAA0BV,SAA1B,GAAsC,CAACL,QAAQ,CAAR,CAAD,CAAtC;AACAD,+BAAmBkB,eAAnB;AACAH,mBAAOf,mBAAmBgB,MAAnB,CAA0BV,SAAjC,EAA4CW,OAA5C,CAAoDhB,OAApD;AACH,SAJD;AAKH,KAlBD;AAmBH,CAhED","file":"DatagridControllerSpec.js","sourcesContent":["/*global describe,it,expect,beforeEach*/\ndescribe('controller: ma-datagrid', function () {\n    var DataGridController = require('../../../../ng-admin/Crud/list/maDatagridController'),\n        Entity = require('admin-config/lib/Entity/Entity'),\n        Entry = require('admin-config/lib/Entry');\n\n    var dataGridController, entries;\n\n    beforeEach(function () {\n        entries = [\n            new Entry('my_entity', {value: 1}, 1),\n            new Entry('my_entity', {value: 2}, 2),\n            new Entry('my_entity', {value: 3}, 3)\n        ];\n\n        dataGridController = new DataGridController({\n            listActions: () => [],\n            entity: () => new Entity('my_entity'),\n            entries: entries,\n            selection: [],\n            datastore: () => { return {}; },\n            sort: () => null,\n            sortDir: () => null,\n            sortField: () => null,\n        }, {\n            search: () => {\n                return {};\n            }\n        }, {}, {}, { $observe: () => null });\n    });\n\n    describe('toggleSelect', function () {\n\n        it('should add entry in selection if it was not in it', function () {\n            dataGridController.toggleSelect(entries[0]);\n            expect(dataGridController.$scope.selection).toEqual([entries[0]]);\n        });\n\n        it('should remove entry from selection if it was in it', function () {\n            dataGridController.$scope.selection = entries;\n            dataGridController.toggleSelect(entries[0]);\n            expect(dataGridController.$scope.selection).toEqual([entries[1], entries[2]]);\n        });\n\n    });\n\n    describe('toggleSelectAll', function () {\n        it('should empty selection if it was full', function () {\n            dataGridController.$scope.selection = entries;\n            dataGridController.toggleSelectAll();\n            expect(dataGridController.$scope.selection).toEqual([]);\n        });\n\n        it('should add all entries if selection was empty', function () {\n            dataGridController.$scope.selection = [entries];\n            dataGridController.toggleSelectAll();\n            expect(dataGridController.$scope.selection).toEqual(entries);\n        });\n\n        it('should select all entries if selection was incomplete', function () {\n            dataGridController.$scope.selection = [entries[0]];\n            dataGridController.toggleSelectAll();\n            expect(dataGridController.$scope.selection).toEqual(entries);\n        });\n    });\n});\n"]}
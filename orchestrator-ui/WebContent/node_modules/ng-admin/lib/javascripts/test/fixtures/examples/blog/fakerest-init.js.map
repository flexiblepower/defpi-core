{"version":3,"sources":["../../../../../../src/javascripts/test/fixtures/examples/blog/fakerest-init.js"],"names":["restServer","FakeRest","Server","testEnv","window","location","pathname","indexOf","init","apiData","setDefaultQuery","resourceName","embed","toggleLogging","sinon","FakeXMLHttpRequest","useFilters","addFilter","method","url","server","fakeServer","create","autoRespond","autoRespondAfter","respondWith","getHandler","response","respond","JSON","stringify","apifilename"],"mappings":";;AAAC,aAAY;AACT;;AAEA;;AACA,QAAIA,aAAa,IAAIC,SAASC,MAAb,CAAoB,uBAApB,CAAjB;AACA,QAAIC,UAAUC,OAAOC,QAAP,CAAgBC,QAAhB,CAAyBC,OAAzB,CAAiC,WAAjC,MAAkD,CAAC,CAAjE;AACAP,eAAWQ,IAAX,CAAgBC,OAAhB;AACAT,eAAWU,eAAX,CAA2B,UAASC,YAAT,EAAuB;AAC9C,YAAIA,gBAAgB,OAApB,EAA6B,OAAO,EAAEC,OAAO,CAAC,UAAD,CAAT,EAAP;AAC7B,eAAO,EAAP;AACH,KAHD;AAIAZ,eAAWa,aAAX,GAXS,CAWmB;;AAE5B;AACAC,UAAMC,kBAAN,CAAyBC,UAAzB,GAAsC,IAAtC;AACAF,UAAMC,kBAAN,CAAyBE,SAAzB,CAAmC,UAAUC,MAAV,EAAkBC,GAAlB,EAAuB;AACtD;AACA,eAAOA,IAAIZ,OAAJ,CAAY,eAAZ,MAAiC,CAAC,CAAlC,IAAuCY,IAAIZ,OAAJ,CAAY,WAAZ,MAA6B,CAAC,CAArE,IACC,CAACJ,OAAD,IAAYgB,IAAIZ,OAAJ,CAAY,SAAZ,MAA2B,CAAC,CADhD;AAEH,KAJD;;AAMA,QAAIa,SAASN,MAAMO,UAAN,CAAiBC,MAAjB,EAAb;AACAF,WAAOG,WAAP,GAAqB,IAArB;AACAH,WAAOI,gBAAP,GAA0B,CAA1B,CAvBS,CAuBoB;;AAE7BJ,WAAOK,WAAP,CAAmBzB,WAAW0B,UAAX,EAAnB;;AAEA,QAAIvB,OAAJ,EAAa;AACTiB,eAAOK,WAAP,CAAmB,UAAUE,QAAV,EAAoB;AACnC,gBAAIA,SAASR,GAAT,CAAaZ,OAAb,CAAqB,SAArB,MAAoC,CAAC,CAAzC,EAA4C;AACxCoB,yBAASC,OAAT,CAAiBC,KAAKC,SAAL,CAAe,EAACC,aAAa,YAAd,EAAf,CAAjB;AACH;AACJ,SAJD;AAKH;AACJ,CAlCA,GAAD","file":"fakerest-init.js","sourcesContent":["(function () {\n    'use strict';\n\n    // setup fake server\n    var restServer = new FakeRest.Server('http://localhost:3000');\n    var testEnv = window.location.pathname.indexOf('test.html') !== -1;\n    restServer.init(apiData);\n    restServer.setDefaultQuery(function(resourceName) {\n        if (resourceName == 'posts') return { embed: ['comments'] }\n        return {};\n    });\n    restServer.toggleLogging(); // logging is off by default, enable it\n\n    // use sinon.js to monkey-patch XmlHttpRequest\n    sinon.FakeXMLHttpRequest.useFilters = true;\n    sinon.FakeXMLHttpRequest.addFilter(function (method, url) {\n        // Do not catch webpack sync, config.js transformation but catch /upload in test env\n        return url.indexOf('/sockjs-node/') !== -1 || url.indexOf('config.js') !== -1\n            || (!testEnv && url.indexOf('/upload') !== -1);\n    });\n\n    var server = sinon.fakeServer.create();\n    server.autoRespond = true;\n    server.autoRespondAfter = 0; // answer immediately\n\n    server.respondWith(restServer.getHandler());\n\n    if (testEnv) {\n        server.respondWith(function (response) {\n            if (response.url.indexOf('/upload') !== -1) {\n                response.respond(JSON.stringify({apifilename: 'my-cat.jpg'}));\n            }\n        });\n    }\n}());\n"]}
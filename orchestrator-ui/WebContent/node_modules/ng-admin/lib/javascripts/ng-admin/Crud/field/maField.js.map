{"version":3,"sources":["../../../../../src/javascripts/ng-admin/Crud/field/maField.js"],"names":["maField","FieldViewConfiguration","$compile","restrict","scope","field","entry","value","entity","form","datastore","link","element","type","getCssClasses","name","replace","getInput","fieldHasValidation","input","$dirty","fieldIsValid","$valid","getFieldValidationClass","fieldTemplate","editable","templateIncludesLabel","getTemplateValue","getWriteWidget","template","append","contents","$inject"],"mappings":";;;;;kBAAwBA,O;AAAT,SAASA,OAAT,CAAiBC,sBAAjB,EAAyCC,QAAzC,EAAmD;AAC9D,WAAO;AACHC,kBAAU,GADP;AAEHC,eAAO;AACHC,mBAAO,GADJ;AAEHC,mBAAO,GAFJ;AAGHC,mBAAO,GAHJ;AAIHC,oBAAQ,GAJL;AAKHC,kBAAM,GALH;AAMHC,uBAAW;AANR,SAFJ;AAUHC,cAAM,cAASP,KAAT,EAAgBQ,OAAhB,EAAyB;AAC3B,gBAAMP,QAAQD,MAAMC,KAAN,EAAd;AACA,gBAAMQ,OAAOR,MAAMQ,IAAN,EAAb;AACAT,kBAAMC,KAAN,GAAcA,KAAd;AACAD,kBAAMS,IAAN,GAAaA,IAAb;AACAT,kBAAMI,MAAN,GAAeJ,MAAMI,MAAN,EAAf;AACAJ,kBAAMK,IAAN,GAAaL,MAAMK,IAAN,EAAb;AACAL,kBAAMM,SAAN,GAAkBN,MAAMM,SAAN,EAAlB;AACAN,kBAAMU,aAAN,GAAsB,UAASR,KAAT,EAAgB;AAClC,uBAAO,oBAAoBD,MAAMU,IAAN,GAAaC,OAAb,CAAqB,GAArB,EAA0B,GAA1B,CAApB,GAAqD,iBAArD,GAAyEH,IAAzE,GAAgF,GAAhF,IAAuFR,MAAMS,aAAN,CAAoBR,KAApB,KAA8B,6BAArH,CAAP;AACH,aAFD;;AAIAF,kBAAMa,QAAN,GAAiB,YAAW;AACxB,uBAAOb,MAAMK,IAAN,CAAWJ,MAAMU,IAAN,EAAX,CAAP;AACH,aAFD;;AAIA;;;;;;;AAOAX,kBAAMc,kBAAN,GAA2B,YAAW;AAClC,oBAAIC,QAAQ,KAAKF,QAAL,EAAZ;AACA,uBAAOE,SAASA,MAAMC,MAAtB;AACH,aAHD;;AAKAhB,kBAAMiB,YAAN,GAAqB,YAAW;AAC5B,oBAAIF,QAAQ,KAAKF,QAAL,EAAZ;AACA,uBAAOE,SAASA,MAAMG,MAAtB;AACH,aAHD;;AAKAlB,kBAAMmB,uBAAN,GAAgC,YAAW;AACvC,oBAAI,KAAKL,kBAAL,EAAJ,EAA+B;AAC3B,2BAAO,KAAKG,YAAL,KAAsB,aAAtB,GAAsC,WAA7C;AACH;AACJ,aAJD;;AAMA,gBAAIG,aAAJ;AACA,gBAAIpB,MAAMC,KAAN,CAAYoB,QAAZ,EAAJ,EAA4B;AACxBD,iFAET,CAACnB,MAAMqB,qBAAN,EAAD,IAAkCrB,MAAMsB,gBAAN,CAAuBvB,MAAME,KAA7B,CAAnC,IAA2EL,uBAAuBY,IAAvB,EAA6Be,cAA7B,EAFjE;AAKH,aAND,MAMO;AACHJ;AAMH;;AAED,gBAAMK,iUAKZL,aALY,aAAN;;AAQAZ,oBAAQkB,MAAR,CAAeD,QAAf;AACA3B,qBAASU,QAAQmB,QAAR,EAAT,EAA6B3B,KAA7B;AACH;AA3EE,KAAP;AA6EH;;AAEDJ,QAAQgC,OAAR,GAAkB,CAAC,wBAAD,EAA2B,UAA3B,CAAlB","file":"maField.js","sourcesContent":["export default function maField(FieldViewConfiguration, $compile) {\n    return {\n        restrict: 'E',\n        scope: {\n            field: '&',\n            entry: '=',\n            value: '=',\n            entity: '&',\n            form: '&',\n            datastore: '&'\n        },\n        link: function(scope, element) {\n            const field = scope.field();\n            const type = field.type();\n            scope.field = field;\n            scope.type = type;\n            scope.entity = scope.entity();\n            scope.form = scope.form();\n            scope.datastore = scope.datastore();\n            scope.getCssClasses = function(entry) {\n                return 'ng-admin-field-' + field.name().replace('.', '_') + ' ng-admin-type-' + type + ' ' + (field.getCssClasses(entry) || 'col-sm-10 col-md-8 col-lg-7');\n            };\n\n            scope.getInput = function() {\n                return scope.form[field.name()];\n            };\n\n            /**\n             * Should validation status be displayed for a given field?\n             *\n             * - No for non-editable fields, or template fields which not have a corresponding input\n             * - No for non-altered input\n             * - Yes otherwise\n             */\n            scope.fieldHasValidation = function() {\n                var input = this.getInput();\n                return input && input.$dirty;\n            };\n\n            scope.fieldIsValid = function() {\n                var input = this.getInput();\n                return input && input.$valid;\n            };\n\n            scope.getFieldValidationClass = function() {\n                if (this.fieldHasValidation()) {\n                    return this.fieldIsValid() ? 'has-success' : 'has-error';\n                }\n            };\n\n            var fieldTemplate;\n            if (scope.field.editable()) {\n                fieldTemplate =\n`<div ng-class=\"getCssClasses(entry)\">\n    ${(!field.templateIncludesLabel() && field.getTemplateValue(scope.entry)) || FieldViewConfiguration[type].getWriteWidget()}\n    <span ng-show=\"fieldHasValidation()\" class=\"glyphicon form-control-feedback\" ng-class=\"fieldIsValid() ? 'glyphicon-ok' : 'glyphicon-remove'\"></span>\n</div>`;\n            } else {\n                fieldTemplate =\n`<div ng-class=\"field.getCssClasses(entry)||'col-sm-10'\">\n    <p class=\"form-control-static\">\n        <ma-column field=\"::field\" entry=\"::entry\" entity=\"::entity\" datastore=\"::datastore\"></ma-column>\n    </p>\n</div>`;\n            }\n\n            const template =\n`<div id=\"row-{{ field.name() }}\" class=\"form-field form-group has-feedback\" ng-class=\"getFieldValidationClass()\">\n    <label for=\"{{ field.name() }}\" class=\"col-sm-2 control-label\">\n        {{ field.label() | translate }}<span ng-if=\"field.validation().required\">&nbsp;*</span>&nbsp;\n    </label>\n    ${fieldTemplate}\n</div>`;\n\n            element.append(template);\n            $compile(element.contents())(scope);\n        }\n    };\n}\n\nmaField.$inject = ['FieldViewConfiguration', '$compile'];\n"]}
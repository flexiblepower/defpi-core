{"version":3,"sources":["../../../../src/javascripts/ng-admin/Crud/routing.js"],"names":["templateProvider","viewName","defaultView","$stateParams","Configuration","customTemplate","view","getViewByEntityAndType","entity","template","viewProvider","e","error404","Error","status","enabled","routing","$stateProvider","state","abstract","url","params","parent","controller","controllerAs","resolve","dataStore","filterData","ReadQueries","getAllReferencedData","getFilterReferences","filterEntries","filters","name","createArrayFromRest","targetField","targetEntity","identifier","map","addEntry","uniqueId","entry","page","value","squash","search","sortField","sortDir","views","grid","response","getAll","totalItems","referenceData","getReferenceData","fields","data","referenceEntries","references","getReferences","entries","mapEntries","fillReferencesValuesFromCollection","setEntries","getEntity","prepare","$window","$injector","invoke","query","datastore","Entry","window","id","rawEntry","getOne","type","getUrl","mapEntry","values","referencedListData","getReferencedListData","getReferencedLists","identifierValue","referencedListEntries","referencedLists","targetFields","entryWithReferences","fillReferencesValuesFromEntry","referenceDataForReferencedLists","$q","promises","Object","keys","all","referenceEntriesForReferencedLists","referencedListName","defaultValues","previousState","$state","current","length","createForFields","getFields","forEach","key","choiceData","choiceEntries","choices","ids","$inject"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAASA,gBAAT,CAA0BC,QAA1B,EAAoCC,WAApC,EAAiD;AAC7C,WAAO,CAAC,cAAD,EAAiB,sBAAjB,EAAyC,UAAUC,YAAV,EAAwBC,aAAxB,EAAuC;AACnF,YAAIC,cAAJ;AACA,YAAIC,OAAOF,gBAAgBG,sBAAhB,CAAuCJ,aAAaK,MAApD,EAA4DP,QAA5D,CAAX;AACAI,yBAAiBC,KAAKG,QAAL,EAAjB;AACA,YAAIJ,cAAJ,EAAoB;AAChB,mBAAOA,cAAP;AACH;AACDA,yBAAiBD,gBAAgBC,cAAhB,GAAiCJ,QAAjC,CAAjB;AACA,YAAII,cAAJ,EAAoB;AAChB,mBAAOA,cAAP;AACH;AACD,eAAOH,WAAP;AACH,KAZM,CAAP;AAaH;;AAED,SAASQ,YAAT,CAAsBT,QAAtB,EAAgC;AAC5B,WAAO,CAAC,cAAD,EAAiB,sBAAjB,EAAyC,UAAUE,YAAV,EAAwBC,aAAxB,EAAuC;AACnF,YAAIE,IAAJ;AACA,YAAI;AACAA,mBAAOF,gBAAgBG,sBAAhB,CAAuCJ,aAAaK,MAApD,EAA4DP,QAA5D,CAAP;AACH,SAFD,CAEE,OAAOU,CAAP,EAAU;AACR,gBAAIC,WAAW,IAAIC,KAAJ,CAAU,6BAAV,CAAf;AACAD,qBAASE,MAAT,GAAkB,GAAlB,CAFQ,CAEe;AACvB,kBAAMF,QAAN;AACH;AACD,YAAI,CAACN,KAAKS,OAAV,EAAmB;AACf,kBAAM,IAAIF,KAAJ,CAAU,SAASZ,QAAT,GAAoB,8BAA9B,CAAN;AACH;AACD,eAAOK,IAAP;AACH,KAbM,CAAP;AAcH;;AAED,SAASU,OAAT,CAAiBC,cAAjB,EAAiC;;AAE7BA,mBACKC,KADL,CACW,YADX,EACyB;AACjBC,kBAAU,IADO;AAEjBC,aAAK,eAFY;AAGjBC,gBAAQ;AACJb,oBAAQ;AADJ,SAHS;AAMjBc,gBAAQ,UANS;AAOjBC,oBAAY,sBAPK;AAQjBC,sBAAc,QARG;AASjBxB,0BAAkBA,iBAAiB,UAAjB,uBATD;AAUjByB,iBAAS;AACLC,uBAAW;AAAA,uBAAM,yBAAN;AAAA,aADN;AAELpB,kBAAMI,aAAa,UAAb,CAFD;AAGLiB,wBAAY,CAAC,aAAD,EAAgB,MAAhB,EAAwB,UAAUC,WAAV,EAAuBtB,IAAvB,EAA6B;AAC7D,uBAAOsB,YAAYC,oBAAZ,CAAiCvB,KAAKwB,mBAAL,CAAyB,KAAzB,CAAjC,CAAP;AACH,aAFW,CAHP;AAMLC,2BAAe,CAAC,WAAD,EAAc,MAAd,EAAsB,YAAtB,EAAoC,UAAUL,SAAV,EAAqBpB,IAArB,EAA2BqB,UAA3B,EAAuC;AACtF,oBAAMK,UAAU1B,KAAKwB,mBAAL,CAAyB,KAAzB,CAAhB;AACA,qBAAK,IAAIG,IAAT,IAAiBN,UAAjB,EAA6B;AACzB,oCAAMO,mBAAN,CACIP,WAAWM,IAAX,CADJ,EAEI,CAACD,QAAQC,IAAR,EAAcE,WAAd,EAAD,CAFJ,EAGIH,QAAQC,IAAR,EAAcG,YAAd,GAA6BH,IAA7B,EAHJ,EAIID,QAAQC,IAAR,EAAcG,YAAd,GAA6BC,UAA7B,GAA0CJ,IAA1C,EAJJ,EAKEK,GALF,CAKM;AAAA,+BAASZ,UAAUa,QAAV,CAAmBP,QAAQC,IAAR,EAAcG,YAAd,GAA6BI,QAA7B,GAAwC,UAA3D,EAAuEC,KAAvE,CAAT;AAAA,qBALN;AAMH;AACJ,aAVc;AANV;AAVQ,KADzB,EA8BKvB,KA9BL,CA8BW,MA9BX,EA8BmB;AACXE,aAAK,6CADM;AAEXC,gBAAQ;AACJqB,kBAAM,EAAEC,OAAO,CAAT,EAAYC,QAAQ,IAApB,EADF;AAEJC,oBAAQ,EAAEF,OAAO,EAAT,EAAaC,QAAQ,IAArB,EAFJ;AAGJE,uBAAW,IAHP;AAIJC,qBAAS;AAJL,SAFG;AAQXzB,gBAAQ,YARG;AASX0B,eAAO;AACHC,kBAAM;AACF1B,4BAAY,gBADV;AAEFC,8BAAc,gBAFZ;AAGFf,wCAHE;AAIFgB,yBAAS;AACLC,+BAAW;AAAA,+BAAM,yBAAN;AAAA,qBADN;AAELpB,0BAAMI,aAAa,UAAb,CAFD;AAGLwC,8BAAU,CAAC,cAAD,EAAiB,aAAjB,EAAgC,MAAhC,EAAwC,UAAU/C,YAAV,EAAwByB,WAAxB,EAAqCtB,IAArC,EAA2C;AACzF,4BAAIoC,OAAOvC,aAAauC,IAAxB;AAAA,4BACIV,UAAU7B,aAAa0C,MAD3B;AAAA,4BAEIC,YAAY3C,aAAa2C,SAF7B;AAAA,4BAGIC,UAAU5C,aAAa4C,OAH3B;;AAKA,+BAAOnB,YAAYuB,MAAZ,CAAmB7C,IAAnB,EAAyBoC,IAAzB,EAA+BV,OAA/B,EAAwCc,SAAxC,EAAmDC,OAAnD,CAAP;AACH,qBAPS,CAHL;AAWLK,gCAAY,CAAC,UAAD,EAAa,UAAUF,QAAV,EAAoB;AACzC,+BAAOA,SAASE,UAAhB;AACH,qBAFW,CAXP;AAcLC,mCAAe,CAAC,aAAD,EAAgB,MAAhB,EAAwB,UAAxB,EAAoC,UAAUzB,WAAV,EAAuBtB,IAAvB,EAA6B4C,QAA7B,EAAuC;AACtF,+BAAOtB,YAAY0B,gBAAZ,CAA6BhD,KAAKiD,MAAL,EAA7B,EAA4CL,SAASM,IAArD,CAAP;AACH,qBAFc,CAdV;AAiBLC,sCAAkB,CAAC,WAAD,EAAc,MAAd,EAAsB,eAAtB,EAAuC,UAAU/B,SAAV,EAAqBpB,IAArB,EAA2B+C,aAA3B,EAA0C;AAC/F,4BAAMK,aAAapD,KAAKqD,aAAL,EAAnB;AACA,6BAAK,IAAI1B,IAAT,IAAiBoB,aAAjB,EAAgC;AAC5B,4CAAMnB,mBAAN,CACImB,cAAcpB,IAAd,CADJ,EAEI,CAACyB,WAAWzB,IAAX,EAAiBE,WAAjB,EAAD,CAFJ,EAGIuB,WAAWzB,IAAX,EAAiBG,YAAjB,GAAgCH,IAAhC,EAHJ,EAIIyB,WAAWzB,IAAX,EAAiBG,YAAjB,GAAgCC,UAAhC,GAA6CJ,IAA7C,EAJJ,EAKEK,GALF,CAKM;AAAA,uCAASZ,UAAUa,QAAV,CAAmBmB,WAAWzB,IAAX,EAAiBG,YAAjB,GAAgCI,QAAhC,GAA2C,SAA9D,EAAyEC,KAAzE,CAAT;AAAA,6BALN;AAMH;AACJ,qBAViB,CAjBb;AA4BLmB,6BAAS,CAAC,WAAD,EAAc,MAAd,EAAsB,UAAtB,EAAkC,kBAAlC,EAAsD,UAAUlC,SAAV,EAAqBpB,IAArB,EAA2B4C,QAA3B,EAAqCO,gBAArC,EAAuD;AAClH,4BAAIG,UAAUtD,KAAKuD,UAAL,CAAgBX,SAASM,IAAzB,CAAd;;AAEA;AACA9B,kCAAUoC,kCAAV,CAA6CF,OAA7C,EAAsDtD,KAAKqD,aAAL,EAAtD,EAA4E,IAA5E;;AAEA;AACAjC,kCAAUqC,UAAV,CACIzD,KAAK0D,SAAL,GAAiBxB,QADrB,EAEIoB,OAFJ;;AAKA,+BAAOA,OAAP;AACH,qBAbQ,CA5BJ;AA0CLK,6BAAS,CAAC,MAAD,EAAS,cAAT,EAAyB,WAAzB,EAAsC,SAAtC,EAAiD,SAAjD,EAA4D,WAA5D,EAAyE,UAAS3D,IAAT,EAAeH,YAAf,EAA6BuB,SAA7B,EAAwCkC,OAAxC,EAAiDM,OAAjD,EAA0DC,SAA1D,EAAqE;AACnJ,+BAAO7D,KAAK2D,OAAL,MAAkBE,UAAUC,MAAV,CAAiB9D,KAAK2D,OAAL,EAAjB,EAAiC3D,IAAjC,EAAuC;AAC5D+D,mCAAOlE,YADqD;AAE5DmE,uCAAW5C,SAFiD;AAG5DpB,sCAH4D;AAI5DiE,kDAJ4D;AAK5DX,4CAL4D;AAM5DY,oCAAQN;AANoD,yBAAvC,CAAzB;AAQH,qBATQ;AA1CJ;AAJP;AADH;AATI,KA9BnB;;AAqGAjD,mBACKC,KADL,CACW,MADX,EACmB;AACXI,gBAAQ,UADG;AAEXF,aAAK,qCAFM;AAGXG,oBAAY,gBAHD;AAIXC,sBAAc,gBAJH;AAKXxB,0BAAkBA,iBAAiB,UAAjB,iBALP;AAMXqB,gBAAQ;AACJb,oBAAQ,IADJ;AAEJiE,gBAAI,IAFA;AAGJ/B,kBAAM,EAAEC,OAAO,CAAT,EAAYC,QAAQ,IAApB,EAHF;AAIJC,oBAAQ,EAAEF,OAAO,EAAT,EAAaC,QAAQ,IAArB,EAJJ;AAKJE,uBAAW,IALP;AAMJC,qBAAS;AANL,SANG;AAcXtB,iBAAS;AACLC,uBAAW;AAAA,uBAAM,yBAAN;AAAA,aADN;AAELpB,kBAAMI,aAAa,UAAb,CAFD;AAGLgE,sBAAU,CAAC,cAAD,EAAiB,aAAjB,EAAgC,MAAhC,EAAwC,UAAUvE,YAAV,EAAwByB,WAAxB,EAAqCtB,IAArC,EAA2C;AACzF,uBAAOsB,YAAY+C,MAAZ,CAAmBrE,KAAK0D,SAAL,EAAnB,EAAqC1D,KAAKsE,IAA1C,EAAgDzE,aAAasE,EAA7D,EAAiEnE,KAAK+B,UAAL,EAAjE,EAAoF/B,KAAKuE,MAAL,EAApF,CAAP;AACH,aAFS,CAHL;AAMLpC,mBAAO,CAAC,MAAD,EAAS,UAAT,EAAqB,UAASnC,IAAT,EAAeoE,QAAf,EAAyB;AACjD,uBAAOpE,KAAKwE,QAAL,CAAcJ,QAAd,CAAP;AACH,aAFM,CANF;AASLrB,2BAAe,CAAC,aAAD,EAAgB,MAAhB,EAAwB,OAAxB,EAAiC,UAAUzB,WAAV,EAAuBtB,IAAvB,EAA6BmC,KAA7B,EAAoC;AAChF,uBAAOb,YAAY0B,gBAAZ,CAA6BhD,KAAKiD,MAAL,EAA7B,EAA4C,CAACd,MAAMsC,MAAP,CAA5C,CAAP;AACH,aAFc,CATV;AAYLtB,8BAAkB,CAAC,WAAD,EAAc,MAAd,EAAsB,eAAtB,EAAuC,UAAU/B,SAAV,EAAqBpB,IAArB,EAA2B+C,aAA3B,EAA0C;AAC/F,oBAAMK,aAAapD,KAAKqD,aAAL,EAAnB;AACA,qBAAK,IAAI1B,IAAT,IAAiBoB,aAAjB,EAAgC;AAC5B,oCAAMnB,mBAAN,CACImB,cAAcpB,IAAd,CADJ,EAEI,CAACyB,WAAWzB,IAAX,EAAiBE,WAAjB,EAAD,CAFJ,EAGIuB,WAAWzB,IAAX,EAAiBG,YAAjB,GAAgCH,IAAhC,EAHJ,EAIIyB,WAAWzB,IAAX,EAAiBG,YAAjB,GAAgCC,UAAhC,GAA6CJ,IAA7C,EAJJ,EAKEK,GALF,CAKM;AAAA,+BAASZ,UAAUa,QAAV,CAAmBmB,WAAWzB,IAAX,EAAiBG,YAAjB,GAAgCI,QAAhC,GAA2C,SAA9D,EAAyEC,KAAzE,CAAT;AAAA,qBALN;AAMH;AACJ,aAViB,CAZb;AAuBLuC,gCAAoB,CAAC,cAAD,EAAiB,aAAjB,EAAgC,MAAhC,EAAwC,OAAxC,EAAiD,UAAU7E,YAAV,EAAwByB,WAAxB,EAAqCtB,IAArC,EAA2CmC,KAA3C,EAAkD;AACnH,uBAAOb,YAAYqD,qBAAZ,CAAkC3E,KAAK4E,kBAAL,EAAlC,EAA6D/E,aAAa2C,SAA1E,EAAqF3C,aAAa4C,OAAlG,EAA2GN,MAAM0C,eAAjH,CAAP;AACH,aAFmB,CAvBf;AA0BLC,mCAAuB,CAAC,WAAD,EAAc,MAAd,EAAsB,oBAAtB,EAA4C,UAAU1D,SAAV,EAAqBpB,IAArB,EAA2B0E,kBAA3B,EAA+C;AAC9G,oBAAMK,kBAAkB/E,KAAK4E,kBAAL,EAAxB;AACA,qBAAK,IAAIjD,IAAT,IAAiBoD,eAAjB,EAAkC;AAC9B,oCAAMnD,mBAAN,CACI8C,mBAAmB/C,IAAnB,CADJ,EAEIoD,gBAAgBpD,IAAhB,EAAsBqD,YAAtB,EAFJ,EAGID,gBAAgBpD,IAAhB,EAAsBG,YAAtB,GAAqCH,IAArC,EAHJ,EAIIoD,gBAAgBpD,IAAhB,EAAsBG,YAAtB,GAAqCC,UAArC,GAAkDJ,IAAlD,EAJJ,EAKEK,GALF,CAKM;AAAA,+BAASZ,UAAUa,QAAV,CAAmB8C,gBAAgBpD,IAAhB,EAAsBG,YAAtB,GAAqCI,QAArC,GAAgD,OAAnE,EAA4EC,KAA5E,CAAT;AAAA,qBALN;AAMH;AACJ,aAVsB,CA1BlB;AAqCL8C,iCAAqB,CAAC,WAAD,EAAc,MAAd,EAAsB,OAAtB,EAA+B,kBAA/B,EAAmD,UAAS7D,SAAT,EAAoBpB,IAApB,EAA0BmC,KAA1B,EAAiCgB,gBAAjC,EAAmD;AACvH/B,0BAAU8D,6BAAV,CAAwC/C,KAAxC,EAA+CnC,KAAKqD,aAAL,EAA/C,EAAqE,IAArE;AACAjC,0BAAUa,QAAV,CAAmBjC,KAAK0D,SAAL,GAAiBxB,QAApC,EAA8CC,KAA9C;AACH,aAHoB,CArChB;AAyCLgD,6CAAiC,CAAC,IAAD,EAAO,aAAP,EAAsB,MAAtB,EAA8B,oBAA9B,EAAoD,UAAUC,EAAV,EAAa9D,WAAb,EAA0BtB,IAA1B,EAAgC0E,kBAAhC,EAAoD;AACrI,oBAAMK,kBAAkB/E,KAAK4E,kBAAL,EAAxB;AACA,oBAAIS,WAAW,EAAf;AACAC,uBAAOC,IAAP,CAAYR,eAAZ,EAA6B/C,GAA7B,CAAiC,gBAAQ;AACrCqD,6BAAS1D,IAAT,IAAiBL,YAAY0B,gBAAZ,CAA6B+B,gBAAgBpD,IAAhB,EAAsBqD,YAAtB,EAA7B,EAAmEN,mBAAmB/C,IAAnB,CAAnE,CAAjB;AACH,iBAFD;AAGA,uBAAOyD,GAAGI,GAAH,CAAOH,QAAP,CAAP;AACH,aAPgC,CAzC5B;AAiDLI,gDAAoC,CAAC,WAAD,EAAc,MAAd,EAAsB,iCAAtB,EAAyD,UAASrE,SAAT,EAAoBpB,IAApB,EAA0BmF,+BAA1B,EAA2D;AACpJ,oBAAMJ,kBAAkB/E,KAAK4E,kBAAL,EAAxB;AACAU,uBAAOC,IAAP,CAAYR,eAAZ,EAA6B/C,GAA7B,CAAiC,8BAAsB;AACnD,wBAAMoB,aAAa2B,gBAAgBW,kBAAhB,EAAoCrC,aAApC,EAAnB;AACA,yBAAK,IAAI1B,IAAT,IAAiByB,UAAjB,EAA6B;AACzB,4BAAI,CAAC+B,gCAAgCO,kBAAhC,EAAoD/D,IAApD,CAAL,EAAgE;AAC5D;AACH;AACD,wCAAMC,mBAAN,CACIuD,gCAAgCO,kBAAhC,EAAoD/D,IAApD,CADJ,EAEI,CAACyB,WAAWzB,IAAX,EAAiBE,WAAjB,EAAD,CAFJ,EAGIuB,WAAWzB,IAAX,EAAiBG,YAAjB,GAAgCH,IAAhC,EAHJ,EAIIyB,WAAWzB,IAAX,EAAiBG,YAAjB,GAAgCC,UAAhC,GAA6CJ,IAA7C,EAJJ,EAKEK,GALF,CAKM;AAAA,mCAASZ,UAAUa,QAAV,CAAmBmB,WAAWzB,IAAX,EAAiBG,YAAjB,GAAgCI,QAAhC,GAA2C,SAA9D,EAAyEC,KAAzE,CAAT;AAAA,yBALN;AAMH;AACJ,iBAbD;AAcA,uBAAO,IAAP;AACH,aAjBmC,CAjD/B;AAmELwB,qBAAS,CAAC,MAAD,EAAS,cAAT,EAAyB,WAAzB,EAAsC,OAAtC,EAA+C,qBAA/C,EAAsE,uBAAtE,EAA+F,oCAA/F,EAAqI,SAArI,EAAgJ,WAAhJ,EAA6J,UAAS3D,IAAT,EAAeH,YAAf,EAA6BuB,SAA7B,EAAwCe,KAAxC,EAA+C8C,mBAA/C,EAAoEH,qBAApE,EAA2FW,kCAA3F,EAA+H7B,OAA/H,EAAwIC,SAAxI,EAAmJ;AACrT,uBAAO7D,KAAK2D,OAAL,MAAkBE,UAAUC,MAAV,CAAiB9D,KAAK2D,OAAL,EAAjB,EAAiC3D,IAAjC,EAAuC;AAC5D+D,2BAAOlE,YADqD;AAE5DmE,+BAAW5C,SAFiD;AAG5DpB,8BAH4D;AAI5DiE,0CAJ4D;AAK5D9B,gCAL4D;AAM5D+B,4BAAQN;AANoD,iBAAvC,CAAzB;AAQH,aATQ;AAnEJ;AAdE,KADnB;;AA+FAjD,mBACKC,KADL,CACW,QADX,EACqB;AACbI,gBAAQ,UADK;AAEbF,aAAK,sCAFQ;AAGbG,oBAAY,gBAHC;AAIbC,sBAAc,gBAJD;AAKbxB,0BAAkBA,iBAAiB,YAAjB,mBALL;AAMbqB,gBAAQ;AACJqB,kBAAM,EAAEC,OAAO,CAAT,EAAYC,QAAQ,IAApB,EADF;AAEJC,oBAAQ,EAAEF,OAAO,EAAT,EAAaC,QAAQ,IAArB,EAFJ;AAGJqD,2BAAe,EAAEtD,OAAO,EAAT,EAAaC,QAAQ,IAArB,EAHX;AAIJE,uBAAW,IAJP;AAKJC,qBAAS;AALL,SANK;AAabtB,iBAAS;AACLC,uBAAW;AAAA,uBAAM,yBAAN;AAAA,aADN;AAELwE,2BAAe,CAAC,QAAD,EAAW,cAAX,EAA2B,UAACC,MAAD,EAAShG,YAAT;AAAA,uBAA2B;AACjE8B,0BAAMkE,OAAOC,OAAP,CAAenE,IAAf,IAAuB,MADoC;AAEjEZ,4BAAQuE,OAAOC,IAAP,CAAYM,OAAO9E,MAAnB,EAA2BgF,MAA3B,GAAoC,CAApC,GAAwCF,OAAO9E,MAA/C,GAAwDlB;AAFC,iBAA3B;AAAA,aAA3B,CAFV;AAMLG,kBAAMI,aAAa,YAAb,CAND;AAOL+B,mBAAO,CAAC,cAAD,EAAiB,WAAjB,EAA8B,MAA9B,EAAsC,UAAUtC,YAAV,EAAwBuB,SAAxB,EAAmCpB,IAAnC,EAAyC;AAClF,oBAAImC,QAAQ,gBAAM6D,eAAN,CAAsBhG,KAAKiG,SAAL,EAAtB,EAAwCjG,KAAKE,MAAL,CAAYyB,IAAZ,EAAxC,CAAZ;AACA2D,uBAAOC,IAAP,CAAY1F,aAAa8F,aAAzB,EAAwCO,OAAxC,CAAgD;AAAA,2BAAO/D,MAAMsC,MAAN,CAAa0B,GAAb,IAAoBtG,aAAa8F,aAAb,CAA2BQ,GAA3B,CAA3B;AAAA,iBAAhD;AACA/E,0BAAUa,QAAV,CAAmBjC,KAAK0D,SAAL,GAAiBxB,QAApC,EAA8CC,KAA9C;;AAEA,uBAAOA,KAAP;AACH,aANM,CAPF;AAcLiE,wBAAY,CAAC,aAAD,EAAgB,MAAhB,EAAwB,UAAU9E,WAAV,EAAuBtB,IAAvB,EAA6B;AAC7D,uBAAOsB,YAAYC,oBAAZ,CAAiCvB,KAAKqD,aAAL,CAAmB,KAAnB,CAAjC,CAAP;AACH,aAFW,CAdP;AAiBLgD,2BAAe,CAAC,WAAD,EAAc,MAAd,EAAsB,YAAtB,EAAoC,UAAUjF,SAAV,EAAqBpB,IAArB,EAA2BqB,UAA3B,EAAuC;AACtF,oBAAMiF,UAAUtG,KAAKqD,aAAL,CAAmB,KAAnB,CAAhB;AACA,qBAAK,IAAI1B,IAAT,IAAiBN,UAAjB,EAA6B;AACzB,oCAAMO,mBAAN,CACIP,WAAWM,IAAX,CADJ,EAEI,CAAC2E,QAAQ3E,IAAR,EAAcE,WAAd,EAAD,CAFJ,EAGIyE,QAAQ3E,IAAR,EAAcG,YAAd,GAA6BH,IAA7B,EAHJ,EAII2E,QAAQ3E,IAAR,EAAcG,YAAd,GAA6BC,UAA7B,GAA0CJ,IAA1C,EAJJ,EAKEK,GALF,CAKM;AAAA,+BAASZ,UAAUa,QAAV,CAAmBqE,QAAQ3E,IAAR,EAAcG,YAAd,GAA6BI,QAA7B,GAAwC,UAA3D,EAAuEC,KAAvE,CAAT;AAAA,qBALN;AAMH;AACJ,aAVc,CAjBV;AA4BLwB,qBAAS,CAAC,MAAD,EAAS,cAAT,EAAyB,WAAzB,EAAsC,OAAtC,EAA+C,eAA/C,EAAgE,SAAhE,EAA2E,WAA3E,EAAwF,UAAS3D,IAAT,EAAeH,YAAf,EAA6BuB,SAA7B,EAAwCe,KAAxC,EAA+CkE,aAA/C,EAA8DzC,OAA9D,EAAuEC,SAAvE,EAAkF;AAC/K,uBAAO7D,KAAK2D,OAAL,MAAkBE,UAAUC,MAAV,CAAiB9D,KAAK2D,OAAL,EAAjB,EAAiC3D,IAAjC,EAAuC;AAC5D+D,2BAAOlE,YADqD;AAE5DmE,+BAAW5C,SAFiD;AAG5DpB,8BAH4D;AAI5DiE,0CAJ4D;AAK5D9B,gCAL4D;AAM5D+B,4BAAQN;AANoD,iBAAvC,CAAzB;AAQH,aATQ;AA5BJ;AAbI,KADrB;;AAuDAjD,mBACKC,KADL,CACW,MADX,EACmB;AACXI,gBAAQ,UADG;AAEXF,aAAK,qCAFM;AAGXG,oBAAY,gBAHD;AAIXC,sBAAc,gBAJH;AAKXxB,0BAAkBA,iBAAiB,UAAjB,iBALP;AAMXqB,gBAAQ;AACJb,oBAAQ,IADJ;AAEJiE,gBAAI,IAFA;AAGJ/B,kBAAM,EAAEC,OAAO,CAAT,EAAYC,QAAQ,IAApB,EAHF;AAIJC,oBAAQ,EAAEF,OAAO,EAAT,EAAaC,QAAQ,IAArB,EAJJ;AAKJE,uBAAW,IALP;AAMJC,qBAAS;AANL,SANG;AAcXtB,iBAAS;AACLC,uBAAW;AAAA,uBAAM,yBAAN;AAAA,aADN;AAELwE,2BAAe,CAAC,QAAD,EAAW,cAAX,EAA2B,UAACC,MAAD,EAAShG,YAAT;AAAA,uBAA2B;AACjE8B,0BAAMkE,OAAOC,OAAP,CAAenE,IAAf,IAAuB,MADoC;AAEjEZ,4BAAQuE,OAAOC,IAAP,CAAYM,OAAO9E,MAAnB,EAA2BgF,MAA3B,GAAoC,CAApC,GAAwCF,OAAO9E,MAA/C,GAAwDlB;AAFC,iBAA3B;AAAA,aAA3B,CAFV;AAMLG,kBAAMI,aAAa,UAAb,CAND;AAOLgE,sBAAU,CAAC,cAAD,EAAiB,aAAjB,EAAgC,MAAhC,EAAwC,UAAUvE,YAAV,EAAwByB,WAAxB,EAAqCtB,IAArC,EAA2C;AACzF,uBAAOsB,YAAY+C,MAAZ,CAAmBrE,KAAK0D,SAAL,EAAnB,EAAqC1D,KAAKsE,IAA1C,EAAgDzE,aAAasE,EAA7D,EAAiEnE,KAAK+B,UAAL,EAAjE,EAAoF/B,KAAKuE,MAAL,CAAY1E,aAAasE,EAAzB,CAApF,CAAP;AACH,aAFS,CAPL;AAULhC,mBAAO,CAAC,MAAD,EAAS,UAAT,EAAqB,UAASnC,IAAT,EAAeoE,QAAf,EAAyB;AACjD,uBAAOpE,KAAKwE,QAAL,CAAcJ,QAAd,CAAP;AACH,aAFM,CAVF;AAaLrB,2BAAe,CAAC,aAAD,EAAgB,MAAhB,EAAwB,OAAxB,EAAiC,UAAUzB,WAAV,EAAuBtB,IAAvB,EAA6BmC,KAA7B,EAAoC;AAChF,uBAAOb,YAAY0B,gBAAZ,CAA6BhD,KAAKiD,MAAL,EAA7B,EAA4C,CAACd,MAAMsC,MAAP,CAA5C,CAAP;AACH,aAFc,CAbV;AAgBLtB,8BAAkB,CAAC,WAAD,EAAc,MAAd,EAAsB,eAAtB,EAAuC,UAAU/B,SAAV,EAAqBpB,IAArB,EAA2B+C,aAA3B,EAA0C;AAC/F,oBAAMK,aAAapD,KAAKqD,aAAL,EAAnB;AACA,qBAAK,IAAI1B,IAAT,IAAiBoB,aAAjB,EAAgC;AAC5B,oCAAMnB,mBAAN,CACImB,cAAcpB,IAAd,CADJ,EAEI,CAACyB,WAAWzB,IAAX,EAAiBE,WAAjB,EAAD,CAFJ,EAGIuB,WAAWzB,IAAX,EAAiBG,YAAjB,GAAgCH,IAAhC,EAHJ,EAIIyB,WAAWzB,IAAX,EAAiBG,YAAjB,GAAgCC,UAAhC,GAA6CJ,IAA7C,EAJJ,EAKEK,GALF,CAKM;AAAA,+BAASZ,UAAUa,QAAV,CAAmBmB,WAAWzB,IAAX,EAAiBG,YAAjB,GAAgCI,QAAhC,GAA2C,SAA9D,EAAyEC,KAAzE,CAAT;AAAA,qBALN;AAMH;AACJ,aAViB,CAhBb;AA2BLuC,gCAAoB,CAAC,cAAD,EAAiB,aAAjB,EAAgC,MAAhC,EAAwC,OAAxC,EAAiD,UAAU7E,YAAV,EAAwByB,WAAxB,EAAqCtB,IAArC,EAA2CmC,KAA3C,EAAkD;AACnH,uBAAOb,YAAYqD,qBAAZ,CAAkC3E,KAAK4E,kBAAL,EAAlC,EAA6D/E,aAAa2C,SAA1E,EAAqF3C,aAAa4C,OAAlG,EAA2GN,MAAM0C,eAAjH,CAAP;AACH,aAFmB,CA3Bf;AA8BLC,mCAAuB,CAAC,WAAD,EAAc,MAAd,EAAsB,oBAAtB,EAA4C,UAAU1D,SAAV,EAAqBpB,IAArB,EAA2B0E,kBAA3B,EAA+C;AAC9G,oBAAMK,kBAAkB/E,KAAK4E,kBAAL,EAAxB;AACA,qBAAK,IAAIjD,IAAT,IAAiBoD,eAAjB,EAAkC;AAC9B,oCAAMnD,mBAAN,CACI8C,mBAAmB/C,IAAnB,CADJ,EAEIoD,gBAAgBpD,IAAhB,EAAsBqD,YAAtB,EAFJ,EAGID,gBAAgBpD,IAAhB,EAAsBG,YAAtB,GAAqCH,IAArC,EAHJ,EAIIoD,gBAAgBpD,IAAhB,EAAsBG,YAAtB,GAAqCC,UAArC,GAAkDJ,IAAlD,EAJJ,EAKEK,GALF,CAKM;AAAA,+BAASZ,UAAUa,QAAV,CAAmB8C,gBAAgBpD,IAAhB,EAAsBG,YAAtB,GAAqCI,QAArC,GAAgD,OAAnE,EAA4EC,KAA5E,CAAT;AAAA,qBALN;AAMH;AACJ,aAVsB,CA9BlB;AAyCL8C,iCAAqB,CAAC,WAAD,EAAc,MAAd,EAAsB,OAAtB,EAA+B,kBAA/B,EAAmD,UAAS7D,SAAT,EAAoBpB,IAApB,EAA0BmC,KAA1B,EAAiCgB,gBAAjC,EAAmD;AACvH/B,0BAAU8D,6BAAV,CAAwC/C,KAAxC,EAA+CnC,KAAKqD,aAAL,EAA/C,EAAqE,IAArE;AACAjC,0BAAUa,QAAV,CAAmBjC,KAAK0D,SAAL,GAAiBxB,QAApC,EAA8CC,KAA9C;AACH,aAHoB,CAzChB;AA6CLiE,wBAAY,CAAC,aAAD,EAAgB,MAAhB,EAAwB,UAAU9E,WAAV,EAAuBtB,IAAvB,EAA6B;AAC7D,uBAAOsB,YAAYC,oBAAZ,CAAiCvB,KAAKqD,aAAL,CAAmB,KAAnB,CAAjC,CAAP;AACH,aAFW,CA7CP;AAgDLgD,2BAAe,CAAC,WAAD,EAAc,MAAd,EAAsB,YAAtB,EAAoC,UAAUjF,SAAV,EAAqBpB,IAArB,EAA2BqB,UAA3B,EAAuC;AACtF,oBAAMiF,UAAUtG,KAAKqD,aAAL,CAAmB,KAAnB,CAAhB;AACA,qBAAK,IAAI1B,IAAT,IAAiBN,UAAjB,EAA6B;AACzB,oCAAMO,mBAAN,CACIP,WAAWM,IAAX,CADJ,EAEI,CAAC2E,QAAQ3E,IAAR,EAAcE,WAAd,EAAD,CAFJ,EAGIyE,QAAQ3E,IAAR,EAAcG,YAAd,GAA6BH,IAA7B,EAHJ,EAII2E,QAAQ3E,IAAR,EAAcG,YAAd,GAA6BC,UAA7B,GAA0CJ,IAA1C,EAJJ,EAKEK,GALF,CAKM;AAAA,+BAASZ,UAAUa,QAAV,CAAmBqE,QAAQ3E,IAAR,EAAcG,YAAd,GAA6BI,QAA7B,GAAwC,UAA3D,EAAuEC,KAAvE,CAAT;AAAA,qBALN;AAMH;AACJ,aAVc,CAhDV;AA2DLgD,6CAAiC,CAAC,IAAD,EAAO,aAAP,EAAsB,MAAtB,EAA8B,oBAA9B,EAAoD,UAAUC,EAAV,EAAa9D,WAAb,EAA0BtB,IAA1B,EAAgC0E,kBAAhC,EAAoD;AACrI,oBAAMK,kBAAkB/E,KAAK4E,kBAAL,EAAxB;AACA,oBAAIS,WAAW,EAAf;AACAC,uBAAOC,IAAP,CAAYR,eAAZ,EAA6B/C,GAA7B,CAAiC,gBAAQ;AACrCqD,6BAAS1D,IAAT,IAAiBL,YAAY0B,gBAAZ,CAA6B+B,gBAAgBpD,IAAhB,EAAsBqD,YAAtB,EAA7B,EAAmEN,mBAAmB/C,IAAnB,CAAnE,CAAjB;AACH,iBAFD;AAGA,uBAAOyD,GAAGI,GAAH,CAAOH,QAAP,CAAP;AACH,aAPgC,CA3D5B;AAmELI,gDAAoC,CAAC,WAAD,EAAc,MAAd,EAAsB,iCAAtB,EAAyD,UAASrE,SAAT,EAAoBpB,IAApB,EAA0BmF,+BAA1B,EAA2D;AACpJ,oBAAMJ,kBAAkB/E,KAAK4E,kBAAL,EAAxB;AACAU,uBAAOC,IAAP,CAAYR,eAAZ,EAA6B/C,GAA7B,CAAiC,8BAAsB;AACnD,wBAAMoB,aAAa2B,gBAAgBW,kBAAhB,EAAoCrC,aAApC,EAAnB;AACA,yBAAK,IAAI1B,IAAT,IAAiByB,UAAjB,EAA6B;AACzB,4BAAI,CAAC+B,gCAAgCO,kBAAhC,EAAoD/D,IAApD,CAAL,EAAgE;AAC5D;AACH;AACD,wCAAMC,mBAAN,CACIuD,gCAAgCO,kBAAhC,EAAoD/D,IAApD,CADJ,EAEI,CAACyB,WAAWzB,IAAX,EAAiBE,WAAjB,EAAD,CAFJ,EAGIuB,WAAWzB,IAAX,EAAiBG,YAAjB,GAAgCH,IAAhC,EAHJ,EAIIyB,WAAWzB,IAAX,EAAiBG,YAAjB,GAAgCC,UAAhC,GAA6CJ,IAA7C,EAJJ,EAKEK,GALF,CAKM;AAAA,mCAASZ,UAAUa,QAAV,CAAmBmB,WAAWzB,IAAX,EAAiBG,YAAjB,GAAgCI,QAAhC,GAA2C,SAA9D,EAAyEC,KAAzE,CAAT;AAAA,yBALN;AAMH;AACJ,iBAbD;AAcA,uBAAO,IAAP;AACH,aAjBmC,CAnE/B;AAqFLwB,qBAAS,CAAC,MAAD,EAAS,cAAT,EAAyB,WAAzB,EAAsC,OAAtC,EAA+C,oCAA/C,EAAqF,eAArF,EAAsG,qBAAtG,EAA6H,SAA7H,EAAwI,WAAxI,EAAqJ,UAAS3D,IAAT,EAAeH,YAAf,EAA6BuB,SAA7B,EAAwCe,KAAxC,EAA+CsD,kCAA/C,EAAmFY,aAAnF,EAAkGpB,mBAAlG,EAAuHrB,OAAvH,EAAgIC,SAAhI,EAA2I;AACrS,uBAAO7D,KAAK2D,OAAL,MAAkBE,UAAUC,MAAV,CAAiB9D,KAAK2D,OAAL,EAAjB,EAAiC3D,IAAjC,EAAuC;AAC5D+D,2BAAOlE,YADqD;AAE5DmE,+BAAW5C,SAFiD;AAG5DpB,8BAH4D;AAI5DiE,0CAJ4D;AAK5D9B,gCAL4D;AAM5D+B,4BAAQN;AANoD,iBAAvC,CAAzB;AAQH,aATQ;AArFJ;AAdE,KADnB;;AAiHAjD,mBACKC,KADL,CACW,QADX,EACqB;AACbI,gBAAQ,UADK;AAEbF,aAAK,qBAFQ;AAGbG,oBAAY,kBAHC;AAIbC,sBAAc,kBAJD;AAKbxB,0BAAkBA,iBAAiB,YAAjB,mBALL;AAMbqB,gBAAQ;AACJqB,kBAAM,EAAEC,OAAO,CAAT,EAAYC,QAAQ,IAApB,EADF;AAEJC,oBAAQ,EAAEF,OAAO,EAAT,EAAaC,QAAQ,IAArB,EAFJ;AAGJE,uBAAW,IAHP;AAIJC,qBAAS;AAJL,SANK;AAYbtB,iBAAS;AACLC,uBAAW;AAAA,uBAAM,yBAAN;AAAA,aADN;AAELpB,kBAAMI,aAAa,YAAb,CAFD;AAGLW,oBAAQ,CAAC,cAAD,EAAiB,UAAUlB,YAAV,EAAwB;AAC7C,uBAAOA,YAAP;AACH,aAFO,CAHH;AAMLuE,sBAAU,CAAC,cAAD,EAAiB,aAAjB,EAAgC,MAAhC,EAAwC,UAAUvE,YAAV,EAAwByB,WAAxB,EAAqCtB,IAArC,EAA2C;AACzF,uBAAOsB,YAAY+C,MAAZ,CAAmBrE,KAAK0D,SAAL,EAAnB,EAAqC1D,KAAKsE,IAA1C,EAAgDzE,aAAasE,EAA7D,EAAiEnE,KAAK+B,UAAL,EAAjE,EAAoF/B,KAAKuE,MAAL,EAApF,CAAP;AACH,aAFS,CANL;AASLpC,mBAAO,CAAC,MAAD,EAAS,UAAT,EAAqB,UAASnC,IAAT,EAAeoE,QAAf,EAAyB;AACjD,uBAAOpE,KAAKwE,QAAL,CAAcJ,QAAd,CAAP;AACH,aAFM,CATF;AAYLT,qBAAS,CAAC,MAAD,EAAS,cAAT,EAAyB,WAAzB,EAAsC,OAAtC,EAA+C,SAA/C,EAA0D,WAA1D,EAAuE,UAAS3D,IAAT,EAAeH,YAAf,EAA6BuB,SAA7B,EAAwCe,KAAxC,EAA+CyB,OAA/C,EAAwDC,SAAxD,EAAmE;AAC/I,uBAAO7D,KAAK2D,OAAL,MAAkBE,UAAUC,MAAV,CAAiB9D,KAAK2D,OAAL,EAAjB,EAAiC3D,IAAjC,EAAuC;AAC5D+D,2BAAOlE,YADqD;AAE5DmE,+BAAW5C,SAFiD;AAG5DpB,8BAH4D;AAI5DiE,0CAJ4D;AAK5D9B,gCAL4D;AAM5D+B,4BAAQN;AANoD,iBAAvC,CAAzB;AASH,aAVQ;AAZJ;AAZI,KADrB;;AAuCAjD,mBACKC,KADL,CACW,aADX,EAC0B;AAClBI,gBAAQ,UADU;AAElBF,aAAK,kCAFa;AAGlBG,oBAAY,uBAHM;AAIlBC,sBAAc,uBAJI;AAKlBxB,0BAAkBA,iBAAiB,iBAAjB,wBALA;AAMlBqB,gBAAQ;AACJb,oBAAQ,IADJ;AAEJqG,iBAAK,EAFD;AAGJnE,kBAAM,EAAEC,OAAO,CAAT,EAAYC,QAAQ,IAApB,EAHF;AAIJC,oBAAQ,EAAEF,OAAO,EAAT,EAAaC,QAAQ,IAArB,EAJJ;AAKJE,uBAAW,IALP;AAMJC,qBAAS;AANL,SANU;AAclBtB,iBAAS;AACLnB,kBAAMI,aAAa,iBAAb,CADD;AAELW,oBAAQ,CAAC,cAAD,EAAiB,UAAUlB,YAAV,EAAwB;AAC7C,uBAAOA,YAAP;AACH,aAFO;AAFH;AAdS,KAD1B;AAsBH;;AAEDa,QAAQ8F,OAAR,GAAkB,CAAC,gBAAD,CAAlB;;kBAEe9F,O","file":"routing.js","sourcesContent":["import DataStore  from 'admin-config/lib/DataStore/DataStore';\nimport Entry  from 'admin-config/lib/Entry';\nimport batchDeleteTemplate  from './delete/batchDelete.html';\nimport deleteTemplate  from './delete/delete.html';\nimport createTemplate  from './form/create.html';\nimport editTemplate  from './form/edit.html';\nimport listTemplate  from './list/list.html';\nimport listLayoutTemplate  from './list/listLayout.html';\nimport showTemplate  from './show/show.html';\n\nfunction templateProvider(viewName, defaultView) {\n    return ['$stateParams', 'NgAdminConfiguration', function ($stateParams, Configuration) {\n        var customTemplate;\n        var view = Configuration().getViewByEntityAndType($stateParams.entity, viewName);\n        customTemplate = view.template();\n        if (customTemplate) {\n            return customTemplate;\n        }\n        customTemplate = Configuration().customTemplate()(viewName);\n        if (customTemplate) {\n            return customTemplate;\n        }\n        return defaultView;\n    }];\n}\n\nfunction viewProvider(viewName) {\n    return ['$stateParams', 'NgAdminConfiguration', function ($stateParams, Configuration) {\n        var view;\n        try {\n            view = Configuration().getViewByEntityAndType($stateParams.entity, viewName);\n        } catch (e) {\n            var error404 = new Error('Unknown view or entity name');\n            error404.status = 404; // trigger the 404 error\n            throw error404;\n        }\n        if (!view.enabled) {\n            throw new Error('The ' + viewName + ' is disabled for this entity');\n        }\n        return view;\n    }];\n}\n\nfunction routing($stateProvider) {\n\n    $stateProvider\n        .state('listLayout', {\n            abstract: true,\n            url: '/:entity/list',\n            params: {\n                entity: null\n            },\n            parent: 'ng-admin',\n            controller: 'ListLayoutController',\n            controllerAs: 'llCtrl',\n            templateProvider: templateProvider('ListView', listLayoutTemplate),\n            resolve: {\n                dataStore: () => new DataStore(),\n                view: viewProvider('ListView'),\n                filterData: ['ReadQueries', 'view', function (ReadQueries, view) {\n                    return ReadQueries.getAllReferencedData(view.getFilterReferences(false));\n                }],\n                filterEntries: ['dataStore', 'view', 'filterData', function (dataStore, view, filterData) {\n                    const filters = view.getFilterReferences(false);\n                    for (var name in filterData) {\n                        Entry.createArrayFromRest(\n                            filterData[name],\n                            [filters[name].targetField()],\n                            filters[name].targetEntity().name(),\n                            filters[name].targetEntity().identifier().name()\n                        ).map(entry => dataStore.addEntry(filters[name].targetEntity().uniqueId + '_choices', entry));\n                    }\n                }]\n            }\n        })\n        .state('list', {\n            url: '?{search:json}&{page:int}&sortField&sortDir',\n            params: {\n                page: { value: 1, squash: true },\n                search: { value: {}, squash: true },\n                sortField: null,\n                sortDir: null\n            },\n            parent: 'listLayout',\n            views: {\n                grid: {\n                    controller: 'ListController',\n                    controllerAs: 'listController',\n                    template: listTemplate,\n                    resolve: {\n                        dataStore: () => new DataStore(),\n                        view: viewProvider('ListView'),\n                        response: ['$stateParams', 'ReadQueries', 'view', function ($stateParams, ReadQueries, view) {\n                            var page = $stateParams.page,\n                                filters = $stateParams.search,\n                                sortField = $stateParams.sortField,\n                                sortDir = $stateParams.sortDir;\n\n                            return ReadQueries.getAll(view, page, filters, sortField, sortDir);\n                        }],\n                        totalItems: ['response', function (response) {\n                            return response.totalItems;\n                        }],\n                        referenceData: ['ReadQueries', 'view', 'response', function (ReadQueries, view, response) {\n                            return ReadQueries.getReferenceData(view.fields(), response.data);\n                        }],\n                        referenceEntries: ['dataStore', 'view', 'referenceData', function (dataStore, view, referenceData) {\n                            const references = view.getReferences();\n                            for (var name in referenceData) {\n                                Entry.createArrayFromRest(\n                                    referenceData[name],\n                                    [references[name].targetField()],\n                                    references[name].targetEntity().name(),\n                                    references[name].targetEntity().identifier().name()\n                                ).map(entry => dataStore.addEntry(references[name].targetEntity().uniqueId + '_values', entry));\n                            }\n                        }],\n                        entries: ['dataStore', 'view', 'response', 'referenceEntries', function (dataStore, view, response, referenceEntries) {\n                            var entries = view.mapEntries(response.data);\n\n                            // shortcut to diplay collection of entry with included referenced values\n                            dataStore.fillReferencesValuesFromCollection(entries, view.getReferences(), true);\n\n                            // set entries here ???\n                            dataStore.setEntries(\n                                view.getEntity().uniqueId,\n                                entries\n                            );\n\n                            return entries;\n                        }],\n                        prepare: ['view', '$stateParams', 'dataStore', 'entries', '$window', '$injector', function(view, $stateParams, dataStore, entries, $window, $injector) {\n                            return view.prepare() && $injector.invoke(view.prepare(), view, {\n                                query: $stateParams,\n                                datastore: dataStore,\n                                view,\n                                Entry,\n                                entries,\n                                window: $window\n                            });\n                        }],\n                    }\n                }\n            }\n        });\n\n    $stateProvider\n        .state('show', {\n            parent: 'ng-admin',\n            url: '/:entity/show/:id?sortField&sortDir',\n            controller: 'ShowController',\n            controllerAs: 'showController',\n            templateProvider: templateProvider('ShowView', showTemplate),\n            params: {\n                entity: null,\n                id: null,\n                page: { value: 1, squash: true },\n                search: { value: {}, squash: true },\n                sortField: null,\n                sortDir: null\n            },\n            resolve: {\n                dataStore: () => new DataStore(),\n                view: viewProvider('ShowView'),\n                rawEntry: ['$stateParams', 'ReadQueries', 'view', function ($stateParams, ReadQueries, view) {\n                    return ReadQueries.getOne(view.getEntity(), view.type, $stateParams.id, view.identifier(), view.getUrl());\n                }],\n                entry: ['view', 'rawEntry', function(view, rawEntry) {\n                    return view.mapEntry(rawEntry);\n                }],\n                referenceData: ['ReadQueries', 'view', 'entry', function (ReadQueries, view, entry) {\n                    return ReadQueries.getReferenceData(view.fields(), [entry.values]);\n                }],\n                referenceEntries: ['dataStore', 'view', 'referenceData', function (dataStore, view, referenceData) {\n                    const references = view.getReferences();\n                    for (var name in referenceData) {\n                        Entry.createArrayFromRest(\n                            referenceData[name],\n                            [references[name].targetField()],\n                            references[name].targetEntity().name(),\n                            references[name].targetEntity().identifier().name()\n                        ).map(entry => dataStore.addEntry(references[name].targetEntity().uniqueId + '_values', entry));\n                    }\n                }],\n                referencedListData: ['$stateParams', 'ReadQueries', 'view', 'entry', function ($stateParams, ReadQueries, view, entry) {\n                    return ReadQueries.getReferencedListData(view.getReferencedLists(), $stateParams.sortField, $stateParams.sortDir, entry.identifierValue);\n                }],\n                referencedListEntries: ['dataStore', 'view', 'referencedListData', function (dataStore, view, referencedListData) {\n                    const referencedLists = view.getReferencedLists();\n                    for (var name in referencedLists) {\n                        Entry.createArrayFromRest(\n                            referencedListData[name],\n                            referencedLists[name].targetFields(),\n                            referencedLists[name].targetEntity().name(),\n                            referencedLists[name].targetEntity().identifier().name()\n                        ).map(entry => dataStore.addEntry(referencedLists[name].targetEntity().uniqueId + '_list', entry));\n                    }\n                }],\n                entryWithReferences: ['dataStore', 'view', 'entry', 'referenceEntries', function(dataStore, view, entry, referenceEntries) {\n                    dataStore.fillReferencesValuesFromEntry(entry, view.getReferences(), true);\n                    dataStore.addEntry(view.getEntity().uniqueId, entry);\n                }],\n                referenceDataForReferencedLists: ['$q', 'ReadQueries', 'view', 'referencedListData', function ($q,ReadQueries, view, referencedListData) {\n                    const referencedLists = view.getReferencedLists();\n                    var promises = {};\n                    Object.keys(referencedLists).map(name => {\n                        promises[name] = ReadQueries.getReferenceData(referencedLists[name].targetFields(), referencedListData[name]);\n                    });\n                    return $q.all(promises);\n                }],\n                referenceEntriesForReferencedLists: ['dataStore', 'view', 'referenceDataForReferencedLists', function(dataStore, view, referenceDataForReferencedLists) {\n                    const referencedLists = view.getReferencedLists();\n                    Object.keys(referencedLists).map(referencedListName => {\n                        const references = referencedLists[referencedListName].getReferences();\n                        for (var name in references) {\n                            if (!referenceDataForReferencedLists[referencedListName][name]) {\n                                continue;\n                            }\n                            Entry.createArrayFromRest(\n                                referenceDataForReferencedLists[referencedListName][name],\n                                [references[name].targetField()],\n                                references[name].targetEntity().name(),\n                                references[name].targetEntity().identifier().name()\n                            ).map(entry => dataStore.addEntry(references[name].targetEntity().uniqueId + '_values', entry));\n                        }\n                    });\n                    return true;\n                }],\n                prepare: ['view', '$stateParams', 'dataStore', 'entry', 'entryWithReferences', 'referencedListEntries', 'referenceEntriesForReferencedLists', '$window', '$injector', function(view, $stateParams, dataStore, entry, entryWithReferences, referencedListEntries, referenceEntriesForReferencedLists, $window, $injector) {\n                    return view.prepare() && $injector.invoke(view.prepare(), view, {\n                        query: $stateParams,\n                        datastore: dataStore,\n                        view,\n                        Entry,\n                        entry,\n                        window: $window\n                    });\n                }],\n            }\n        });\n\n    $stateProvider\n        .state('create', {\n            parent: 'ng-admin',\n            url: '/:entity/create?{defaultValues:json}',\n            controller: 'FormController',\n            controllerAs: 'formController',\n            templateProvider: templateProvider('CreateView', createTemplate),\n            params: {\n                page: { value: 1, squash: true },\n                search: { value: {}, squash: true },\n                defaultValues: { value: {}, squash: true },\n                sortField: null,\n                sortDir: null\n            },\n            resolve: {\n                dataStore: () => new DataStore(),\n                previousState: ['$state', '$stateParams', ($state, $stateParams) => ({\n                    name: $state.current.name || 'edit',\n                    params: Object.keys($state.params).length > 0 ? $state.params : $stateParams,\n                })],\n                view: viewProvider('CreateView'),\n                entry: ['$stateParams', 'dataStore', 'view', function ($stateParams, dataStore, view) {\n                    var entry = Entry.createForFields(view.getFields(), view.entity.name());\n                    Object.keys($stateParams.defaultValues).forEach(key => entry.values[key] = $stateParams.defaultValues[key]);\n                    dataStore.addEntry(view.getEntity().uniqueId, entry);\n\n                    return entry;\n                }],\n                choiceData: ['ReadQueries', 'view', function (ReadQueries, view) {\n                    return ReadQueries.getAllReferencedData(view.getReferences(false));\n                }],\n                choiceEntries: ['dataStore', 'view', 'choiceData', function (dataStore, view, filterData) {\n                    const choices = view.getReferences(false);\n                    for (var name in filterData) {\n                        Entry.createArrayFromRest(\n                            filterData[name],\n                            [choices[name].targetField()],\n                            choices[name].targetEntity().name(),\n                            choices[name].targetEntity().identifier().name()\n                        ).map(entry => dataStore.addEntry(choices[name].targetEntity().uniqueId + '_choices', entry));\n                    }\n                }],\n                prepare: ['view', '$stateParams', 'dataStore', 'entry', 'choiceEntries', '$window', '$injector', function(view, $stateParams, dataStore, entry, choiceEntries, $window, $injector) {\n                    return view.prepare() && $injector.invoke(view.prepare(), view, {\n                        query: $stateParams,\n                        datastore: dataStore,\n                        view,\n                        Entry,\n                        entry,\n                        window: $window\n                    });\n                }],\n            }\n        });\n\n    $stateProvider\n        .state('edit', {\n            parent: 'ng-admin',\n            url: '/:entity/edit/:id?sortField&sortDir',\n            controller: 'FormController',\n            controllerAs: 'formController',\n            templateProvider: templateProvider('EditView', editTemplate),\n            params: {\n                entity: null,\n                id: null,\n                page: { value: 1, squash: true },\n                search: { value: {}, squash: true },\n                sortField: null,\n                sortDir: null\n            },\n            resolve: {\n                dataStore: () => new DataStore(),\n                previousState: ['$state', '$stateParams', ($state, $stateParams) => ({\n                    name: $state.current.name || 'edit',\n                    params: Object.keys($state.params).length > 0 ? $state.params : $stateParams,\n                })],\n                view: viewProvider('EditView'),\n                rawEntry: ['$stateParams', 'ReadQueries', 'view', function ($stateParams, ReadQueries, view) {\n                    return ReadQueries.getOne(view.getEntity(), view.type, $stateParams.id, view.identifier(), view.getUrl($stateParams.id));\n                }],\n                entry: ['view', 'rawEntry', function(view, rawEntry) {\n                    return view.mapEntry(rawEntry);\n                }],\n                referenceData: ['ReadQueries', 'view', 'entry', function (ReadQueries, view, entry) {\n                    return ReadQueries.getReferenceData(view.fields(), [entry.values]);\n                }],\n                referenceEntries: ['dataStore', 'view', 'referenceData', function (dataStore, view, referenceData) {\n                    const references = view.getReferences();\n                    for (var name in referenceData) {\n                        Entry.createArrayFromRest(\n                            referenceData[name],\n                            [references[name].targetField()],\n                            references[name].targetEntity().name(),\n                            references[name].targetEntity().identifier().name()\n                        ).map(entry => dataStore.addEntry(references[name].targetEntity().uniqueId + '_values', entry));\n                    }\n                }],\n                referencedListData: ['$stateParams', 'ReadQueries', 'view', 'entry', function ($stateParams, ReadQueries, view, entry) {\n                    return ReadQueries.getReferencedListData(view.getReferencedLists(), $stateParams.sortField, $stateParams.sortDir, entry.identifierValue);\n                }],\n                referencedListEntries: ['dataStore', 'view', 'referencedListData', function (dataStore, view, referencedListData) {\n                    const referencedLists = view.getReferencedLists();\n                    for (var name in referencedLists) {\n                        Entry.createArrayFromRest(\n                            referencedListData[name],\n                            referencedLists[name].targetFields(),\n                            referencedLists[name].targetEntity().name(),\n                            referencedLists[name].targetEntity().identifier().name()\n                        ).map(entry => dataStore.addEntry(referencedLists[name].targetEntity().uniqueId + '_list', entry));\n                    }\n                }],\n                entryWithReferences: ['dataStore', 'view', 'entry', 'referenceEntries', function(dataStore, view, entry, referenceEntries) {\n                    dataStore.fillReferencesValuesFromEntry(entry, view.getReferences(), true);\n                    dataStore.addEntry(view.getEntity().uniqueId, entry);\n                }],\n                choiceData: ['ReadQueries', 'view', function (ReadQueries, view) {\n                    return ReadQueries.getAllReferencedData(view.getReferences(false));\n                }],\n                choiceEntries: ['dataStore', 'view', 'choiceData', function (dataStore, view, filterData) {\n                    const choices = view.getReferences(false);\n                    for (var name in filterData) {\n                        Entry.createArrayFromRest(\n                            filterData[name],\n                            [choices[name].targetField()],\n                            choices[name].targetEntity().name(),\n                            choices[name].targetEntity().identifier().name()\n                        ).map(entry => dataStore.addEntry(choices[name].targetEntity().uniqueId + '_choices', entry));\n                    }\n                }],\n                referenceDataForReferencedLists: ['$q', 'ReadQueries', 'view', 'referencedListData', function ($q,ReadQueries, view, referencedListData) {\n                    const referencedLists = view.getReferencedLists();\n                    var promises = {};\n                    Object.keys(referencedLists).map(name => {\n                        promises[name] = ReadQueries.getReferenceData(referencedLists[name].targetFields(), referencedListData[name]);\n                    });\n                    return $q.all(promises);\n                }],\n                referenceEntriesForReferencedLists: ['dataStore', 'view', 'referenceDataForReferencedLists', function(dataStore, view, referenceDataForReferencedLists) {\n                    const referencedLists = view.getReferencedLists();\n                    Object.keys(referencedLists).map(referencedListName => {\n                        const references = referencedLists[referencedListName].getReferences();\n                        for (var name in references) {\n                            if (!referenceDataForReferencedLists[referencedListName][name]) {\n                                continue;\n                            }\n                            Entry.createArrayFromRest(\n                                referenceDataForReferencedLists[referencedListName][name],\n                                [references[name].targetField()],\n                                references[name].targetEntity().name(),\n                                references[name].targetEntity().identifier().name()\n                            ).map(entry => dataStore.addEntry(references[name].targetEntity().uniqueId + '_values', entry));\n                        }\n                    });\n                    return true;\n                }],\n                prepare: ['view', '$stateParams', 'dataStore', 'entry', 'referenceEntriesForReferencedLists', 'choiceEntries', 'entryWithReferences', '$window', '$injector', function(view, $stateParams, dataStore, entry, referenceEntriesForReferencedLists, choiceEntries, entryWithReferences, $window, $injector) {\n                    return view.prepare() && $injector.invoke(view.prepare(), view, {\n                        query: $stateParams,\n                        datastore: dataStore,\n                        view,\n                        Entry,\n                        entry,\n                        window: $window\n                    });\n                }],\n            }\n        });\n\n    $stateProvider\n        .state('delete', {\n            parent: 'ng-admin',\n            url: '/:entity/delete/:id',\n            controller: 'DeleteController',\n            controllerAs: 'deleteController',\n            templateProvider: templateProvider('DeleteView', deleteTemplate),\n            params: {\n                page: { value: 1, squash: true },\n                search: { value: {}, squash: true },\n                sortField: null,\n                sortDir: null\n            },\n            resolve: {\n                dataStore: () => new DataStore(),\n                view: viewProvider('DeleteView'),\n                params: ['$stateParams', function ($stateParams) {\n                    return $stateParams;\n                }],\n                rawEntry: ['$stateParams', 'ReadQueries', 'view', function ($stateParams, ReadQueries, view) {\n                    return ReadQueries.getOne(view.getEntity(), view.type, $stateParams.id, view.identifier(), view.getUrl());\n                }],\n                entry: ['view', 'rawEntry', function(view, rawEntry) {\n                    return view.mapEntry(rawEntry);\n                }],\n                prepare: ['view', '$stateParams', 'dataStore', 'entry', '$window', '$injector', function(view, $stateParams, dataStore, entry, $window, $injector) {\n                    return view.prepare() && $injector.invoke(view.prepare(), view, {\n                        query: $stateParams,\n                        datastore: dataStore,\n                        view,\n                        Entry,\n                        entry,\n                        window: $window\n                    });\n\n                }],\n            }\n        });\n\n    $stateProvider\n        .state('batchDelete', {\n            parent: 'ng-admin',\n            url: '/:entity/batch-delete/{ids:json}',\n            controller: 'BatchDeleteController',\n            controllerAs: 'batchDeleteController',\n            templateProvider: templateProvider('BatchDeleteView', batchDeleteTemplate),\n            params: {\n                entity: null,\n                ids: [],\n                page: { value: 1, squash: true },\n                search: { value: {}, squash: true },\n                sortField: null,\n                sortDir: null\n            },\n            resolve: {\n                view: viewProvider('BatchDeleteView'),\n                params: ['$stateParams', function ($stateParams) {\n                    return $stateParams;\n                }]\n            }\n        });\n}\n\nrouting.$inject = ['$stateProvider'];\n\nexport default routing;\n"]}
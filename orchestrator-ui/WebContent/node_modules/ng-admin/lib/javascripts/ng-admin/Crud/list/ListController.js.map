{"version":3,"sources":["../../../../../src/javascripts/ng-admin/Crud/list/ListController.js"],"names":["ListController","$scope","$stateParams","$location","$anchorScroll","ReadQueries","progression","view","dataStore","totalItems","entity","getEntity","loadingPage","search","fields","listActions","page","infinitePagination","entryCssClasses","getEntryCssClasses","bind","nextPageCallback","nextPage","setPageCallback","setPage","sortField","getSortFieldName","sortDir","queryPromises","selectionUpdater","selection","$watch","$on","destroy","start","references","getReferences","data","queryPromise","getAll","then","response","getReferenceData","referenceData","done","name","createArrayFromRest","targetField","targetEntity","identifier","map","addEntry","uniqueId","entry","push","Promise","all","mapEntries","fillReferencesValuesFromEntry","number","undefined","$inject"],"mappings":"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","file":"ListController.js","sourcesContent":["import Entry from 'admin-config/lib/Entry';\n\nexport default class ListController {\n    constructor($scope, $stateParams, $location, $anchorScroll, ReadQueries, progression, view, dataStore, totalItems) {\n        this.$scope = $scope;\n        this.$stateParams = $stateParams;\n        this.$location = $location;\n        this.$anchorScroll = $anchorScroll;\n        this.ReadQueries = ReadQueries;\n        this.progression = progression;\n        this.view = view;\n        this.entity = view.getEntity();\n        this.loadingPage = false;\n        this.search = $stateParams.search;\n        this.dataStore = dataStore;\n        this.fields = view.fields();\n        this.listActions = view.listActions();\n        this.totalItems = totalItems;\n        this.page = $stateParams.page || 1;\n        this.infinitePagination = this.view.infinitePagination();\n        this.entryCssClasses = this.view.getEntryCssClasses.bind(this.view);\n        this.nextPageCallback = this.nextPage.bind(this);\n        this.setPageCallback = this.setPage.bind(this);\n        this.sortField = this.$stateParams.sortField || this.view.getSortFieldName();\n        this.sortDir = this.$stateParams.sortDir || this.view.sortDir();\n        this.queryPromises = [];\n\n        if ($scope.selectionUpdater) {\n            $scope.selection = $scope.selection || [];\n            $scope.$watch('selection', $scope.selectionUpdater);\n        } else {\n            $scope.selection = null;\n        }\n\n        $scope.$on('$destroy', this.destroy.bind(this));\n    }\n\n    nextPage(page) {\n        if (this.loadingPage) {\n            return;\n        }\n\n        let view = this.view,\n            dataStore = this.dataStore;\n\n        this.progression.start();\n\n        const references = view.getReferences();\n        let data;\n\n        let queryPromise = this.ReadQueries\n            .getAll(view, page, this.search, this.sortField, this.sortDir)\n            .then(response => {\n                data = response.data;\n                return this.ReadQueries.getReferenceData(view.fields(), data);\n            })\n            .then((referenceData) => {\n                this.progression.done();\n\n                for (var name in referenceData) {\n                    Entry.createArrayFromRest(\n                        referenceData[name],\n                        [references[name].targetField()],\n                        references[name].targetEntity().name(),\n                        references[name].targetEntity().identifier().name()\n                    ).map(entry => dataStore.addEntry(references[name].targetEntity().uniqueId + '_values', entry));\n                }\n            })\n        this.queryPromises.push(queryPromise);\n        // make sure all preceding promises complete before loading data into store\n        Promise.all(this.queryPromises)\n            .then(() => {\n                view.mapEntries(data)\n                    .map(entry => {\n                        dataStore.fillReferencesValuesFromEntry(entry, references, true);\n                        dataStore.addEntry(this.entity.uniqueId, entry);\n                    });\n\n                this.loadingPage = false;\n            });\n    }\n\n    setPage(number) {\n        this.$location.search('page', number);\n        this.$anchorScroll(0);\n    }\n\n    destroy() {\n        this.$scope = undefined;\n        this.$stateParams = undefined;\n        this.$location = undefined;\n        this.$anchorScroll = undefined;\n        this.dataStore = undefined;\n    }\n}\n\nListController.$inject = ['$scope', '$stateParams', '$location', '$anchorScroll', 'ReadQueries', 'progression', 'view', 'dataStore', 'totalItems'];\n"]}
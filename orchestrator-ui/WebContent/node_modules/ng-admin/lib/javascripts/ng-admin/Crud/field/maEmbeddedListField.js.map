{"version":3,"sources":["../../../../../src/javascripts/ng-admin/Crud/field/maEmbeddedListField.js"],"names":["maEmbeddedListField","scope","restrict","link","pre","field","targetEntity","targetEntityName","name","targetFields","sortField","sortDir","filterFunc","permanentFilters","filters","filterKeys","Object","keys","entry","reduce","isFiltered","key","values","fields","entries","createArrayFromRest","value","identifier","sort","entry1","entry2","filter","addNew","push","createForFields","remove","e","$watch","newEntries","oldEntries","map","transformToRest","template","$inject"],"mappings":";;;;;kBAEwBA,mB;;AAFxB;;;;;;AAEe,SAASA,mBAAT,GAA+B;AAC1C,WAAO;AACHC,eAAO;AACH,qBAAS,GADN;AAEH,qBAAS,GAFN;AAGH,yBAAa;AAHV,SADJ;AAMHC,kBAAU,GANP;AAOHC,cAAM;AACFC,iBAAK,aAASH,KAAT,EAAgB;AACjB,oBAAMI,QAAQJ,MAAMI,KAAN,EAAd;AACA,oBAAMC,eAAeD,MAAMC,YAAN,EAArB;AACA,oBAAMC,mBAAmBD,aAAaE,IAAb,EAAzB;AACA,oBAAMC,eAAeJ,MAAMI,YAAN,EAArB;AACA,oBAAMC,YAAYL,MAAMK,SAAN,EAAlB;AACA,oBAAMC,UAAUN,MAAMM,OAAN,OAAoB,MAApB,GAA6B,CAAC,CAA9B,GAAkC,CAAlD;AACA,oBAAIC,UAAJ;AACA,oBAAIP,MAAMQ,gBAAN,EAAJ,EAA8B;AAAA;AAC1B,4BAAMC,UAAUT,MAAMQ,gBAAN,EAAhB;AACA,4BAAME,aAAaC,OAAOC,IAAP,CAAYH,OAAZ,CAAnB;AACAF,qCAAa,oBAACM,KAAD,EAAW;AACpB,mCAAOH,WAAWI,MAAX,CAAkB,UAACC,UAAD,EAAaC,GAAb;AAAA,uCAAqBD,cAAcF,MAAMI,MAAN,CAAaD,GAAb,MAAsBP,QAAQO,GAAR,CAAzD;AAAA,6BAAlB,EAAyF,IAAzF,CAAP;AACH,yBAFD;AAH0B;AAM7B,iBAND,MAMO;AACHT,iCAAa;AAAA,+BAAM,IAAN;AAAA,qBAAb;AACH;AACDX,sBAAMsB,MAAN,GAAed,YAAf;AACAR,sBAAMK,YAAN,GAAqBA,YAArB;AACAL,sBAAMuB,OAAN,GAAgB,gBACXC,mBADW,CACSxB,MAAMyB,KAAN,IAAe,EADxB,EAC4BjB,YAD5B,EAC0CF,gBAD1C,EAC4DD,aAAaqB,UAAb,GAA0BnB,IAA1B,EAD5D,EAEXoB,IAFW,CAEN,UAACC,MAAD,EAASC,MAAT,EAAoB;AACtB;AACA,wBAAID,OAAOP,MAAP,CAAcZ,SAAd,IAA2BoB,OAAOR,MAAP,CAAcZ,SAAd,CAA/B,EAAyD;AACrD,+BAAOC,OAAP;AACH;AACD,wBAAIkB,OAAOP,MAAP,CAAcZ,SAAd,IAA2BoB,OAAOR,MAAP,CAAcZ,SAAd,CAA/B,EAAyD;AACrD,+BAAO,CAAC,CAAD,GAAKC,OAAZ;AACH;AACD,2BAAO,CAAP;AACH,iBAXW,EAYXoB,MAZW,CAYJnB,UAZI,CAAhB;AAaAX,sBAAM+B,MAAN,GAAe;AAAA,2BAAM/B,MAAMuB,OAAN,CAAcS,IAAd,CAAmB,gBAAMC,eAAN,CAAsBzB,YAAtB,CAAnB,CAAN;AAAA,iBAAf;AACAR,sBAAMkC,MAAN,GAAe,iBAAS;AACpBlC,0BAAMuB,OAAN,GAAgBvB,MAAMuB,OAAN,CAAcO,MAAd,CAAqB;AAAA,+BAAKK,MAAMlB,KAAX;AAAA,qBAArB,CAAhB;AACH,iBAFD;AAGAjB,sBAAMoC,MAAN,CAAa,SAAb,EAAwB,UAACC,UAAD,EAAaC,UAAb,EAA4B;AAChD,wBAAID,eAAeC,UAAnB,EAA+B;AAC3B;AACH;AACDtC,0BAAMyB,KAAN,GAAcY,WAAWE,GAAX,CAAe;AAAA,+BAAKJ,EAAEK,eAAF,CAAkBhC,YAAlB,CAAL;AAAA,qBAAf,CAAd;AACH,iBALD,EAKG,IALH;AAMH;AA3CC,SAPH;AAoDHiC;AApDG,KAAP;AAsEH;;AAED1C,oBAAoB2C,OAApB,GAA8B,EAA9B","file":"maEmbeddedListField.js","sourcesContent":["import Entry from 'admin-config/lib/Entry';\n\nexport default function maEmbeddedListField() {\n    return {\n        scope: {\n            'field': '&',\n            'value': '=',\n            'datastore': '&'\n        },\n        restrict: 'E',\n        link: {\n            pre: function(scope) {\n                const field = scope.field();\n                const targetEntity = field.targetEntity();\n                const targetEntityName = targetEntity.name();\n                const targetFields = field.targetFields();\n                const sortField = field.sortField();\n                const sortDir = field.sortDir() === 'DESC' ? -1 : 1;\n                var filterFunc;\n                if (field.permanentFilters()) {\n                    const filters = field.permanentFilters();\n                    const filterKeys = Object.keys(filters);\n                    filterFunc = (entry) => {\n                        return filterKeys.reduce((isFiltered, key) => isFiltered && entry.values[key] === filters[key], true);\n                    };\n                } else {\n                    filterFunc = () => true;\n                }\n                scope.fields = targetFields;\n                scope.targetEntity = targetEntity;\n                scope.entries = Entry\n                    .createArrayFromRest(scope.value || [], targetFields, targetEntityName, targetEntity.identifier().name())\n                    .sort((entry1, entry2) => {\n                        // use < and > instead of substraction to sort strings properly\n                        if (entry1.values[sortField] > entry2.values[sortField]) {\n                            return sortDir;\n                        }\n                        if (entry1.values[sortField] < entry2.values[sortField]) {\n                            return -1 * sortDir;\n                        }\n                        return 0;\n                    })\n                    .filter(filterFunc);\n                scope.addNew = () => scope.entries.push(Entry.createForFields(targetFields));\n                scope.remove = entry => {\n                    scope.entries = scope.entries.filter(e => e !== entry);\n                };\n                scope.$watch('entries', (newEntries, oldEntries) => {\n                    if (newEntries === oldEntries) {\n                        return;\n                    }\n                    scope.value = newEntries.map(e => e.transformToRest(targetFields));\n                }, true);\n            }\n        },\n        template: `\n<div class=\"row\"><div class=\"col-sm-12\">\n    <ng-form ng-repeat=\"entry in entries track by $index\" class=\"subentry\" name=\"subform_{{$index}}\" ng-init=\"formName = 'subform_' + $index\">\n        <div class=\"remove_button_container\">\n            <a class=\"btn btn-default btn-sm\" ng-click=\"remove(entry)\"><span class=\"glyphicon glyphicon-minus-sign\" aria-hidden=\"true\"></span>&nbsp;<span translate=\"REMOVE\"></span></a>\n        </div>\n        <div class=\"form-field form-group\" ng-repeat=\"field in ::fields track by $index\">\n            <ma-field field=\"::field\" value=\"entry.values[field.name()]\" entry=\"entry\" entity=\"::targetEntity\" form=\"formName\" datastore=\"::datastore()\"></ma-field>\n        </div>\n        <hr/>\n    </ng-form>\n    <div class=\"form-group\">\n        <div class=\"col-sm-offset-2 col-sm-10\">\n            <a class=\"btn btn-default btn-sm\" ng-click=\"addNew()\"><span class=\"glyphicon glyphicon-plus-sign\" aria-hidden=\"true\"></span>&nbsp;<span translate=\"ADD_NEW\" translate-values=\"{ name: field().label().toLowerCase() }\"></span></a>\n        </div>\n    </div>\n</div></div>`\n    };\n}\n\nmaEmbeddedListField.$inject = [];\n"]}
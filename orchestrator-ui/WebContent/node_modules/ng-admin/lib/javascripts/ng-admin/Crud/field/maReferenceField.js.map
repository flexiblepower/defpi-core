{"version":3,"sources":["../../../../../src/javascripts/ng-admin/Crud/field/maReferenceField.js"],"names":["maReferenceField","ReferenceRefresher","scope","restrict","link","field","identifierName","targetEntity","identifier","name","v","validation","remoteComplete","initialEntries","datastore","getEntries","uniqueId","value","isCurrentValueInInitialEntries","filter","e","identifierValue","length","unshift","find","entry","values","initialChoices","map","label","targetField","$broadcast","choices","refresh","search","then","addCurrentChoice","results","isCurrentValueInEntries","currentEntry","formattedResults","template","$inject"],"mappings":"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","file":"maReferenceField.js","sourcesContent":["export default function maReferenceField(ReferenceRefresher) {\n    return {\n        scope: {\n            'field': '&',\n            'value': '=',\n            'entry':  '=?',\n            'datastore': '&?'\n        },\n        restrict: 'E',\n        link: function(scope) {\n            const field = scope.field();\n            const identifierName = field.targetEntity().identifier().name()\n            scope.name = field.name();\n            scope.v = field.validation();\n\n            if (!field.remoteComplete()) {\n                // fetch choices from the datastore, populated during routing resolve\n                let initialEntries = scope.datastore()\n                    .getEntries(field.targetEntity().uniqueId + '_choices');\n                if (scope.value) {\n                    const isCurrentValueInInitialEntries = initialEntries.filter(e => e.identifierValue === scope.value).length > 0;\n                    if (!isCurrentValueInInitialEntries) {\n                        initialEntries.unshift(scope.datastore()\n                            .getEntries(field.targetEntity().uniqueId + '_values')\n                            .find(entry => entry.values[identifierName] == scope.value)\n                        );\n                    }\n                }\n                const initialChoices = initialEntries.map(entry => ({\n                    value: entry.values[identifierName],\n                    label: entry.values[field.targetField().name()]\n                }));\n                scope.$broadcast('choices:update', { choices: initialChoices });\n            } else {\n                // ui-select doesn't allow to prepopulate autocomplete selects, see https://github.com/angular-ui/ui-select/issues/1197\n                // let ui-select fetch the options using the ReferenceRefresher\n                scope.refresh = function refresh(search) {\n                    return ReferenceRefresher.refresh(field, scope.value, search)\n                        .then(function addCurrentChoice(results) {\n                            if (!search && scope.value) {\n                                const isCurrentValueInEntries = results.filter(e => e.value === scope.value).length > 0;\n                                if (!isCurrentValueInEntries) {\n                                    const currentEntry = scope.datastore()\n                                        .getEntries(field.targetEntity().uniqueId + '_values')\n                                        .find(entry => entry.values[identifierName] == scope.value);\n                                    results.unshift({\n                                        value: currentEntry.values[identifierName],\n                                        label: currentEntry.values[field.targetField().name()]\n                                    });\n                                }\n                            }\n                            return results;\n                        })\n                        .then(formattedResults => {\n                            scope.$broadcast('choices:update', { choices: formattedResults });\n                        });\n                };\n            }\n        },\n        template: `<ma-choice-field\n                field=\"field()\"\n                datastore=\"datastore()\"\n                refresh=\"refresh($search)\"\n                value=\"value\">\n            </ma-choice-field>`\n    };\n}\n\nmaReferenceField.$inject = ['ReferenceRefresher'];\n"]}
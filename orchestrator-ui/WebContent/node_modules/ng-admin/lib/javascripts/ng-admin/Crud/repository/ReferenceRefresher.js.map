{"version":3,"sources":["../../../../../src/javascripts/ng-admin/Crud/repository/ReferenceRefresher.js"],"names":["ReferenceRefresher","ReadQueries","field","currentValue","search","referenceFields","name","promise","getAllReferencedData","then","r","_transformRecords","results","type","_removeDuplicates","formattedResults","Array","isArray","filter","indexOf","fr","value","records","targetEntity","targetField","valueFieldName","identifier","labelFieldName","createArrayFromRest","map","values","label","$inject"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEqBA,kB;AACjB,gCAAYC,WAAZ,EAAyB;AAAA;;AACrB,aAAKA,WAAL,GAAmBA,WAAnB;AACH;;;;gCAEOC,K,EAAOC,Y,EAAcC,M,EAAQ;AAAA;;AACjC,gBAAIC,kBAAkB,EAAtB;AACAA,4BAAgBH,MAAMI,IAAN,EAAhB,IAAgCJ,KAAhC;;AAEA,gBAAIK,UAAU,KAAKN,WAAL,CAAiBO,oBAAjB,CAAsCH,eAAtC,EAAuDD,MAAvD,EACTK,IADS,CACJ;AAAA,uBAAKC,EAAER,MAAMI,IAAN,EAAF,CAAL;AAAA,aADI,EAETG,IAFS,CAEJ;AAAA,uBAAW,MAAKE,iBAAL,CAAuBT,KAAvB,EAA8BU,OAA9B,CAAX;AAAA,aAFI,CAAd;;AAIA,gBAAIV,MAAMW,IAAN,OAAiB,gBAAjB,IAAqCX,MAAMW,IAAN,OAAiB,SAA1D,EAAqE;AACjEN,0BAAUA,QAAQE,IAAR,CAAa;AAAA,2BAAoB,MAAKK,iBAAL,CAAuBC,gBAAvB,EAAyCZ,YAAzC,CAApB;AAAA,iBAAb,CAAV;AACH;;AAED,mBAAOI,OAAP;AACH;;;0CAEiBK,O,EAAST,Y,EAAc;AACrC;AACA,gBAAI,CAACA,YAAL,EAAmB;AACf,uBAAOS,OAAP;AACH;;AAED,gBAAI,CAACI,MAAMC,OAAN,CAAcd,YAAd,CAAL,EAAkC;AAC9BA,+BAAe,CAACA,YAAD,CAAf;AACH;;AAED,mBAAOS,QAAQM,MAAR,CAAe;AAAA,uBAAMf,aAAagB,OAAb,CAAqBC,GAAGC,KAAxB,MAAmC,CAAC,CAA1C;AAAA,aAAf,CAAP;AACH;;;0CAEiBnB,K,EAAOoB,O,EAAS;AAC9B,gBAAIC,eAAerB,MAAMqB,YAAN,EAAnB;AACA,gBAAIC,cAActB,MAAMsB,WAAN,EAAlB;AACA,gBAAIC,iBAAiBF,aAAaG,UAAb,GAA0BpB,IAA1B,EAArB;AACA,gBAAIqB,iBAAiBH,YAAYlB,IAAZ,EAArB;AACA,mBAAO,gBAAMsB,mBAAN,CACHN,OADG,EAEH,CAACE,WAAD,CAFG,EAGHD,aAAajB,IAAb,EAHG,EAIHmB,cAJG,EAKLI,GALK,CAKD,UAASnB,CAAT,EAAY;AACd,uBAAO;AACHW,2BAAOX,EAAEoB,MAAF,CAASL,cAAT,CADJ;AAEHM,2BAAOrB,EAAEoB,MAAF,CAASH,cAAT;AAFJ,iBAAP;AAIH,aAVM,CAAP;AAWH;;;;;;kBAjDgB3B,kB;;;AAoDrBA,mBAAmBgC,OAAnB,GAA6B,CAAC,aAAD,CAA7B","file":"ReferenceRefresher.js","sourcesContent":["import Entry from 'admin-config/lib/Entry'\n\nexport default class ReferenceRefresher {\n    constructor(ReadQueries) {\n        this.ReadQueries = ReadQueries;\n    }\n\n    refresh(field, currentValue, search) {\n        var referenceFields = {};\n        referenceFields[field.name()] = field;\n\n        var promise = this.ReadQueries.getAllReferencedData(referenceFields, search)\n            .then(r => r[field.name()])\n            .then(results => this._transformRecords(field, results));\n\n        if (field.type() === 'reference_many' || field.type() === 'choices') {\n            promise = promise.then(formattedResults => this._removeDuplicates(formattedResults, currentValue));\n        }\n\n        return promise;\n    }\n\n    _removeDuplicates(results, currentValue) {\n        // remove already assigned values: ui-select still return them if multiple\n        if (!currentValue) {\n            return results;\n        }\n\n        if (!Array.isArray(currentValue)) {\n            currentValue = [currentValue];\n        }\n\n        return results.filter(fr => currentValue.indexOf(fr.value) === -1);\n    }\n\n    _transformRecords(field, records) {\n        var targetEntity = field.targetEntity();\n        var targetField = field.targetField();\n        var valueFieldName = targetEntity.identifier().name();\n        var labelFieldName = targetField.name();\n        return Entry.createArrayFromRest(\n            records,\n            [targetField],\n            targetEntity.name(),\n            valueFieldName\n        ).map(function(r) {\n            return {\n                value: r.values[valueFieldName],\n                label: r.values[labelFieldName]\n            };\n        });\n    }\n}\n\nReferenceRefresher.$inject = ['ReadQueries'];\n"]}
{"version":3,"sources":["../../../../../src/javascripts/ng-admin/Crud/button/maExportToCsvButton.js"],"names":["maExportToCsvButton","$stateParams","Papa","notification","AdminDescription","entryFormatter","ReadQueries","restrict","scope","entity","label","datastore","link","exportView","listView","fields","length","exportFields","filters","name","has_export","formatEntry","getFormatter","exportToCsv","rawEntries","getAll","search","sortField","sortDir","then","response","data","getReferenceData","references","getReferences","referenceData","getEntryConstructor","createArrayFromRest","targetField","targetEntity","identifier","map","addEntry","uniqueId","entry","entries","mapEntries","fillReferencesValuesFromCollection","results","i","csv","unparse","exportOptions","fakeLink","document","createElement","body","appendChild","blobName","window","navigator","msSaveOrOpenBlob","blob","Blob","type","setAttribute","encodeURIComponent","click","error","log","message","addnCls","template","$inject"],"mappings":";;;;;kBAAwBA,mB;AAAT,SAASA,mBAAT,CAA8BC,YAA9B,EAA4CC,IAA5C,EAAkDC,YAAlD,EAAgEC,gBAAhE,EAAkFC,cAAlF,EAAkGC,WAAlG,EAA+G;AAC1H,WAAO;AACHC,kBAAU,GADP;AAEHC,eAAO;AACHC,oBAAQ,GADL;AAEHC,mBAAO,GAFJ;AAGHC,uBAAW;AAHR,SAFJ;AAOHC,cAAM,cAASJ,KAAT,EAAgB;AAClBA,kBAAME,KAAN,GAAcF,MAAME,KAAN,IAAe,QAA7B;AACAF,kBAAMG,SAAN,GAAkBH,MAAMG,SAAN,EAAlB;AACAH,kBAAMC,MAAN,GAAeD,MAAMC,MAAN,EAAf;AACA,gBAAII,aAAaL,MAAMC,MAAN,CAAaI,UAAb,EAAjB;AACA,gBAAIC,WAAWN,MAAMC,MAAN,CAAaK,QAAb,EAAf;AACA,gBAAID,WAAWE,MAAX,GAAoBC,MAApB,KAA+B,CAAnC,EAAsC;AAClC,oBAAIC,eAAeH,SAASG,YAAT,EAAnB;AACA,oBAAIA,iBAAiB,IAArB,EAA2B;AACvBA,mCAAeH,SAASC,MAAT,EAAf;AACH;AACDF,2BAAWE,MAAX,CAAkBE,YAAlB;AACAJ,2BAAWK,OAAX,CAAmBJ,SAASI,OAAT,EAAnB;AACAL,2BAAWM,IAAX,CAAgBL,SAASK,IAAT,EAAhB,EAPkC,CAOA;AACrC;AACDX,kBAAMY,UAAN,GAAmBP,WAAWE,MAAX,GAAoBC,MAApB,GAA6B,CAAhD;AACA,gBAAIK,cAAchB,eAAeiB,YAAf,CAA4BT,WAAWE,MAAX,EAA5B,CAAlB;;AAEAP,kBAAMe,WAAN,GAAoB,YAAY;AAC5B,oBAAIC,UAAJ;;AAEAlB,4BAAYmB,MAAZ,CAAmBZ,UAAnB,EAA+B,CAAC,CAAhC,EAAmCZ,aAAayB,MAAhD,EAAwDzB,aAAa0B,SAArE,EAAgF1B,aAAa2B,OAA7F,EACKC,IADL,CACU,oBAAY;AACdL,iCAAaM,SAASC,IAAtB;AACA,2BAAOP,UAAP;AACH,iBAJL,EAKKK,IALL,CAKU;AAAA,2BAAcvB,YAAY0B,gBAAZ,CAA6BnB,WAAWE,MAAX,EAA7B,EAAkDS,UAAlD,CAAd;AAAA,iBALV,EAMKK,IANL,CAMU,yBAAiB;AACnB,wBAAMI,aAAapB,WAAWqB,aAAX,EAAnB;AACA,yBAAK,IAAIf,IAAT,IAAiBgB,aAAjB,EAAgC;AAC5B/B,yCAAiBgC,mBAAjB,GAAuCC,mBAAvC,CACIF,cAAchB,IAAd,CADJ,EAEI,CAACc,WAAWd,IAAX,EAAiBmB,WAAjB,EAAD,CAFJ,EAGIL,WAAWd,IAAX,EAAiBoB,YAAjB,GAAgCpB,IAAhC,EAHJ,EAIIc,WAAWd,IAAX,EAAiBoB,YAAjB,GAAgCC,UAAhC,GAA6CrB,IAA7C,EAJJ,EAKEsB,GALF,CAKM;AAAA,mCAASjC,MAAMG,SAAN,CAAgB+B,QAAhB,CAAyBT,WAAWd,IAAX,EAAiBoB,YAAjB,GAAgCI,QAAhC,GAA2C,SAApE,EAA+EC,KAA/E,CAAT;AAAA,yBALN;AAMH;AACJ,iBAhBL,EAiBKf,IAjBL,CAiBU,YAAY;AACd,wBAAIgB,UAAUhC,WAAWiC,UAAX,CAAsBtB,UAAtB,CAAd;;AAEA;AACAhB,0BAAMG,SAAN,CAAgBoC,kCAAhB,CAAmDF,OAAnD,EAA4DhC,WAAWqB,aAAX,EAA5D,EAAwF,IAAxF;;AAEA,wBAAIc,UAAU,EAAd;AACA,yBAAK,IAAIC,IAAIJ,QAAQ7B,MAAR,GAAiB,CAA9B,EAAiCiC,KAAK,CAAtC,EAAyCA,GAAzC,EAA8C;AAC1CD,gCAAQC,CAAR,IAAa5B,YAAYwB,QAAQI,CAAR,CAAZ,CAAb;AACH;AACD,wBAAIC,MAAMhD,KAAKiD,OAAL,CAAaH,OAAb,EAAsBlC,SAASsC,aAAT,EAAtB,CAAV;AACA,wBAAIC,WAAWC,SAASC,aAAT,CAAuB,GAAvB,CAAf;AACAD,6BAASE,IAAT,CAAcC,WAAd,CAA0BJ,QAA1B;;AAEA,wBAAMK,WAAclD,MAAMC,MAAN,CAAaU,IAAb,EAAd,SAAN;;AAEA,wBAAIwC,OAAOC,SAAP,IAAoBD,OAAOC,SAAP,CAAiBC,gBAAzC,EAA2D;AAAE;AACzD,4BAAIC,OAAO,IAAIC,IAAJ,CAAS,CAACb,GAAD,CAAT,EAAgB,EAAEc,MAAM,UAAR,EAAhB,CAAX;AACAL,+BAAOC,SAAP,CAAiBC,gBAAjB,CAAkCC,IAAlC,EAAwCJ,QAAxC;AACH,qBAHD,MAGO;AACHL,iCAASY,YAAT,CAAsB,MAAtB,EAA8B,iDAAiDC,mBAAmBhB,GAAnB,CAA/E;AACAG,iCAASY,YAAT,CAAsB,UAAtB,EAAkCP,QAAlC;AACAL,iCAASc,KAAT;AACH;AACJ,iBAzCL,EAyCO,UAAUC,KAAV,EAAiB;AAChBjE,iCAAakE,GAAb,CAAiBD,MAAME,OAAvB,EAAgC,EAACC,SAAS,qBAAV,EAAhC;AACH,iBA3CL;AA4CH,aA/CD;AAgDH,SAzEE;AA0EHC;AA1EG,KAAP;AAiFH;;AAEDxE,oBAAoByE,OAApB,GAA8B,CAAC,cAAD,EAAiB,MAAjB,EAAyB,cAAzB,EAAyC,kBAAzC,EAA6D,gBAA7D,EAA+E,aAA/E,CAA9B","file":"maExportToCsvButton.js","sourcesContent":["export default function maExportToCsvButton ($stateParams, Papa, notification, AdminDescription, entryFormatter, ReadQueries) {\n    return {\n        restrict: 'E',\n        scope: {\n            entity: '&',\n            label: '@',\n            datastore: '&'\n        },\n        link: function(scope) {\n            scope.label = scope.label || 'EXPORT';\n            scope.datastore = scope.datastore();\n            scope.entity = scope.entity();\n            var exportView = scope.entity.exportView();\n            var listView = scope.entity.listView();\n            if (exportView.fields().length === 0) {\n                var exportFields = listView.exportFields();\n                if (exportFields === null) {\n                    exportFields = listView.fields();\n                }\n                exportView.fields(exportFields);\n                exportView.filters(listView.filters());\n                exportView.name(listView.name()); // to enable reuse of sortField\n            }\n            scope.has_export = exportView.fields().length > 0;\n            var formatEntry = entryFormatter.getFormatter(exportView.fields());\n\n            scope.exportToCsv = function () {\n                var rawEntries;\n\n                ReadQueries.getAll(exportView, -1, $stateParams.search, $stateParams.sortField, $stateParams.sortDir)\n                    .then(response => {\n                        rawEntries = response.data;\n                        return rawEntries;\n                    })\n                    .then(rawEntries => ReadQueries.getReferenceData(exportView.fields(), rawEntries))\n                    .then(referenceData => {\n                        const references = exportView.getReferences();\n                        for (var name in referenceData) {\n                            AdminDescription.getEntryConstructor().createArrayFromRest(\n                                referenceData[name],\n                                [references[name].targetField()],\n                                references[name].targetEntity().name(),\n                                references[name].targetEntity().identifier().name()\n                            ).map(entry => scope.datastore.addEntry(references[name].targetEntity().uniqueId + '_values', entry));\n                        }\n                    })\n                    .then(function () {\n                        var entries = exportView.mapEntries(rawEntries);\n\n                        // shortcut to diplay collection of entry with included referenced values\n                        scope.datastore.fillReferencesValuesFromCollection(entries, exportView.getReferences(), true);\n\n                        var results = [];\n                        for (var i = entries.length - 1; i >= 0; i--) {\n                            results[i] = formatEntry(entries[i]);\n                        }\n                        var csv = Papa.unparse(results, listView.exportOptions());\n                        var fakeLink = document.createElement('a');\n                        document.body.appendChild(fakeLink);\n\n                        const blobName = `${scope.entity.name()}.csv`;\n\n                        if (window.navigator && window.navigator.msSaveOrOpenBlob) { // Manage IE11+ & Edge\n                            var blob = new Blob([csv], { type: 'text/csv' });\n                            window.navigator.msSaveOrOpenBlob(blob, blobName);\n                        } else {\n                            fakeLink.setAttribute('href', 'data:application/octet-stream;charset=utf-8,' + encodeURIComponent(csv));\n                            fakeLink.setAttribute('download', blobName);\n                            fakeLink.click();\n                        }\n                    }, function (error) {\n                        notification.log(error.message, {addnCls: 'humane-flatty-error'});\n                    });\n            };\n        },\n        template:\n`<span ng-if=\"has_export\">\n    <a class=\"btn btn-default\" ng-click=\"exportToCsv()\">\n        <span class=\"glyphicon glyphicon-download\" aria-hidden=\"true\"></span>&nbsp;<span class=\"hidden-xs\" translate=\"{{ ::label }}\"></span>\n    </a>\n</span>`\n    };\n}\n\nmaExportToCsvButton.$inject = ['$stateParams', 'Papa', 'notification', 'AdminDescription', 'EntryFormatter', 'ReadQueries'];\n"]}
{"version":3,"sources":["../../../../../src/javascripts/ng-admin/Crud/form/FormController.js"],"names":["FormController","$scope","$state","$injector","$translate","previousState","WriteQueries","Configuration","progression","notification","view","dataStore","HttpErrorService","title","description","actions","fields","config","entity","getEntity","entry","getFirstEntry","uniqueId","originEntityId","values","identifier","name","$on","destroy","bind","form","$valid","then","log","text","addnCls","validate","error","$event","preventDefault","validateEntry","Promise","reject","route","showView","enabled","restEntry","transformToRest","fromState","current","fromParams","params","toState","get","toParams","id","identifierValue","start","resolve","createOne","mapEntry","rawEntry","onSubmitSuccess","invoke","controller","customHandlerReturnValue","innerResolve","go","done","catch","onSubmitError","handleError","updateOne","undefined","$inject"],"mappings":"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","file":"FormController.js","sourcesContent":["export default class FormController {\n    constructor($scope, $state, $injector, $translate, previousState, WriteQueries, Configuration, progression, notification, view, dataStore, HttpErrorService) {\n        this.$scope = $scope;\n        this.$state = $state;\n        this.$injector = $injector;\n        this.$translate = $translate;\n        this.previousState = previousState;\n        this.WriteQueries = WriteQueries;\n        this.dataStore = dataStore;\n        this.progression = progression;\n        this.notification = notification;\n        this.title = view.title();\n        this.description = view.description();\n        this.actions = view.actions();\n        this.fields = view.fields();\n        this.config = Configuration();\n        this.view = view;\n        this.entity = this.view.getEntity();\n        this.$scope.entry = dataStore.getFirstEntry(this.entity.uniqueId);\n        this.$scope.view = view;\n        this.$scope.entity = this.entity;\n        this.HttpErrorService = HttpErrorService;\n\n        // in case of entity identifier being modified\n        this.originEntityId = this.$scope.entry.values[this.entity.identifier().name()];\n\n        $scope.$on('$destroy', this.destroy.bind(this));\n    }\n\n    validateEntry() {\n        if (!this.form.$valid) {\n            this.$translate('INVALID_FORM').then(text => this.notification.log(text, { addnCls: 'humane-flatty-error' }));\n            return false;\n        }\n\n        try {\n            this.view.validate(this.$scope.entry);\n        } catch (error) {\n            this.notification.log(error, { addnCls: 'humane-flatty-error' });\n            return false;\n        }\n\n        return true;\n    }\n\n    submitCreation($event) {\n        $event.preventDefault();\n        if (!this.validateEntry()) {\n            return Promise.reject();\n        }\n        const { entity, view, $state, progression, notification, $translate } = this;\n        var route = entity.showView().enabled ? 'show' : 'list';\n        var restEntry = this.$scope.entry.transformToRest(view.fields());\n        const fromState = $state.current.name;\n        const fromParams = $state.current.params;\n        const toState = $state.get(route);\n        var entry = null;\n        const toParams = () => ({\n            entity: entity.name(),\n            id: entry ? entry.identifierValue : null,\n        });\n        progression.start();\n\n        return new Promise((resolve, reject) => {\n            return this.WriteQueries\n                .createOne(view, restEntry)\n                .then(rawEntry => {\n                    entry = view.mapEntry(rawEntry);\n                    return entry;\n                })\n                .then(entry => view.onSubmitSuccess() && this.$injector.invoke(\n                    view.onSubmitSuccess(),\n                    view,\n                    { $event, entity, entry, route, controller: this, form: this.form, progression, notification }\n                ))\n                .then(customHandlerReturnValue => (customHandlerReturnValue === false) ?\n                    new Promise(innerResolve => innerResolve()) :\n                    $state.go(toState, toParams())\n                )\n                .then(() => progression.done())\n                .then(() => $translate('CREATION_SUCCESS'))\n                .then(text => notification.log(text, { addnCls: 'humane-flatty-success' }))\n                .then(() => {\n                    resolve();\n                })\n                .catch(error => {\n                    const customHandlerReturnValue = view.onSubmitError() && this.$injector.invoke(\n                        view.onSubmitError(),\n                        view,\n                        { $event, error, entity, entry, route, controller: this, form: this.form, progression, notification }\n                    );\n                    if (customHandlerReturnValue === false) return;\n                    progression.done();\n                    this.HttpErrorService.handleError($event, toState, toParams(), fromState, fromParams, error);\n                    reject();\n                });\n        });\n    }\n\n    submitEdition($event) {\n        $event.preventDefault();\n        if (!this.validateEntry()) {\n            return;\n        }\n        const { view, $state, previousState, progression, notification, $translate } = this;\n        const restEntry = this.$scope.entry.transformToRest(view.fields());\n        const fromState = $state.current.name;\n        const fromParams = $state.current.params;\n        const toState =previousState.name;\n        let entry = null;\n        const toParams = previousState.params;\n        progression.start();\n        return new Promise((resolve, reject) => {\n            return this.WriteQueries\n                .updateOne(view, restEntry, this.originEntityId)\n                .then(rawEntry => {\n                    entry = view.mapEntry(rawEntry);\n                    return entry;\n                })\n                .then(entry => view.onSubmitSuccess() && this.$injector.invoke(\n                    view.onSubmitSuccess(),\n                    view,\n                    { $event, entity: this.entity, entry, controller: this, form: this.form, progression, notification }\n                ))\n                .then(customHandlerReturnValue => {\n                    if (customHandlerReturnValue === false) return;\n                    $state.go(toState, toParams)\n                        .then(() => progression.done())\n                        .then(() => $translate('EDITION_SUCCESS'))\n                        .then(text => notification.log(text, { addnCls: 'humane-flatty-success' }));\n                })\n                .then(() => {\n                    resolve();\n                })\n                .catch(error => {\n                    const customHandlerReturnValue = view.onSubmitError() && this.$injector.invoke(\n                        view.onSubmitError(),\n                        view,\n                        { $event, error, entity: this.entity, entry, controller: this, form: this.form, progression, notification }\n                    );\n                    if (customHandlerReturnValue === false) return;\n                    progression.done();\n                    this.HttpErrorService.handleError($event, toState, toParams, fromState, fromParams, error);\n                    reject();\n                });\n        });\n\n    }\n\n    destroy() {\n        this.$scope = undefined;\n        this.$state = undefined;\n        this.$injector = undefined;\n        this.$translate = undefined;\n        this.previousState = undefined;\n        this.WriteQueries = undefined;\n        this.dataStore = undefined;\n        this.view = undefined;\n        this.entity = undefined;\n    }\n}\n\nFormController.$inject = ['$scope', '$state', '$injector', '$translate', 'previousState', 'WriteQueries', 'NgAdminConfiguration', 'progression', 'notification', 'view', 'dataStore', 'HttpErrorService'];\n"]}
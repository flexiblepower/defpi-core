{"version":3,"sources":["../../../../../src/javascripts/ng-admin/Crud/form/FormController.js"],"names":["FormController","$scope","$state","$injector","$translate","previousState","WriteQueries","Configuration","progression","notification","view","dataStore","title","description","actions","fields","config","entity","getEntity","entry","getFirstEntry","uniqueId","originEntityId","values","identifier","name","$on","destroy","bind","form","$valid","then","log","text","addnCls","validate","error","$event","preventDefault","validateEntry","route","showView","enabled","restEntry","transformToRest","start","createOne","mapEntry","rawEntry","onSubmitSuccess","invoke","controller","customHandlerReturnValue","Promise","resolve","go","get","id","identifierValue","done","catch","errorMessage","getErrorMessageFor","onSubmitError","status","details","data","JSON","stringify","angular","identity","updateOne","params","undefined","$inject"],"mappings":"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","file":"FormController.js","sourcesContent":["export default class FormController {\n    constructor($scope, $state, $injector, $translate, previousState, WriteQueries, Configuration, progression, notification, view, dataStore) {\n        this.$scope = $scope;\n        this.$state = $state;\n        this.$injector = $injector;\n        this.$translate = $translate;\n        this.previousState = previousState;\n        this.WriteQueries = WriteQueries;\n        this.dataStore = dataStore;\n        this.progression = progression;\n        this.notification = notification;\n        this.title = view.title();\n        this.description = view.description();\n        this.actions = view.actions();\n        this.fields = view.fields();\n        this.config = Configuration();\n        this.view = view;\n        this.entity = this.view.getEntity();\n        this.$scope.entry = dataStore.getFirstEntry(this.entity.uniqueId);\n        this.$scope.view = view;\n        this.$scope.entity = this.entity;\n\n        // in case of entity identifier being modified\n        this.originEntityId = this.$scope.entry.values[this.entity.identifier().name()];\n\n        $scope.$on('$destroy', this.destroy.bind(this));\n    }\n\n    validateEntry() {\n        if (!this.form.$valid) {\n            this.$translate('INVALID_FORM').then(text => this.notification.log(text, { addnCls: 'humane-flatty-error' }));\n            return false;\n        }\n\n        try {\n            this.view.validate(this.$scope.entry);\n        } catch (error) {\n            this.notification.log(error, { addnCls: 'humane-flatty-error' });\n            return false;\n        }\n\n        return true;\n    }\n\n    submitCreation($event) {\n        $event.preventDefault();\n        if (!this.validateEntry()) {\n            return;\n        }\n        const { entity, view, $state, progression, notification, $translate } = this;\n        var route = entity.showView().enabled ? 'show' : 'list';\n        var restEntry = this.$scope.entry.transformToRest(view.fields());\n        var entry = null;\n        progression.start();\n        this.WriteQueries\n            .createOne(view, restEntry)\n            .then(rawEntry => {\n                entry = view.mapEntry(rawEntry);\n                return entry;\n            })\n            .then(entry => view.onSubmitSuccess() && this.$injector.invoke(\n                view.onSubmitSuccess(),\n                view,\n                { $event, entity, entry, route, controller: this, form: this.form, progression, notification }\n            ))\n            .then(customHandlerReturnValue => (customHandlerReturnValue === false) ?\n                new Promise(resolve => resolve()) :\n                $state.go(this.$state.get(route), { entity: entity.name(), id: entry.identifierValue })\n            )\n            .then(() => progression.done())\n            .then(() => $translate('CREATION_SUCCESS'))\n            .then(text => notification.log(text, { addnCls: 'humane-flatty-success' }))\n            .catch(error => {\n                const errorMessage = this.config.getErrorMessageFor(this.view, error) || 'ERROR_MESSAGE';\n                const customHandlerReturnValue = view.onSubmitError() && this.$injector.invoke(\n                    view.onSubmitError(),\n                    view,\n                    { $event, error, errorMessage, entity, entry, route, controller: this, form: this.form, progression, notification }\n                );\n                if (customHandlerReturnValue === false) return;\n                progression.done();\n                $translate(errorMessage, {\n                    status: error && error.status,\n                    details: error && error.data && typeof error.data === 'object' ? JSON.stringify(error.data) : {}\n                })\n                    .catch(angular.identity) // See https://github.com/angular-translate/angular-translate/issues/1516\n                    .then(text => notification.log(text, { addnCls: 'humane-flatty-error' }));\n            });\n    }\n\n    submitEdition($event) {\n        $event.preventDefault();\n        if (!this.validateEntry()) {\n            return;\n        }\n        const { view, $state, previousState, progression, notification, $translate } = this;\n        var restEntry = this.$scope.entry.transformToRest(view.fields());\n        var entry = null;\n        progression.start();\n        this.WriteQueries\n            .updateOne(view, restEntry, this.originEntityId)\n            .then(rawEntry => {\n                entry = view.mapEntry(rawEntry);\n                return entry;\n            })\n            .then(entry => view.onSubmitSuccess() && this.$injector.invoke(\n                view.onSubmitSuccess(),\n                view,\n                { $event, entity: this.entity, entry, controller: this, form: this.form, progression, notification }\n            ))\n            .then(customHandlerReturnValue => {\n                if (customHandlerReturnValue === false) return;\n                $state.go(previousState.name, previousState.params)\n                    .then(() => progression.done())\n                    .then(() => $translate('EDITION_SUCCESS'))\n                    .then(text => notification.log(text, { addnCls: 'humane-flatty-success' }));\n            })\n            .catch(error => {\n                const errorMessage = this.config.getErrorMessageFor(this.view, error) || 'ERROR_MESSAGE';\n                const customHandlerReturnValue = view.onSubmitError() && this.$injector.invoke(\n                    view.onSubmitError(),\n                    view,\n                    { $event, error, errorMessage, entity: this.entity, entry, controller: this, form: this.form, progression, notification }\n                );\n                if (customHandlerReturnValue === false) return;\n                progression.done();\n                $translate(errorMessage, {\n                    status: error && error.status,\n                    details: error && error.data && typeof error.data === 'object' ? JSON.stringify(error.data) : {}\n                })\n                    .catch(angular.identity) // See https://github.com/angular-translate/angular-translate/issues/1516\n                    .then(text => notification.log(text, { addnCls: 'humane-flatty-error' }));\n            });\n    }\n\n    destroy() {\n        this.$scope = undefined;\n        this.$state = undefined;\n        this.$injector = undefined;\n        this.$translate = undefined;\n        this.previousState = undefined;\n        this.WriteQueries = undefined;\n        this.dataStore = undefined;\n        this.view = undefined;\n        this.entity = undefined;\n    }\n}\n\nFormController.$inject = ['$scope', '$state', '$injector', '$translate', 'previousState', 'WriteQueries', 'NgAdminConfiguration', 'progression', 'notification', 'view', 'dataStore'];\n"]}
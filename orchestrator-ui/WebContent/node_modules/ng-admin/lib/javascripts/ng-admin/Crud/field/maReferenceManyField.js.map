{"version":3,"sources":["../../../../../src/javascripts/ng-admin/Crud/field/maReferenceManyField.js"],"names":["maReferenceManyField","ReferenceRefresher","scope","restrict","link","field","identifierName","targetEntity","identifier","name","v","validation","choices","setInitialChoices","initialEntries","value","length","map","isCurrentValueInInitialEntries","filter","e","identifierValue","push","datastore","getEntries","uniqueId","entry","values","pop","initialChoices","label","targetField","$broadcast","remoteComplete","refresh","search","then","formattedResults","template","$inject"],"mappings":";;;;;kBAAwBA,oB;AAAT,SAASA,oBAAT,CAA8BC,kBAA9B,EAAkD;AAC7D,WAAO;AACHC,eAAO;AACH,qBAAS,GADN;AAEH,qBAAS,GAFN;AAGH,qBAAU,IAHP;AAIH,yBAAa;AAJV,SADJ;AAOHC,kBAAU,GAPP;AAQHC,cAAM,cAASF,KAAT,EAAgB;AAClB,gBAAMG,QAAQH,MAAMG,KAAN,EAAd;AACA,gBAAMC,iBAAiBD,MAAME,YAAN,GAAqBC,UAArB,GAAkCC,IAAlC,EAAvB;AACAP,kBAAMO,IAAN,GAAaJ,MAAMI,IAAN,EAAb;AACAP,kBAAMQ,CAAN,GAAUL,MAAMM,UAAN,EAAV;AACAT,kBAAMU,OAAN,GAAgB,EAAhB;;AAEA,gBAAMC,oBAAoB,SAApBA,iBAAoB,CAACC,cAAD,EAAoB;AAC1C,oBAAIZ,MAAMa,KAAN,IAAeb,MAAMa,KAAN,CAAYC,MAA/B,EAAuC;AACnCd,0BAAMa,KAAN,CAAYE,GAAZ,CAAgB,UAACF,KAAD,EAAW;AACvB,4BAAMG,iCAAiCJ,eAAeK,MAAf,CAAsB;AAAA,mCAAKC,EAAEC,eAAF,KAAsBN,KAA3B;AAAA,yBAAtB,EAAwDC,MAAxD,GAAiE,CAAxG;AACA,4BAAID,SAAS,CAACG,8BAAd,EAA8C;AAC1CJ,2CAAeQ,IAAf,CAAoBpB,MAAMqB,SAAN,GACfC,UADe,CACJnB,MAAME,YAAN,GAAqBkB,QAArB,GAAgC,SAD5B,EAEfN,MAFe,CAER;AAAA,uCAASO,MAAMC,MAAN,CAAarB,cAAb,KAAgCS,KAAzC;AAAA,6BAFQ,EAGfa,GAHe,EAApB;AAKH;AACJ,qBATD;AAUH;AACD,oBAAMC,iBAAiBf,eAAeG,GAAf,CAAmB;AAAA,2BAAU;AAChDF,+BAAOW,MAAMC,MAAN,CAAarB,cAAb,CADyC;AAEhDwB,+BAAOJ,MAAMC,MAAN,CAAatB,MAAM0B,WAAN,GAAoBtB,IAApB,EAAb;AAFyC,qBAAV;AAAA,iBAAnB,CAAvB;AAIAP,sBAAM8B,UAAN,CAAiB,gBAAjB,EAAmC,EAAEpB,SAASiB,cAAX,EAAnC;AACH,aAlBD;;AAoBA,gBAAI,CAACxB,MAAM4B,cAAN,EAAL,EAA6B;AACzB;AACA,oBAAMnB,iBAAiBZ,MAAMqB,SAAN,GAClBC,UADkB,CACPnB,MAAME,YAAN,GAAqBkB,QAArB,GAAgC,UADzB,CAAvB;AAEAZ,kCAAkBC,cAAlB;AACH,aALD,MAKO;AACH,oBAAMA,kBAAiB,EAAvB;AACAD,kCAAkBC,eAAlB;;AAEA;AACA;AACAZ,sBAAMgC,OAAN,GAAgB,UAACC,MAAD,EAAY;AACxB,2BAAOlC,mBAAmBiC,OAAnB,CAA2B7B,KAA3B,EAAkCH,MAAMa,KAAxC,EAA+CoB,MAA/C,EACFC,IADE,CACG,4BAAoB;AACtBlC,8BAAM8B,UAAN,CAAiB,gBAAjB,EAAmC,EAAEpB,SAASyB,gBAAX,EAAnC;AACH,qBAHE,CAAP;AAIH,iBALD;AAMH;AACJ,SArDE;AAsDHC;AAtDG,KAAP;AA6DH;;AAEDtC,qBAAqBuC,OAArB,GAA+B,CAAC,oBAAD,CAA/B","file":"maReferenceManyField.js","sourcesContent":["export default function maReferenceManyField(ReferenceRefresher) {\n    return {\n        scope: {\n            'field': '&',\n            'value': '=',\n            'entry':  '=?',\n            'datastore': '&?'\n        },\n        restrict: 'E',\n        link: function(scope) {\n            const field = scope.field();\n            const identifierName = field.targetEntity().identifier().name();\n            scope.name = field.name();\n            scope.v = field.validation();\n            scope.choices = [];\n\n            const setInitialChoices = (initialEntries) => {\n                if (scope.value && scope.value.length) {\n                    scope.value.map((value) => {\n                        const isCurrentValueInInitialEntries = initialEntries.filter(e => e.identifierValue === value).length > 0;\n                        if (value && !isCurrentValueInInitialEntries) {\n                            initialEntries.push(scope.datastore()\n                                .getEntries(field.targetEntity().uniqueId + '_values')\n                                .filter(entry => entry.values[identifierName] == value)\n                                .pop()\n                            );\n                        }\n                    });\n                }\n                const initialChoices = initialEntries.map(entry => ({\n                    value: entry.values[identifierName],\n                    label: entry.values[field.targetField().name()]\n                }));\n                scope.$broadcast('choices:update', { choices: initialChoices });\n            }\n\n            if (!field.remoteComplete()) {\n                // fetch choices from the datastore\n                const initialEntries = scope.datastore()\n                    .getEntries(field.targetEntity().uniqueId + '_choices');\n                setInitialChoices(initialEntries);\n            } else {\n                const initialEntries = [];\n                setInitialChoices(initialEntries);\n\n                // ui-select doesn't allow to prepopulate autocomplete selects, see https://github.com/angular-ui/ui-select/issues/1197\n                // let ui-select fetch the options using the ReferenceRefresher\n                scope.refresh = (search) => {\n                    return ReferenceRefresher.refresh(field, scope.value, search)\n                        .then(formattedResults => {\n                            scope.$broadcast('choices:update', { choices: formattedResults });\n                        });\n                };\n            }\n        },\n        template: `<ma-choices-field\n                field=\"field()\"\n                datastore=\"datastore()\"\n                refresh=\"refresh($search)\"\n                value=\"value\">\n            </ma-choices-field>`\n    };\n}\n\nmaReferenceManyField.$inject = ['ReferenceRefresher'];\n"]}
{"version":3,"sources":["../../../../../src/javascripts/ng-admin/Main/config/routing.js"],"names":["dataStoreProvider","AdminDescription","getDataStore","entryConstructorProvider","getEntryConstructor","routing","$stateProvider","$urlRouterProvider","state","abstract","views","controller","controllerAs","templateProvider","Configuration","layout","parent","url","params","sortField","sortDir","dashboard","template","resolve","dataStore","Entry","hasEntities","entities","length","collections","responses","$stateParams","$q","ReadQueries","promises","collection","collectionSortField","collectionSortDir","collectionName","getSortFieldName","split","name","rawEntries","getAll","then","response","data","getReferenceData","fields","references","getReferences","referenceData","createArrayFromRest","targetField","targetEntity","identifier","map","addEntry","uniqueId","entry","entries","mapEntries","fillReferencesValuesFromCollection","all","when","otherwise","$injector","$location","get","go","path","$inject"],"mappings":"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","file":"routing.js","sourcesContent":["import layoutTemplate from '../view/layout.html';\nimport dashboardTemplate from '../view/dashboard.html';\nimport errorTemplate from '../view/404.html';\n\nfunction dataStoreProvider() {\n    return ['AdminDescription', function (AdminDescription) {\n        return AdminDescription.getDataStore();\n    }];\n}\n\nfunction entryConstructorProvider() {\n    return ['AdminDescription', function (AdminDescription) {\n        return AdminDescription.getEntryConstructor();\n    }];\n}\n\nfunction routing($stateProvider, $urlRouterProvider) {\n\n    $stateProvider.state('ng-admin', {\n        abstract: true,\n        views: {\n            'ng-admin': {\n                controller: 'AppController',\n                controllerAs: 'appController',\n                templateProvider: ['NgAdminConfiguration', function(Configuration) {\n                    return Configuration().layout() || layoutTemplate;\n                }]\n            }\n        }\n    });\n\n    $stateProvider.state('dashboard', {\n        parent: 'ng-admin',\n        url: '/dashboard?sortField&sortDir',\n        params: {\n            sortField: null,\n            sortDir: null\n        },\n        controller: 'DashboardController',\n        controllerAs: 'dashboardController',\n        templateProvider: ['NgAdminConfiguration', function(Configuration) {\n            return Configuration().dashboard().template() || dashboardTemplate;\n        }],\n        resolve: {\n            dataStore: dataStoreProvider(),\n            Entry: entryConstructorProvider(),\n            hasEntities: ['NgAdminConfiguration', function(Configuration) {\n                return Configuration().entities.length > 0;\n            }],\n            collections: ['NgAdminConfiguration', function(Configuration) {\n                return Configuration().dashboard().collections();\n            }],\n            responses: ['$stateParams', '$q', 'collections', 'dataStore', 'Entry', 'ReadQueries', function($stateParams, $q, collections, dataStore, Entry, ReadQueries) {\n                var sortField = 'sortField' in $stateParams ? $stateParams.sortField : null;\n                var sortDir = 'sortDir' in $stateParams ? $stateParams.sortDir : null;\n\n                var promises = {},\n                    collection,\n                    collectionSortField,\n                    collectionSortDir,\n                    collectionName;\n\n                for (collectionName in collections) {\n                    collection = collections[collectionName];\n                    collectionSortField = collection.getSortFieldName();\n                    collectionSortDir = collection.sortDir();\n                    if (sortField && sortField.split('.')[0] === collection.name()) {\n                        collectionSortField = sortField;\n                        collectionSortDir = sortDir;\n                    }\n                    promises[collectionName] = (function (collection, collectionSortField, collectionSortDir) {\n                        var rawEntries;\n\n                        return ReadQueries\n                            .getAll(collection, 1, {}, collectionSortField, collectionSortDir)\n                            .then(response => {\n                                rawEntries = response.data;\n                                return rawEntries;\n                            })\n                            .then(rawEntries => ReadQueries.getReferenceData(collection.fields(), rawEntries))\n                            .then(referenceData => {\n                                const references = collection.getReferences();\n                                for (var name in referenceData) {\n                                    Entry.createArrayFromRest(\n                                        referenceData[name],\n                                        [references[name].targetField()],\n                                        references[name].targetEntity().name(),\n                                        references[name].targetEntity().identifier().name()\n                                    ).map(entry => dataStore.addEntry(references[name].targetEntity().uniqueId + '_values', entry));\n                                }\n                            })\n                            .then(() => {\n                                var entries = collection.mapEntries(rawEntries);\n\n                                // shortcut to display collection of entry with included referenced values\n                                dataStore.fillReferencesValuesFromCollection(entries, collection.getReferences(), true);\n\n                                return entries;\n                            });\n                    })(collection, collectionSortField, collectionSortDir);\n                }\n\n                return $q.all(promises);\n            }],\n            entries: ['responses', 'collections', function(responses, collections) {\n                var collectionName,\n                    entries = {};\n\n                for (collectionName in responses) {\n                    entries[collections[collectionName].name()] = responses[collectionName];\n                }\n\n                return entries;\n            }]\n        }\n    });\n\n    $stateProvider.state('ma-404', {\n        parent: 'ng-admin',\n        template: errorTemplate\n    });\n\n    $urlRouterProvider.when('', '/dashboard');\n\n    $urlRouterProvider.otherwise(function($injector, $location) {\n        var state = $injector.get('$state');\n        state.go('ma-404');\n        return $location.path();\n    });\n}\n\nrouting.$inject = ['$stateProvider', '$urlRouterProvider'];\n\nexport default routing;\n"]}
{"version":3,"sources":["../../src/Field/EmbeddedListField.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;sBAAkB,SAAS;;;;4BACR,kBAAkB;;;;;;;;;;;;;;;;;;;;;;;;;;IAuB/B,iBAAiB;AACR,aADT,iBAAiB,CACP,IAAI,EAAE;8BADhB,iBAAiB;;AAEf,mCAFF,iBAAiB,6CAET,IAAI,EAAE;AACZ,YAAI,CAAC,KAAK,GAAG,eAAe,CAAC;AAC7B,YAAI,CAAC,YAAY,GAAG,KAAK,CAAC;AAC1B,YAAI,CAAC,aAAa,GAAG,+BAAY,CAAC;AAClC,YAAI,CAAC,aAAa,GAAG,EAAE,CAAC;AACxB,YAAI,CAAC,UAAU,GAAG,IAAI,CAAC;AACvB,YAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AACrB,YAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;AAC9B,YAAI,CAAC,YAAY,GAAG,EAAE,CAAC;KAC1B;;cAXC,iBAAiB;;iBAAjB,iBAAiB;;;;;;;;eAkBP,sBAAC,MAAM,EAAE;AACjB,gBAAI,CAAC,SAAS,CAAC,MAAM,EAAE;AACnB,uBAAO,IAAI,CAAC,aAAa,CAAC;aAC7B;AACD,gBAAI,CAAC,aAAa,GAAG,MAAM,CAAC;;AAE5B,mBAAO,IAAI,CAAC;SACf;;;;;;;;;;;;;;;eAaW,sBAAC,KAAK,EAAE;AAChB,gBAAI,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,IAAI,CAAC,aAAa,CAAC;AACjD,gBAAI,CAAC,aAAa,GAAG,KAAK,CAAC;;AAE3B,mBAAO,IAAI,CAAC;SACf;;;;;;;;;eAOQ,qBAAG;AACR,gBAAI,SAAS,CAAC,MAAM,EAAE;AAClB,oBAAI,CAAC,UAAU,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AAC/B,uBAAO,IAAI,CAAC;aACf;;AAED,mBAAO,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,UAAU,EAAE,CAAC,IAAI,EAAE,CAAC;SACtF;;;;;;;;;eAOM,mBAAG;AACN,gBAAI,SAAS,CAAC,MAAM,EAAE;AAClB,oBAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AAC7B,uBAAO,IAAI,CAAC;aACf;;AAED,mBAAO,IAAI,CAAC,QAAQ,CAAC;SACxB;;;eAEU,qBAAC,OAAO,EAAE;AACjB,gBAAI,CAAC,SAAS,CAAC,MAAM,EAAE;AACnB,uBAAO,IAAI,CAAC,YAAY,CAAC;aAC5B;;AAED,gBAAI,CAAC,YAAY,GAAG,OAAO,CAAC;;AAE5B,mBAAO,IAAI,CAAC;SACf;;;;;;;;;;;;;;eAYe,0BAAC,OAAO,EAAE;AACtB,gBAAI,CAAC,SAAS,CAAC,MAAM,EAAE;AACnB,uBAAO,IAAI,CAAC,iBAAiB,CAAC;aACjC;;AAED,gBAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC;;AAEjC,mBAAO,IAAI,CAAC;SACf;;;WArGC,iBAAiB;;;qBAwGR,iBAAiB","file":"EmbeddedListField.js","sourcesContent":["import Field from \"./Field\";\nimport Entity from \"../Entity/Entity\";\n\n/**\n * Map an embedded list in the entry\n *\n * @example\n *\n *     {\n *        id: 123,\n *        title: \"hello, world\",\n *        comments: [\n *          { date: \"2015-09-30\", author: \"John Doe\", body: \"Lorem Ipsum\" },\n *          { date: \"2015-10-02\", author: \"Jane Doe\", body: \"Sic dolor amet\" }\n *        ]\n *     }\n *\n *     let commentsField = new EmbeddedListField('comments')\n *        .targetFields([\n *          new DateField('date'),\n *          new StringField('author'),\n *          new StringField('body')\n *        ])\n */\nclass EmbeddedListField extends Field {\n    constructor(name) {\n        super(name);\n        this._type = 'embedded_list';\n        this._flattenable = false;\n        this._targetEntity = new Entity(); // link to an empty entity by default\n        this._targetFields = [];\n        this._sortField = null;\n        this._sortDir = null;\n        this._permanentFilters = null;\n        this._listActions = [];\n    }\n\n    /**\n     * Optionally set the target Entity\n     *\n     * Useful if the embedded entries can be edited in standalone\n     */\n    targetEntity(entity) {\n        if (!arguments.length) {\n            return this._targetEntity;\n        }\n        this._targetEntity = entity;\n\n        return this;\n    }\n\n    /**\n     * List the fields to map in the embedded entries\n     *\n     * @example\n     *\n     *     embeddedListField.targetFields([\n     *       new DateField('date'),\n     *       new StringField('author'),\n     *       new StringField('body')\n     *     ])\n     */\n    targetFields(value) {\n        if (!arguments.length) return this._targetFields;\n        this._targetFields = value;\n\n        return this;\n    }\n\n    /**\n     * Name of the field used for sorting.\n     *\n     * @param string\n     */\n    sortField() {\n        if (arguments.length) {\n            this._sortField = arguments[0];\n            return this;\n        }\n\n        return this._sortField ? this._sortField : this.targetEntity().identifier().name();\n    }\n\n    /**\n     * Direction used for sorting.\n     *\n     * @param String either 'ASC' or 'DESC'\n     */\n    sortDir() {\n        if (arguments.length) {\n            this._sortDir = arguments[0];\n            return this;\n        }\n\n        return this._sortDir;\n    }\n\n    listActions(actions) {\n        if (!arguments.length) {\n            return this._listActions;\n        }\n\n        this._listActions = actions;\n\n        return this;\n    }\n\n    /**\n     * Define permanent filters to be added to the REST API calls\n     *\n     *     nga.field('post_id', 'reference').permanentFilters({\n     *        published: true\n     *     });\n     *     // related API call will be /posts/:id?published=true\n     *\n     * @param {Object} filters list of filters to apply to the call\n     */\n    permanentFilters(filters) {\n        if (!arguments.length) {\n            return this._permanentFilters;\n        }\n\n        this._permanentFilters = filters;\n\n        return this;\n    }\n}\n\nexport default EmbeddedListField;\n"]}
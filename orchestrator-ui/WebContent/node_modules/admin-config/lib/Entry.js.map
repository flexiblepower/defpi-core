{"version":3,"sources":["../src/Entry.js"],"names":[],"mappings":";;;;;;;;;;qCAAmD,0BAA0B;;IAGvE,KAAK;AACI,aADT,KAAK,CACK,UAAU,EAAE,MAAM,EAAE,eAAe,EAAE;8BAD/C,KAAK;;AAEH,YAAI,CAAC,WAAW,GAAG,UAAU,CAAC;AAC9B,YAAI,CAAC,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC;AAC3B,YAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;AACxC,YAAI,CAAC,UAAU,GAAG,EAAE,CAAC;KACxB;;iBANC,KAAK;;;;;;;;eA4DQ,yBAAC,MAAM,EAAE;;AAEpB,gBAAI,SAAS,GAAG,2BAjEhB,KAAK,EAiEiB,IAAI,CAAC,MAAM,CAAC,CAAC;AACnC,kBAAM,CAAC,OAAO,CAAC,UAAA,KAAK,EAAI;AACpB,oBAAI,SAAS,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;AAC7B,oBAAI,SAAS,IAAI,SAAS,EAAE;AACxB,6BAAS,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC,mBAAmB,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,SAAS,CAAC,CAAA;iBACpF;aACJ,CAAC,CAAC;;AAEH,mBAAO,2BAzEiB,YAAY,EAyEhB,SAAS,CAAC,CAAC;SAClC;;;aA/Da,YAAG;AACb,mBAAO,IAAI,CAAC,WAAW,CAAC;SAC3B;;;aAEkB,YAAG;AAClB,mBAAO,IAAI,CAAC,gBAAgB,CAAC;SAChC;;;eAEqB,yBAAC,MAAM,EAAE,UAAU,EAAE;AACvC,gBAAI,KAAK,GAAG,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC;AAClC,kBAAM,CAAC,OAAO,CAAC,UAAA,KAAK,EAAI;AACpB,qBAAK,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC;aACrD,CAAC,CAAC;AACH,mBAAO,KAAK,CAAC;SAEhB;;;;;;;;;eAOoB,wBAAC,SAAS,EAAuD;gBAArD,MAAM,gCAAG,EAAE;gBAAE,UAAU,gCAAG,EAAE;gBAAE,cAAc,gCAAG,IAAI;;AAChF,gBAAI,CAAC,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,IAAI,CAAC,EAAE;AAClD,uBAAO,KAAK,CAAC,eAAe,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;aACpD;AACD,gBAAM,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,UAAA,CAAC;uBAAI,CAAC,CAAC,CAAC,WAAW,EAAE;aAAA,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC;uBAAI,CAAC,CAAC,IAAI,EAAE;aAAA,CAAC,CAAC;;AAE/E,gBAAI,MAAM,GAAG,2BAvCN,eAAe,EAuCO,SAAS,EAAE,cAAc,CAAC,CAAC;;AAExD,kBAAM,CAAC,OAAO,CAAC,UAAA,KAAK,EAAI;AACpB,oBAAI,SAAS,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;AAC7B,sBAAM,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,MAAM,CAAC,CAAC;aACvE,CAAC,CAAC;;AAEH,mBAAO,IAAI,KAAK,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;SAChE;;;;;;;;;eAOyB,6BAAC,WAAW,EAAE,MAAM,EAAE,UAAU,EAAE,cAAc,EAAE;AACxE,mBAAO,WAAW,CAAC,GAAG,CAAC,UAAA,CAAC;uBAAI,KAAK,CAAC,cAAc,CAAC,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,cAAc,CAAC;aAAA,CAAC,CAAC;SAC5F;;;WArDC,KAAK;;;qBA2EI,KAAK","file":"Entry.js","sourcesContent":["import {clone, cloneAndFlatten, cloneAndNest} from './Utils/objectProperties';\n\n\nclass Entry {\n    constructor(entityName, values, identifierValue) {\n        this._entityName = entityName;\n        this.values = values || {};\n        this._identifierValue = identifierValue;\n        this.listValues = {};\n    }\n\n    get entityName() {\n        return this._entityName;\n    }\n\n    get identifierValue() {\n        return this._identifierValue;\n    }\n\n    static createForFields(fields, entityName) {\n        let entry = new Entry(entityName);\n        fields.forEach(field => {\n            entry.values[field.name()] = field.defaultValue();\n        });\n        return entry;\n\n    }\n\n    /**\n     * Map a JS object from the REST API Response to an Entry\n     *\n     * @return {Entry}\n     */\n    static createFromRest(restEntry, fields = [], entityName = '', identifierName = 'id') {\n        if (!restEntry || Object.keys(restEntry).length == 0) {\n            return Entry.createForFields(fields, entityName);\n        }\n        const excludedFields = fields.filter(f => !f.flattenable()).map(f => f.name());\n\n        let values = cloneAndFlatten(restEntry, excludedFields);\n\n        fields.forEach(field => {\n            let fieldName = field.name();\n            values[fieldName] = field.getMappedValue(values[fieldName], values);\n        });\n\n        return new Entry(entityName, values, values[identifierName]);\n    }\n\n    /**\n     * Map an array of JS objects from the REST API Response to an array of Entries\n     *\n     * @return {Array[Entry]}\n     */\n    static createArrayFromRest(restEntries, fields, entityName, identifierName) {\n        return restEntries.map(e => Entry.createFromRest(e, fields, entityName, identifierName));\n    }\n\n    /**\n     * Transform an Entry to a JS object for the REST API Request\n     *\n     * @return {Object}\n     */\n    transformToRest(fields) {\n\n        let restEntry = clone(this.values);\n        fields.forEach(field => {\n            let fieldName = field.name();\n            if (fieldName in restEntry) {\n                restEntry[fieldName] = field.getTransformedValue(restEntry[fieldName], restEntry)\n            }\n        });\n\n        return cloneAndNest(restEntry);\n    }\n\n}\n\nexport default Entry;\n"]}
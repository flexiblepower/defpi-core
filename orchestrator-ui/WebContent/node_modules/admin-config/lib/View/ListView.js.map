{"version":3,"sources":["../../src/View/ListView.js"],"names":[],"mappings":"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","file":"ListView.js","sourcesContent":["import View from './View';\nimport orderElement from \"../Utils/orderElement\";\n\nclass ListView extends View {\n    constructor(name) {\n        super(name);\n\n        this._type = 'ListView';\n        this._perPage = 30;\n        this._infinitePagination = false;\n        this._listActions = [];\n        this._batchActions = ['delete'];\n        this._filters = [];\n        this._permanentFilters = {};\n        this._exportFields = null;\n        this._exportOptions = {};\n        this._entryCssClasses = null;\n\n        this._sortField = 'id';\n        this._sortDir = 'DESC';\n    }\n\n    perPage() {\n        if (!arguments.length) { return this._perPage; }\n        this._perPage = arguments[0];\n        return this;\n    }\n\n    /** @deprecated Use perPage instead */\n    limit() {\n        if (!arguments.length) { return this.perPage(); }\n        return this.perPage(arguments[0]);\n    }\n\n    sortField() {\n        if (arguments.length) {\n            this._sortField = arguments[0];\n            return this;\n        }\n\n        return this._sortField;\n    }\n\n    sortDir() {\n        if (arguments.length) {\n            this._sortDir = arguments[0];\n            return this;\n        }\n\n        return this._sortDir;\n    }\n\n    getSortFieldName() {\n        return this.name() + '.' + this._sortField;\n    }\n\n    infinitePagination() {\n        if (arguments.length) {\n            this._infinitePagination = arguments[0];\n            return this;\n        }\n\n        return this._infinitePagination;\n    }\n\n    actions(actions) {\n        if (!arguments.length) {\n            return this._actions;\n        }\n\n        this._actions = actions;\n\n        return this;\n    }\n\n    exportFields(exportFields) {\n        if (!arguments.length) {\n            return this._exportFields;\n        }\n\n        this._exportFields = exportFields;\n\n        return this;\n    }\n\n    exportOptions(exportOptions) {\n        if (!arguments.length) {\n            return this._exportOptions;\n        }\n\n        this._exportOptions = exportOptions;\n\n        return this;\n    }\n\n    batchActions(actions) {\n        if (!arguments.length) {\n            return this._batchActions;\n        }\n\n        this._batchActions = actions;\n\n        return this;\n    }\n\n    /**\n     * Define permanent filters to be added to the REST API calls\n     *\n     *     posts.listView().permanentFilters({\n     *        published: true\n     *     });\n     *     // related API call will be /posts?published=true\n     *\n     * @param {Object} filters list of filters to apply to the call\n     */\n    permanentFilters(filters) {\n        if (!arguments.length) {\n            return this._permanentFilters;\n        }\n\n        this._permanentFilters = filters;\n\n        return this;\n    }\n\n    /**\n     * Define filters the user can add to the datagrid\n     *\n     *     posts.listView().filters([\n     *       nga.field('title'),\n     *       nga.field('age', 'number')\n     *     ]);\n     *\n     * @param {Field[]} filters list of filters to add to the GUI\n     */\n    filters(filters) {\n        if (!arguments.length) {\n            return this._filters;\n        }\n\n        this._filters = orderElement.order(filters);\n\n        return this;\n    }\n\n    getFilterReferences(withRemoteComplete) {\n        let result = {};\n        let lists = this._filters.filter(f => f.type() === 'reference');\n\n        var filterFunction = null;\n        if (withRemoteComplete === true) {\n            filterFunction = f => f.remoteComplete();\n        } else if (withRemoteComplete === false) {\n            filterFunction = f => !f.remoteComplete();\n        }\n\n        if (filterFunction !== null) {\n            lists = lists.filter(filterFunction);\n        }\n\n        for (let i = 0, c = lists.length ; i < c ; i++) {\n            let list = lists[i];\n            result[list.name()] = list;\n        }\n\n        return result;\n    }\n\n    listActions(actions) {\n        if (!arguments.length) {\n            return this._listActions;\n        }\n\n        this._listActions = actions;\n\n        return this;\n    }\n\n    entryCssClasses(classes) {\n        if (!arguments.length) {\n            return this._entryCssClasses;\n        }\n\n        this._entryCssClasses = classes;\n\n        return this;\n    }\n\n    getEntryCssClasses(entry) {\n        if (!this._entryCssClasses) {\n            return '';\n        }\n\n        if (this._entryCssClasses.constructor === Array) {\n            return this._entryCssClasses.join(' ');\n        }\n\n        if (typeof(this._entryCssClasses) === 'function') {\n            return this._entryCssClasses(entry);\n        }\n\n        return this._entryCssClasses;\n    }\n}\n\nexport default ListView;\n"]}
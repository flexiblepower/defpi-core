{"version":3,"sources":["../../src/View/EditView.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;qBAAiB,QAAQ;;;;IAEnB,QAAQ;AACC,aADT,QAAQ,CACE,IAAI,EAAE;8BADhB,QAAQ;;AAEN,mCAFF,QAAQ,6CAEA,IAAI,EAAE;AACZ,YAAI,CAAC,KAAK,GAAG,UAAU,CAAC;AACxB,YAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;AACnC,YAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;KACpC;;cANC,QAAQ;;iBAAR,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAgDK,yBAAC,gBAAe,EAAE;AAC7B,gBAAI,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,IAAI,CAAC,gBAAgB,CAAC;AACpD,gBAAI,CAAC,gBAAgB,GAAG,gBAAe,CAAC;AACxC,mBAAO,IAAI,CAAC;SACf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eA8CY,uBAAC,cAAa,EAAE;AACzB,gBAAI,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,IAAI,CAAC,cAAc,CAAC;AAClD,gBAAI,CAAC,cAAc,GAAG,cAAa,CAAC;AACpC,mBAAO,IAAI,CAAC;SACf;;;WAtGC,QAAQ;;;qBAyGC,QAAQ","file":"EditView.js","sourcesContent":["import View from './View';\n\nclass EditView extends View {\n    constructor(name) {\n        super(name);\n        this._type = 'EditView';\n        this._submitCreationSuccess = null;\n        this._submitCreationError = null;\n    }\n\n    /**\n     * Add a function to be executed after the update succeeds.\n     *\n     * This is the ideal place to use the response to update the entry, or\n     * redirect to another view.\n     *\n     * If the function returns false, the default execution workflow is stopped.\n     * This means that the function must provide a custom workflow.\n     *\n     * If the function throws an exception, the onSubmitError callback will\n     * execute.\n     *\n     * The syntax depends on the framework calling the function.\n     *\n     * With ng-admin, the function can be an angular injectable, listing\n     * required dependencies in an array. Among other, the function can receive\n     * the following services:\n     *  - $event: the form submission event\n     *  - entry: the current Entry instance\n     *  - entity: the current entity\n     *  - form: the form object (for form validation and errors)\n     *  - progression: the controller for the loading indicator\n     *  - notification: the controller for top notifications\n     *\n     * The function can be asynchronous, in which case it should return\n     * a Promise.\n     *\n     * @example\n     *\n     *     post.editionView().onSubmitSuccess(['progression', 'notification', '$state', 'entry', 'entity', function(progression, notification, $state, entry, entity) {\n     *         // stop the progress bar\n     *         progression.done();\n     *         // add a notification\n     *         notification.log(`Element #${entry._identifierValue} successfully edited.`, { addnCls: 'humane-flatty-success' });\n     *         // redirect to the list view\n     *         $state.go($state.get('list'), { entity: entity.name() });\n     *         // cancel the default action (redirect to the edition view)\n     *         return false;\n     *      }])\n     */\n    onSubmitSuccess(onSubmitSuccess) {\n        if (!arguments.length) return this._onSubmitSuccess;\n        this._onSubmitSuccess = onSubmitSuccess;\n        return this;\n    }\n\n    /**\n     * Add a function to be executed after the update request receives a failed\n     * http response from the server.\n     *\n     * This is the ideal place to use the response to update the entry, display\n     * server-side validation error, or redirect to another view.\n     *\n     * If the function returns false, the default execution workflow is stopped.\n     * This means that the function must provide a custom workflow.\n     *\n     * The syntax depends on the framework calling the function.\n     *\n     * With ng-admin, the function can be an angular injectable, listing\n     * required dependencies in an array. Among other, the function can receive\n     * the following services:\n     *  - $event: the form submission event\n     *  - error: the response from the server\n     *  - errorMessage: the error message based on the response\n     *  - entry: the current Entry instance\n     *  - entity: the current entity\n     *  - form: the form object (for form validation and errors)\n     *  - progression: the controller for the loading indicator\n     *  - notification: the controller for top notifications\n     *\n     * The function can be asynchronous, in which case it should return\n     * a Promise.\n     *\n     * @example\n     *\n     *     post.editionView().onSubmitError(['error', 'form', 'progression', 'notification', function(error, form, progression, notification) {\n     *         // mark fields based on errors from the response\n     *         error.violations.forEach(violation => {\n     *             if (form[violation.propertyPath]) {\n     *                 form[violation.propertyPath].$valid = false;\n     *             }\n     *         });\n     *         // stop the progress bar\n     *         progression.done();\n     *         // add a notification\n     *         notification.log(`Some values are invalid, see details in the form`, { addnCls: 'humane-flatty-error' });\n     *         // cancel the default action (default error messages)\n     *         return false;\n     *     }]);\n     */\n    onSubmitError(onSubmitError) {\n        if (!arguments.length) return this._onSubmitError;\n        this._onSubmitError = onSubmitError;\n        return this;\n    }\n}\n\nexport default EditView;\n"]}
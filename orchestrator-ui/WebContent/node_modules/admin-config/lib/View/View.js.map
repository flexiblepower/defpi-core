{"version":3,"sources":["../../src/View/View.js"],"names":[],"mappings":"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","file":"View.js","sourcesContent":["import Entry from '../Entry';\nimport ReferenceExtractor from '../Utils/ReferenceExtractor';\nimport { clone, cloneAndFlatten, cloneAndNest } from '../Utils/objectProperties';\n\nclass View {\n    constructor(name) {\n        this.entity = null;\n        this._actions = null;\n        this._title = false;\n        this._description = '';\n        this._template = null;\n\n        this._enabled = null;\n        this._fields = [];\n        this._type = null;\n        this._name = name;\n        this._order = 0;\n        this._errorMessage = null;\n        this._url = null;\n        this._prepare = null;\n    }\n\n    get enabled() {\n        return this._enabled === null ? !!this._fields.length : this._enabled;\n    }\n\n    title(title) {\n        if (!arguments.length) return this._title;\n        this._title = title;\n        return this;\n    }\n\n    description() {\n        if (arguments.length) {\n            this._description = arguments[0];\n            return this;\n        }\n\n        return this._description;\n    }\n\n    name(name) {\n        if (!arguments.length) {\n            return this._name || this.entity.name() + '_' + this._type;\n        }\n\n        this._name = name;\n        return this;\n    }\n\n    disable() {\n        this._enabled = false;\n\n        return this;\n    }\n\n    enable() {\n        this._enabled = true;\n\n        return this;\n    }\n\n    /**\n     * @deprecated Use getter \"enabled\" instead\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n\n    /**\n     * @deprecated Use getter \"entity\" instead\n     */\n    getEntity() {\n        return this.entity;\n    }\n\n    /**\n     * @deprecated Specify entity at view creation or use \"entity\" setter instead\n     */\n    setEntity(entity) {\n        this.entity = entity;\n        if (!this._name) {\n            this._name = entity.name() + '_' + this._type;\n        }\n\n        return this;\n    }\n\n    /*\n     * Supports various syntax\n     * fields([ Field1, Field2 ])\n     * fields(Field1, Field2)\n     * fields([Field1, {Field2, Field3}])\n     * fields(Field1, {Field2, Field3})\n     * fields({Field2, Field3})\n     */\n    fields() {\n        if (!arguments.length) return this._fields;\n\n        [].slice.call(arguments).map(function(argument) {\n            View.flatten(argument).map(arg => this.addField(arg));\n        }, this);\n\n        return this;\n    }\n\n    hasFields() {\n        return this.fields.length > 0;\n    }\n\n    removeFields() {\n        this._fields = [];\n        return this;\n    }\n\n    getFields() {\n        return this._fields;\n    }\n\n    getField(fieldName) {\n        return this._fields.filter(f => f.name() === fieldName)[0];\n    }\n\n    getFieldsOfType(type) {\n        return this._fields.filter(f => f.type() === type);\n    }\n\n    addField(field) {\n        if (field.order() === null) {\n            field.order(this._fields.length, true);\n        }\n        this._fields.push(field);\n        this._fields = this._fields.sort((a, b) => (a.order() - b.order()));\n\n        return this;\n    }\n\n    static flatten(arg) {\n        if (arg.constructor.name === 'Object') {\n            console.warn('Passing literal of Field to fields method is deprecated use array instead');\n            let result = [];\n            for (let fieldName in arg) {\n                result = result.concat(View.flatten(arg[fieldName]));\n            }\n            return result;\n        }\n        if (Array.isArray(arg)) {\n            return arg.reduce(function(previous, current) {\n                return previous.concat(View.flatten(current))\n            }, []);\n        }\n        // arg is a scalar\n        return [arg];\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    order(order) {\n        if (!arguments.length) return this._order;\n        this._order = order;\n        return this;\n    }\n\n    getReferences(withRemoteComplete) {\n        return ReferenceExtractor.getReferences(this._fields, withRemoteComplete);\n    }\n\n    getNonOptimizedReferences(withRemoteComplete) {\n        return ReferenceExtractor.getNonOptimizedReferences(this._fields, withRemoteComplete);\n    }\n\n    getOptimizedReferences(withRemoteComplete) {\n        return ReferenceExtractor.getOptimizedReferences(this._fields, withRemoteComplete);\n    }\n\n    getReferencedLists() {\n        return ReferenceExtractor.getReferencedLists(this._fields);\n    }\n\n    template(template) {\n        if (!arguments.length) {\n            return this._template;\n        }\n\n        this._template = template;\n\n        return this;\n    }\n\n    identifier() {\n        return this.entity.identifier();\n    }\n\n    actions(actions) {\n        if (!arguments.length) return this._actions;\n        this._actions = actions;\n        return this;\n    }\n\n    getErrorMessage(response) {\n        if (typeof(this._errorMessage) === 'function') {\n            return this._errorMessage(response);\n        }\n\n        return this._errorMessage;\n    }\n\n    errorMessage(errorMessage) {\n        if (!arguments.length) return this._errorMessage;\n        this._errorMessage = errorMessage;\n        return this;\n    }\n\n    url(url) {\n        if (!arguments.length) return this._url;\n        this._url = url;\n        return this;\n    }\n\n    getUrl(identifierValue) {\n        if (typeof(this._url) === 'function') {\n            return this._url(identifierValue);\n        }\n\n        return this._url;\n    }\n\n    validate(entry) {\n        this._fields.map(function (field) {\n            let validation = field.validation();\n\n            if (typeof validation.validator === 'function') {\n                validation.validator(entry.values[field.name()], entry.values);\n            }\n        });\n    }\n\n    /**\n     * Map a JS object from the REST API Response to an Entry\n     */\n    mapEntry(restEntry) {\n        return Entry.createFromRest(restEntry, this._fields, this.entity.name(), this.entity.identifier().name());\n    }\n\n    mapEntries(restEntries) {\n        return Entry.createArrayFromRest(restEntries, this._fields, this.entity.name(), this.entity.identifier().name());\n    }\n\n    /**\n     * Transform an Entry to a JS object for the REST API Request\n     */\n    transformEntry(entry) {\n        return entry.transformToRest(this._fields);\n    }\n\n    /**\n     * Add a function to be executed before the view renders\n     *\n     * This is the ideal place to prefetch related entities and manipulate\n     * the dataStore.\n     *\n     * The syntax depends on the framework calling the function.\n     *\n     * With ng-admin, the function can be an angular injectable, listing\n     * required dependencies in an array. Among other, the function can receive\n     * the following services:\n     *  - query: the query object (an object representation of the main request\n     *    query string)\n     *  - datastore: where the Entries are stored. The dataStore is accessible\n     *    during rendering\n     *  - view: the current View object\n     *  - entry: the current Entry instance (except in listView)\n     *  - Entry: the Entry constructor (required to transform an object from\n     *    the REST response to an Entry)\n     *  - window: the window object. If you need to fetch anything other than an\n     *    entry and pass it to the view layer, it's the only way.\n     *\n     * The function can be asynchronous, in which case it should return\n     * a Promise.\n     *\n     * @example\n     *\n     *     post.listView().prepare(['datastore', 'view', 'Entry', function(datastore, view, Entry) {\n     *       const posts = datastore.getEntries(view.getEntity().uniqueId);\n     *       const authorIds = posts.map(post => post.values.authorId).join(',');\n     *       return fetch('http://myapi.com/authors?id[]=' + authorIds)\n     *          .then(response => response.json())\n     *          .then(authors => Entry.createArrayFromRest(\n     *              authors,\n     *              [new Field('first_name'), new Field('last_name')],\n     *              'author'\n     *          ))\n     *          .then(authorEntries => datastore.setEntries('authors', authorEntries));\n     *     }]);\n     */\n    prepare(prepare) {\n        if (!arguments.length) return this._prepare;\n        this._prepare = prepare;\n        return this;\n    }\n\n    doPrepare() {\n        return this._prepare.apply(this, arguments);\n    }\n}\n\nexport default View;\n"]}
{"version":3,"sources":["../../src/Utils/ReferenceExtractor.js"],"names":[],"mappings":";;;;;qBAAe;;AAEX,sBAAkB,EAAA,4BAAC,MAAM,EAAE;AACvB,eAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,UAAA,CAAC;mBAAI,CAAC,CAAC,IAAI,EAAE,KAAK,iBAAiB;SAAA,CAAC,CAAC,CAAC;KAC/E;AACD,iBAAa,EAAA,uBAAC,MAAM,EAAE,kBAAkB,EAAoB;YAAlB,SAAS,gCAAG,IAAI;;AACtD,YAAI,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,UAAA,CAAC;mBAAI,CAAC,CAAC,IAAI,EAAE,KAAK,WAAW,IAAI,CAAC,CAAC,IAAI,EAAE,KAAK,gBAAgB;SAAA,CAAC,CAAC;AAC/F,YAAI,kBAAkB,KAAK,IAAI,EAAE;AAC7B,sBAAU,GAAG,UAAU,CAAC,MAAM,CAAC,UAAA,CAAC;uBAAI,CAAC,CAAC,cAAc,EAAE;aAAA,CAAC,CAAC;SAC3D,MAAM,IAAI,kBAAkB,KAAK,KAAK,EAAE;AACrC,sBAAU,GAAG,UAAU,CAAC,MAAM,CAAC,UAAA,CAAC;uBAAI,CAAC,CAAC,CAAC,cAAc,EAAE;aAAA,CAAC,CAAC;SAC5D;AACD,YAAI,SAAS,KAAK,IAAI,EAAE;AACpB,sBAAU,GAAG,UAAU,CAAC,MAAM,CAAC,UAAA,CAAC;uBAAI,CAAC,CAAC,gBAAgB,EAAE,KAAK,SAAS;aAAA,CAAC,CAAA;SAC1E;AACD,eAAO,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;KACvC;AACD,6BAAyB,EAAA,mCAAC,MAAM,EAAE,kBAAkB,EAAE;AAClD,eAAO,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,kBAAkB,EAAE,KAAK,CAAC,CAAC;KAChE;AACD,0BAAsB,EAAA,gCAAC,MAAM,EAAE,kBAAkB,EAAE;AAC/C,eAAO,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,kBAAkB,EAAE,IAAI,CAAC,CAAC;KAC/D;AACD,eAAW,EAAA,qBAAC,UAAU,EAAE;AACpB,eAAO,UAAU,CAAC,MAAM,CAAC,UAAC,gBAAgB,EAAE,SAAS,EAAK;AACtD,4BAAgB,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,GAAG,SAAS,CAAC;AAC/C,mBAAO,gBAAgB,CAAC;SAC3B,EAAE,EAAE,CAAC,CAAC;KACV;CACJ","file":"ReferenceExtractor.js","sourcesContent":["export default {\n\n    getReferencedLists(fields) {\n        return this.indexByName(fields.filter(f => f.type() === 'referenced_list'));\n    },\n    getReferences(fields, withRemoteComplete, optimized = null) {\n        let references = fields.filter(f => f.type() === 'reference' || f.type() === 'reference_many');\n        if (withRemoteComplete === true) {\n            references = references.filter(r => r.remoteComplete());\n        } else if (withRemoteComplete === false) {\n            references = references.filter(r => !r.remoteComplete());\n        }\n        if (optimized !== null) {\n            references = references.filter(r => r.hasSingleApiCall() === optimized)\n        }\n        return this.indexByName(references);\n    },\n    getNonOptimizedReferences(fields, withRemoteComplete) {\n        return this.getReferences(fields, withRemoteComplete, false);\n    },\n    getOptimizedReferences(fields, withRemoteComplete) {\n        return this.getReferences(fields, withRemoteComplete, true);\n    },\n    indexByName(references) {\n        return references.reduce((referencesByName, reference) => {\n            referencesByName[reference.name()] = reference;\n            return referencesByName;\n        }, {});\n    }\n};\n"]}
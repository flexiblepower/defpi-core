{"version":3,"sources":["../../src/Queries/WriteQueries.js"],"names":[],"mappings":";;;;;;;;;;;;;;wBAAoB,WAAW;;;;IAEzB,YAAY;aAAZ,YAAY;8BAAZ,YAAY;;;;;;;cAAZ,YAAY;;iBAAZ,YAAY;;;;;;;;;;;;eAWL,mBAAC,IAAI,EAAE,SAAS,EAAE;AACvB,mBAAO,IAAI,CAAC,YAAY,CACnB,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC;SACnJ;;;;;;;;;;;;;;eAYQ,mBAAC,IAAI,EAAE,SAAS,EAAE,cAAc,EAAE;AACvC,gBAAI,QAAQ,GAAG,cAAc,IAAI,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;;;AAG5E,mBAAO,IAAI,CAAC,YAAY,CACnB,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC;SACxL;;;;;;;;;;;;;eAWQ,mBAAC,IAAI,EAAE,QAAQ,EAAE;AACtB,mBAAO,IAAI,CAAC,YAAY,CACnB,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC;SAC7K;;;;;;;;;;;;;eAWU,qBAAC,IAAI,EAAE,SAAS,EAAE;AACzB,gBAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AACzC,gBAAI,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE;AACvC,uBAAO,SAAS,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;aAC9B,CAAC,CAAC;;AAEH,mBAAO,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;SACzD;;;WAhEC,YAAY;;;qBAmEH,YAAY","file":"WriteQueries.js","sourcesContent":["import Queries from './Queries'\n\nclass WriteQueries extends Queries {\n\n    /**\n     * Create a new entity\n     * Post the data to the API to create the new object\n     *\n     * @param {View}   view      the formView related to the entity\n     * @param {Object} rawEntity the entity's object\n     *\n     * @returns {promise}  the new object\n     */\n    createOne(view, rawEntity) {\n        return this._restWrapper\n            .createOne(rawEntity, view.entity.name(), this._application.getRouteFor(view.entity, view.getUrl(), view.type), view.entity.createMethod());\n    }\n\n    /**\n     * Update an entity\n     * Put the data to the API to create the new object\n     *\n     * @param {View}   view             the formView related to the entity\n     * @param {Object} rawEntity        the entity's object\n     * @param {String} originEntityId   if entity identifier is modified\n     *\n     * @returns {promise} the updated object\n     */\n    updateOne(view, rawEntity, originEntityId) {\n        let entityId = originEntityId || rawEntity[view.entity.identifier().name()];\n\n        // Update element data\n        return this._restWrapper\n            .updateOne(rawEntity, view.entity.name(), this._application.getRouteFor(view.entity, view.getUrl(entityId), view.type, entityId, view.identifier()), view.entity.updateMethod());\n    }\n\n    /**\n     * Delete an entity\n     * Delete the data to the API\n     *\n     * @param {String} view     the formView related to the entity\n     * @param {*}      entityId the entity's id\n     *\n     * @returns {promise}\n     */\n    deleteOne(view, entityId) {\n        return this._restWrapper\n            .deleteOne(view.entity.name(), this._application.getRouteFor(view.entity, view.getUrl(entityId), view.type, entityId, view.identifier()), view.entity.deleteMethod());\n    }\n\n    /**\n     * Delete a batch of entity\n     * Delete the data to the API\n     *\n     * @param {String} view     the formView related to the entity\n     * @param {*}      entityIds the entities ids\n     *\n     * @returns {promise}\n     */\n    batchDelete(view, entityIds) {\n        let deleteOne = this.deleteOne.bind(this)\n        let promises = entityIds.map(function (id) {\n            return deleteOne(view, id);\n        });\n\n        return this._promisesResolver.allEvenFailed(promises);\n    }\n}\n\nexport default WriteQueries\n"]}
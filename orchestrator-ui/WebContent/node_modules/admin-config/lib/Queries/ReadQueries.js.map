{"version":3,"sources":["../../src/Queries/ReadQueries.js"],"names":[],"mappings":"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","file":"ReadQueries.js","sourcesContent":["import Queries from './Queries';\nimport ReferenceExtractor from '../Utils/ReferenceExtractor';\n\nclass ReadQueries extends Queries {\n\n    /**\n     * Get one entity\n     *\n     * @param {Entity}   entity\n     * @param {String}   viewType\n     * @param {mixed}    identifierValue\n     * @param {String}   identifierName\n     * @param {String}   url\n     *\n     * @returns {promise} (list of fields (with their values if set) & the entity name, label & id-\n     */\n    getOne(entity, viewType, identifierValue, identifierName, url) {\n        return this._restWrapper\n            .getOne(entity.name(), this._application.getRouteFor(entity, url, viewType, identifierValue, identifierName), entity.retrieveMethod());\n    }\n\n    /**\n     * Return the list of all object of entityName type\n     * Get all the object from the API\n     *\n     * @param {ListView} view                the view associated to the entity\n     * @param {Number}   page                the page number\n     * @param {Object}   filterValues        searchQuery to filter elements\n     * @param {String}   sortField           the field to be sorted ex: entity.fieldName\n     * @param {String}   sortDir             the direction of the sort\n     *\n     * @returns {promise} the entity config & the list of objects\n     */\n    getAll(view, page, filterValues, sortField, sortDir) {\n        page = page || 1;\n        filterValues = filterValues || {};\n        let url = view.getUrl();\n\n        if (sortField && sortField.split('.')[0] === view.name()) {\n            sortField = sortField;\n            sortDir = sortDir;\n        } else {\n            sortField = view.getSortFieldName();\n            sortDir = view.sortDir();\n        }\n\n        let allFilterValues = {};\n        const permanentFilters = view.permanentFilters();\n        Object.keys(filterValues).forEach(key => {\n            allFilterValues[key] = filterValues[key];\n        });\n        Object.keys(permanentFilters).forEach(key => {\n            allFilterValues[key] = permanentFilters[key];\n        });\n\n        return this.getRawValues(view.entity, view.name(), view.type, page, view.perPage(), allFilterValues, view.filters(), sortField, sortDir, url)\n            .then((values) => {\n                return {\n                    data: values.data,\n                    totalItems: values.totalCount || values.headers('X-Total-Count') || values.data.length\n                };\n            });\n    }\n\n    /**\n     * Return the list of all object of entityName type\n     * Get all the object from the API\n     *\n     * @param {Entity}   entity\n     * @param {String}   viewName\n     * @param {String}   viewType\n     * @param {Number}   page\n     * @param {Number}   perPage\n     * @param {Object}   filterValues\n     * @param {Object}   filterFields\n     * @param {String}   sortField\n     * @param {String}   sortDir\n     * @param {String}   url\n     *\n     * @returns {promise} the entity config & the list of objects\n     */\n    getRawValues(entity, viewName, viewType, page, perPage, filterValues, filterFields, sortField, sortDir, url) {\n        let params = {};\n\n        // Compute pagination\n        if (page !== -1) {\n            params._page = (typeof (page) === 'undefined') ? 1 : parseInt(page, 10);\n            params._perPage = perPage;\n        }\n\n        // Compute sorting\n        if (sortField && sortField.split('.')[0] === viewName) {\n            params._sortField = sortField.substr(sortField.indexOf('.') + 1);\n            params._sortDir = sortDir;\n        }\n\n        // Compute filtering\n        if (filterValues && Object.keys(filterValues).length !== 0) {\n            params._filters = {};\n            let filterName, mappedValue;\n            for (filterName in filterValues) {\n                if (filterFields.hasOwnProperty(filterName) && filterFields[filterName].hasMaps()) {\n                    mappedValue = filterFields[filterName].getMappedValue(filterValues[filterName]);\n                    Object.keys(mappedValue).forEach(key => {\n                        params._filters[key] = mappedValue[key];\n                    })\n                    continue;\n                }\n\n                // It's weird to not map, but why not.\n                params._filters[filterName] = filterValues[filterName];\n            }\n        }\n\n        // Get grid data\n        return this._restWrapper\n            .getList(params, entity.name(), this._application.getRouteFor(entity, url, viewType), entity.retrieveMethod());\n    }\n\n    getReferenceData(references, rawValues) {\n        var nonOptimizedReferencedData = this.getFilteredReferenceData(ReferenceExtractor.getNonOptimizedReferences(references), rawValues);\n        var optimizedReferencedData = this.getOptimizedReferenceData(ReferenceExtractor.getOptimizedReferences(references), rawValues);\n        return Promise.all([nonOptimizedReferencedData, optimizedReferencedData])\n            .then((results) => {\n                let data = {};\n                let name;\n                for (name in results[0]) {\n                    data[name] = results[0][name];\n                }\n                for (name in results[1]) {\n                    data[name] = results[1][name];\n                }\n                return data;\n            })\n    }\n\n    /**\n     * Returns all References for an entity with associated values [{targetEntity.identifier: targetLabel}, ...]\n     * by calling the API for each entries\n     *\n     * @param {ReferenceField} references A hash of Reference and ReferenceMany objects\n     * @param {Array} rawValues\n     *\n     * @returns {Promise}\n     */\n    getFilteredReferenceData(references, rawValues) {\n        if (!references || !Object.keys(references).length) {\n            return this._promisesResolver.empty({});\n        }\n\n        let getOne = this.getOne.bind(this),\n            calls = [];\n\n        for (let i in references) {\n            let reference = references[i],\n                targetEntity = reference.targetEntity(),\n                identifiers = reference.getIdentifierValues(rawValues);\n\n            for (let k in identifiers) {\n                calls.push(getOne(targetEntity, 'listView', identifiers[k], reference.name()));\n            }\n        }\n\n        return this.fillFilteredReferencedData(calls, references, rawValues);\n    }\n\n    /**\n     * Returns all References for an entity with associated values [{targetEntity.identifier: targetLabel}, ...]\n     * by calling the API once\n     *\n     * @param {[ReferenceField]} references A hash of Reference and ReferenceMany objects\n     * @param {Array} rawValues\n     *\n     * @returns {Promise}\n     */\n    getOptimizedReferenceData(references, rawValues) {\n        if (!references || !Object.keys(references).length) {\n            return this._promisesResolver.empty({});\n        }\n\n        let getRawValues = this.getRawValues.bind(this),\n            calls = [];\n\n        for (let i in references) {\n            let reference = references[i],\n                targetEntity = reference.targetEntity(),\n                identifiers = reference.getIdentifierValues(rawValues);\n\n            // Check if we should retrieve values with 1 or multiple requests\n            let singleCallFilters = reference.getSingleApiCall(identifiers);\n            calls.push(getRawValues(targetEntity, targetEntity.name() + '_ListView', 'listView', 1, reference.perPage(), singleCallFilters, {}, reference.sortField(), reference.sortDir()));\n        }\n\n        return this.fillOptimizedReferencedData(calls, references);\n    }\n\n    /**\n     * Returns all References for an entity with associated values [{targetEntity.identifier: targetLabel}, ...]\n     * without filters on an entity\n     *\n     * @param {[ReferenceField]} references A hash of Reference and ReferenceMany objects\n     *\n     * @returns {Promise}\n     */\n    getAllReferencedData(references, search) {\n        if (!references || !Object.keys(references).length) {\n            return this._promisesResolver.empty({});\n        }\n\n        let calls = [],\n            getRawValues = this.getRawValues.bind(this);\n\n        for (let i in references) {\n            let reference = references[i];\n            let targetEntity = reference.targetEntity();\n\n            const permanentFilters = reference.permanentFilters();\n            let filterValues = permanentFilters || {};\n\n            if (typeof(permanentFilters) === 'function') {\n                console.warn('Reference.permanentFilters() called with a function is deprecated. Use the searchQuery option for remoteComplete() instead');\n                filterValues = permanentFilters(search);\n            }\n\n            if (search) {\n                // remote complete situation\n                let options = reference.remoteCompleteOptions();\n                if (options.searchQuery) {\n                    let filterValuesFromRemoteComplete = options.searchQuery(search);\n                    Object.keys(filterValuesFromRemoteComplete).forEach(key => {\n                        filterValues[key] = filterValuesFromRemoteComplete[key];\n                    })\n                } else {\n                    // by default, filter the list by the referenceField name\n                    filterValues[reference.targetField().name()] = search;\n                }\n            }\n\n            let filterFields = {};\n            filterFields[reference.name()] = reference;\n\n            calls.push(getRawValues(\n                targetEntity,\n                targetEntity.name() + '_ListView',\n                'listView',\n                1,\n                reference.perPage(),\n                filterValues,\n                filterFields,\n                reference.getSortFieldName(),\n                reference.sortDir()\n            ));\n\n        }\n\n        return this.fillOptimizedReferencedData(calls, references);\n    }\n\n    /**\n     * Fill all reference entries to return [{targetEntity.identifier: targetLabel}, ...]\n     *\n     * @param {[Promise]} apiCalls\n     * @param {[Reference]} references\n     * @returns {Promise}\n     */\n    fillOptimizedReferencedData(apiCalls, references) {\n        return this._promisesResolver.allEvenFailed(apiCalls)\n            .then((responses) => {\n                if (responses.length === 0) {\n                    return {};\n                }\n\n                let referencedData = {},\n                    i = 0;\n\n                for (let j in references) {\n                    let reference = references[j],\n                        response = responses[i++];\n\n                    // Retrieve entries depending on 1 or many request was done\n                    if (response.status == 'error') {\n                        // the response failed\n                        continue;\n                    }\n\n                    referencedData[reference.name()] = response.result.data;\n                }\n\n                return referencedData;\n            });\n    }\n\n    /**\n     * Fill all reference entries to return [{targetEntity.identifier: targetLabel}, ...]\n     *\n     * @param {[Promise]} apiCalls\n     * @param {[Reference]} references\n     * @param {[Object]} rawValues\n     * @returns {Promise}\n     */\n    fillFilteredReferencedData(apiCalls, references, rawValues) {\n        return this._promisesResolver.allEvenFailed(apiCalls)\n            .then((responses) => {\n                if (responses.length === 0) {\n                    return {};\n                }\n\n                let referencedData = {},\n                    response,\n                    i = 0;\n\n                for (let j in references) {\n                    let data = [],\n                        reference = references[j],\n                        identifiers = reference.getIdentifierValues(rawValues);\n\n                    for (let k in identifiers) {\n                        response = responses[i++];\n                        if (response.status == 'error') {\n                            // one of the responses failed\n                            continue;\n                        }\n                        data.push(response.result);\n                    }\n\n                    if (!data.length) {\n                        continue;\n                    }\n\n                    referencedData[reference.name()] = data;\n                }\n\n                return referencedData;\n            });\n    }\n\n    /**\n     * Returns all ReferencedList for an entity for associated values [{targetEntity.identifier: [targetFields, ...]}}\n     *\n     * @param {View}   referencedLists\n     * @param {String} sortField\n     * @param {String} sortDir\n     * @param {*} entityId\n     *\n     * @returns {promise}\n     */\n    getReferencedListData(referencedLists, sortField, sortDir, entityId) {\n        let getRawValues = this.getRawValues.bind(this),\n            calls = [];\n\n        for (let i in referencedLists) {\n            let referencedList = referencedLists[i],\n                targetEntity = referencedList.targetEntity(),\n                viewName = referencedList.datagridName(),\n                currentSortField = referencedList.getSortFieldName(),\n                currentSortDir = referencedList.sortDir(),\n                filter = {};\n\n            if (sortField && sortField.split('.')[0] === viewName) {\n                currentSortField = sortField;\n                currentSortDir = sortDir || 'ASC';\n            }\n\n            const permanentFilters = referencedList.permanentFilters() || {};\n            Object.keys(permanentFilters).forEach(key => {\n                filter[key] = permanentFilters[key];\n            });\n            filter[referencedList.targetReferenceField()] = entityId;\n\n            calls.push(getRawValues(targetEntity, viewName, 'listView', 1, referencedList.perPage(), filter, {}, currentSortField, currentSortDir));\n        }\n\n        return this._promisesResolver.allEvenFailed(calls)\n            .then((responses) => {\n                let j = 0,\n                    entries = {};\n\n                for (let i in referencedLists) {\n                    let response = responses[j++];\n                    if (response.status == 'error') {\n                        // If a response fail, skip it\n                        continue;\n                    }\n\n                    entries[i] = response.result.data;\n                }\n\n                return entries;\n            });\n    }\n\n    getRecordsByIds(entity, ids) {\n        if (!ids || !ids.length) {\n            return this._promisesResolver.empty();\n        }\n\n        let calls = ids.map(id => this.getOne(entity, 'listView', id, entity.identifier().name()));\n\n        return this._promisesResolver.allEvenFailed(calls)\n            .then(responses => responses.filter(r => r.status != 'error').map(r => r.result));\n    }\n}\n\nexport default ReadQueries;\n"]}
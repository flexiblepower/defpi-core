{"version":3,"sources":["../src/Application.js"],"names":[],"mappings":"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","file":"Application.js","sourcesContent":["import Menu from './Menu/Menu';\nimport Collection from './Collection';\nimport Dashboard from './Dashboard';\nimport orderElement from \"./Utils/orderElement\";\n\nclass Application {\n    constructor(title='ng-admin', debug=true) {\n        this._baseApiUrl = '';\n        this._customTemplate = function(viewName) {};\n        this._title = title;\n        this._menu = null;\n        this._dashboard = null;\n        this._layout = false;\n        this._header = false;\n        this._entities = [];\n        this._errorMessage = this.defaultErrorMessage;\n        this._debug = debug;\n    }\n\n    defaultErrorMessage(response) {\n        let body = response.data;\n\n        if (typeof body === 'object') {\n            body = JSON.stringify(body);\n        }\n\n        return 'Oops, an error occured : (code: ' + response.status + ') ' + body;\n    }\n\n    get entities() {\n        return this._entities;\n    }\n\n    getViewsOfType(type) {\n        return orderElement.order(\n            this.entities.map(entity => entity.views[type])\n                         .filter(view => view.enabled)\n        );\n    }\n\n    getRouteFor(entity, viewUrl, viewType, identifierValue, identifierName) {\n        let baseApiUrl = entity.baseApiUrl() || this.baseApiUrl(),\n            url = viewUrl || entity.getUrl(viewType, identifierValue, identifierName);\n\n        // If the view or the entity don't define the url, retrieve it from the baseURL of the entity or the app\n        if (!url) {\n            url = baseApiUrl + encodeURIComponent(entity.name());\n            if (identifierValue != null) {\n                url += '/' + encodeURIComponent(identifierValue);\n            }\n        } else if (!/^(?:[a-z]+:)?\\/\\//.test(url)) {\n            // Add baseUrl for relative URL\n            url = baseApiUrl + url;\n        }\n\n        return url;\n    }\n\n    debug(debug) {\n        if (!arguments.length) return this._debug;\n        this._debug = debug;\n        return this;\n    }\n\n    layout(layout) {\n        if (!arguments.length) return this._layout;\n        this._layout = layout;\n        return this;\n    }\n\n    header(header) {\n        if (!arguments.length) return this._header;\n        this._header = header;\n        return this;\n    }\n\n    title(title) {\n        if (!arguments.length) return this._title;\n        this._title = title;\n        return this;\n    }\n\n    /**\n     * Getter/Setter for the main application menu\n     *\n     * If the getter is called first, it will return a menu based on entities.\n     *\n     *     application.addEntity(new Entity('posts'));\n     *     application.addEntity(new Entity('comments'));\n     *     application.menu(); // Menu { children: [ Menu { title: \"Posts\" }, Menu { title: \"Comments\" } ]}\n     *\n     * If the setter is called first, all subsequent calls to the getter will return the set menu.\n     *\n     *     application.addEntity(new Entity('posts'));\n     *     application.addEntity(new Entity('comments'));\n     *     application.menu(new Menu().addChild(new Menu().title('Foo')));\n     *     application.menu(); // Menu { children: [ Menu { title: \"Foo\" } ]}\n     *\n     * @see Menu\n     */\n    menu(menu) {\n        if (!arguments.length) {\n            if (!this._menu) {\n                this._menu = this.buildMenuFromEntities();\n            }\n            return this._menu\n        }\n\n        this._menu = menu;\n        return this;\n    }\n\n    buildMenuFromEntities() {\n        return new Menu().children(\n            this.entities\n            .filter(entity => entity.menuView().enabled)\n            .sort((e1, e2) => e1.menuView().order() - e2.menuView().order())\n            .map(entity => new Menu().populateFromEntity(entity))\n        );\n    }\n\n    dashboard(dashboard) {\n        if (!arguments.length) {\n                if (!this._dashboard) {\n                    this._dashboard = this.buildDashboardFromEntities();\n                }\n                return this._dashboard\n        }\n        this._dashboard = dashboard;\n        return this;\n    }\n\n    buildDashboardFromEntities() {\n        let dashboard = new Dashboard()\n        this.entities\n            .filter(entity => entity.dashboardView().enabled)\n            .map(entity => {\n                dashboard.addCollection(entity.dashboardView()); // yep, a collection is a ListView, and so is a DashboardView - forgive this duck typing for BC sake\n            });\n        if (!dashboard.hasCollections()) {\n            // still no collection from dashboardViews, let's use listViews instead\n            this.entities\n                .filter(entity => entity.listView().enabled)\n                .map((entity, index) => {\n                    let collection = new Collection();\n                    let listView = entity.listView();\n                    collection.setEntity(entity);\n                    collection.perPage(listView.perPage())\n                    collection.sortField(listView.sortField())\n                    collection.sortDir(listView.sortDir())\n                    collection.order(index);\n                    // use only the first 3 cols\n                    collection.fields(listView.fields().filter((el, index) => index < 3));\n                    dashboard.addCollection(collection);\n                });\n        }\n        return dashboard;\n    }\n\n    customTemplate(customTemplate) {\n        if (!arguments.length) return this._customTemplate;\n        this._customTemplate = customTemplate;\n        return this;\n    }\n\n    baseApiUrl(url) {\n        if (!arguments.length) return this._baseApiUrl;\n        this._baseApiUrl = url;\n        return this;\n    }\n\n    addEntity(entity) {\n        if (!entity) {\n            throw new Error(\"No entity given\");\n        }\n\n        this._entities.push(entity);\n\n        return this;\n    }\n\n    getEntity(entityName) {\n        let foundEntity = this._entities.filter(e => e.name() === entityName)[0];\n        if (!foundEntity) {\n            throw new Error(`Unable to find entity \"${entityName}\"`);\n        }\n\n        return foundEntity;\n    }\n\n    hasEntity(fieldName) {\n        return !!(this._entities.filter(f => f.name() === fieldName).length);\n    }\n\n    getViewByEntityAndType(entityName, type) {\n        return this._entities\n            .filter(e => e.name() === entityName)[0]\n            .views[type];\n    }\n\n    getErrorMessage(response) {\n        if (typeof(this._errorMessage) === 'function') {\n            return this._errorMessage(response);\n        }\n\n        return this._errorMessage;\n    }\n\n    errorMessage(errorMessage) {\n        if (!arguments.length) return this._errorMessage;\n        this._errorMessage = errorMessage;\n        return this;\n    }\n\n    getErrorMessageFor(view, response) {\n        return (\n            view.getErrorMessage(response)\n            || view.getEntity().getErrorMessage(response)\n            || this.getErrorMessage(response)\n        );\n    }\n\n    getEntityNames() {\n        return this.entities.map(f => f.name());\n    }\n}\n\nexport default Application;\n"]}
package org.flexiblepower.defpi.dashboardgateway.dashboard.http;

import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.Enumeration;
import java.util.Map.Entry;
import java.util.concurrent.atomic.AtomicInteger;

import javax.annotation.Generated;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.logging.log4j.core.util.IOUtils;
import org.eclipse.jetty.server.Request;
import org.flexiblepower.defpi.dashboardgateway.DashboardGateway;
import org.flexiblepower.defpi.dashboardgateway.dashboard.http.proto.Dashboard_httpProto.HTTPRequest;
import org.flexiblepower.defpi.dashboardgateway.dashboard.http.proto.Dashboard_httpProto.HTTPRequest.Builder;
import org.flexiblepower.defpi.dashboardgateway.dashboard.http.proto.Dashboard_httpProto.HTTPRequest.Method;
import org.flexiblepower.defpi.dashboardgateway.dashboard.http.proto.Dashboard_httpProto.HTTPResponse;
import org.flexiblepower.service.Connection;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Dashboard_httpConnectionHandlerImpl
 *
 * File generated by org.flexiblepower.create-service-maven-plugin. NOTE: This
 * file is generated as a stub, and has to be implemented by the user.
 * Re-running the codegen plugin will not change the contents of this file.
 * Template by TNO, 2017
 * 
 * @author wilco
 */
@Generated(value = "org.flexiblepower.plugin.servicegen", date = "Oct 9, 2017 8:45:27 PM")
public class Dashboard_httpConnectionHandlerImpl implements Dashboard_httpConnectionHandler {

	public static final Logger LOG = LoggerFactory.getLogger(Dashboard_httpConnectionHandlerImpl.class);

	private final Connection connection;
	private final DashboardGateway service;
	private final AtomicInteger requestIdGenerator = new AtomicInteger(0);

	/**
	 * Auto-generated constructor for the ConnectionHandlers of the provided
	 * service
	 *
	 * @param service
	 *            The service for which to handle the connections
	 */
	public Dashboard_httpConnectionHandlerImpl(Connection connection, DashboardGateway service) {
		this.connection = connection;
		this.service = service;
	}

	@Override
	public void handleHTTPResponseMessage(HTTPResponse message) {
		// TODO Auto-generated stub

	}

	@Override
	public void onSuspend() {
		// TODO Auto-generated method stub

	}

	@Override
	public void resumeAfterSuspend() {
		// TODO Auto-generated method stub

	}

	@Override
	public void onInterrupt() {
		// TODO Auto-generated method stub

	}

	@Override
	public void resumeAfterInterrupt() {
		// TODO Auto-generated method stub

	}

	@Override
	public void terminated() {
		// TODO Auto-generated method stub

	}

	public String getUserEmail() {
		// TODO Auto-generated method stub
		return null;
	}

	public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) {
		HTTPRequest httpRequest = createHttpRequest(request);
		this.connection.send(httpRequest);
		// TODO wait and get response
		HTTPResponse httpResponse = null;
		writeHttpResponse(httpResponse, response);
	}

	private void writeHttpResponse(HTTPResponse httpResponse, HttpServletResponse response) {
		// Status
		response.setStatus(httpResponse.getStatus());
		// Headers
		for (Entry<String, String> e : httpResponse.getHeadersMap().entrySet()) {
			if (!e.getKey().equals("WWW-Authenticate")) {
				response.setHeader(e.getKey(), e.getValue());
			}
		}
		// Body
		try {
			StringReader reader = new StringReader(httpResponse.getBody().toString());
			IOUtils.copy(reader, response.getWriter());
		} catch (IOException e) {
			LOG.warn("Could not write HTTP response body", e);
		}
	}

	private HTTPRequest createHttpRequest(HttpServletRequest request) {
		Builder b = HTTPRequest.newBuilder();
		// Id
		b.setId(requestIdGenerator.incrementAndGet());
		// Uri
		b.setUri(request.getRequestURI());
		// Headers
		Enumeration<String> headerNames = request.getHeaderNames();
		while (headerNames.hasMoreElements()) {
			String key = headerNames.nextElement();
			if (!key.equals("Authorization")) {
				b.putHeaders(key, request.getHeader(key));
			}
		}
		// Method
		String method = request.getMethod();
		if (method.equals("HEAD")) {
			b.setMethod(Method.HEAD);
		} else if (method.equals("POST")) {
			b.setMethod(Method.POST);
		} else if (method.equals("PUT")) {
			b.setMethod(Method.PUT);
		} else if (method.equals("DELETE")) {
			b.setMethod(Method.DELETE);
		} else if (method.equals("TRACE")) {
			b.setMethod(Method.TRACE);
		} else if (method.equals("OPTIONS")) {
			b.setMethod(Method.OPTIONS);
		} else if (method.equals("CONNECT")) {
			b.setMethod(Method.CONNECT);
		} else if (method.equals("PATCH")) {
			b.setMethod(Method.PATCH);
		} else {
			b.setMethod(Method.GET);
		}
		// Body
		try {
			StringWriter writer = new StringWriter();
			IOUtils.copy(request.getReader(), writer);
			b.setBody(writer.toString());
		} catch (IOException e) {
			LOG.warn("Could not read HTTP request body", e);
		}
		return b.build();
	}

}
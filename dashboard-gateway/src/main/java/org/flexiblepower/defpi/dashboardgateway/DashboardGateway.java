/**
 * File DashboardGateway.java
 *
 * Copyright 2017 FAN
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.flexiblepower.defpi.dashboardgateway;

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Serializable;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Base64;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.commons.io.IOUtils;
import org.eclipse.jetty.server.Server;
import org.flexiblepower.defpi.dashboardgateway.dashboard.http.Dashboard_httpConnectionHandlerImpl;
import org.flexiblepower.service.DefPiParameters;
import org.flexiblepower.service.Service;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * DashboardGateway provides an implementation of the Dashboard Gateway service
 *
 * File generated by org.flexiblepower.create-service-maven-plugin. NOTE: This
 * file is generated as a stub, and has to be implemented by the user.
 * Re-running the codegen plugin will not change the contents of this file.
 * Template by FAN, 2017
 *
 */
@Generated(value = "org.flexiblepower.plugin.servicegen", date = "Oct 9, 2017 8:45:27 PM")
public class DashboardGateway implements Service<Void> {

    public static final Logger LOG = LoggerFactory.getLogger(DashboardGateway.class);

    protected Server server;
    private final Map<String, Dashboard_httpConnectionHandlerImpl> dashboardConnections = Collections
            .synchronizedMap(new HashMap<>());

    private ServerThread serverThread;

    private DefPiParameters params;

    protected class ServerThread extends Thread {

        @Override
        public void run() {
            try {
                DashboardGateway.this.server.start();
                DashboardGateway.this.server.join();
            } catch (final Exception e) {
                DashboardGateway.LOG.error("Error while running Jetty HTTP Server", e);
            }
        }
    }

    @Override
    public void resumeFrom(final Serializable state) {
        // TODO Auto-generated method stub

    }

    @Override
    public void init(final Void config, final DefPiParameters defpiParams) {
        try {
            this.params = defpiParams;
            this.server = new Server(8080);
            this.server.setHandler(new GatewayHandler(this));
            this.serverThread = new ServerThread();
            this.serverThread.start();
        } catch (final Exception e) {
            DashboardGateway.LOG.error("Could not start DashboardGateway HTTP server", e);
        }
    }

    @Override
    public void modify(final Void config) {
        // TODO Auto-generated method stub
    }

    @Override
    public Serializable suspend() {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public void terminate() {
        try {
            this.server.stop();
        } catch (final Exception e) {
            DashboardGateway.LOG.error("Could not stop DashboardGateway HTTP server", e);
        }
    }

    public void addDashboardConnection(final Dashboard_httpConnectionHandlerImpl connection) {
        this.dashboardConnections.put(connection.getUsername(), connection);
    }

    public void removeDashboardConnection(final Dashboard_httpConnectionHandlerImpl connection) {
        this.dashboardConnections.remove(connection.getUsername());
    }

    public Dashboard_httpConnectionHandlerImpl getHandlerForUsername(final String username) {
        return this.dashboardConnections.get(username);
    }

    public boolean validCredentials(final String username, final String password) {
        try {
            final URL orch = new URL("http://" + this.params.getOrchestratorHost() + ":"
                    + this.params.getOrchestratorPort() + "/user/by_username/" + URLEncoder.encode(username, "UTF-8"));
            final HttpURLConnection con = (HttpURLConnection) orch.openConnection();
            con.setRequestProperty("Authorization",
                    "Basic " + new String(Base64.getEncoder().encode((username + ":" + password).getBytes())));
            con.setRequestMethod("GET");
            final int code = con.getResponseCode();
            final boolean success = code == 200;
            if (success) {
                DashboardGateway.LOG.info("Attempted login for user " + username + " was successful");
            } else {
                DashboardGateway.LOG.info("Attempted login for user " + username + " failed");

            }
            return success;
        } catch (final IOException e) {
            return false;
        }
    }

    public String getUsernameForProcessId(final String processId) {
        try {
            // Retrieve the userId
            URL orch = new URL("http://" + this.params.getOrchestratorHost() + ":" + this.params.getOrchestratorPort()
                    + "/process/" + URLEncoder.encode(processId, "UTF-8"));
            HttpURLConnection con = (HttpURLConnection) orch.openConnection();
            con.setRequestMethod("GET");
            con.setRequestProperty("X-Auth-Token", this.params.getOrchestratorToken());
            int code = con.getResponseCode();
            DashboardGateway.LOG.debug("GET to " + orch.toString() + " returned : " + code);

            String responseBody = IOUtils.toString(new InputStreamReader(con.getInputStream()));

            JSONObject obj = new JSONObject(responseBody);
            final String userId = obj.getString("userId");

            if (userId == null) {
                DashboardGateway.LOG
                        .error("Got an invalid response from " + orch.toString() + ", received " + responseBody);
                return null;
            }

            // Retrieve the username
            orch = new URL("http://" + this.params.getOrchestratorHost() + ":" + this.params.getOrchestratorPort()
                    + "/user/" + URLEncoder.encode(userId, "UTF-8"));
            con = (HttpURLConnection) orch.openConnection();
            con.setRequestMethod("GET");
            con.setRequestProperty("X-Auth-Token", this.params.getOrchestratorToken());
            code = con.getResponseCode();
            DashboardGateway.LOG.debug("GET to " + orch.toString() + " returned : " + code);

            responseBody = IOUtils.toString(new InputStreamReader(con.getInputStream()));

            obj = new JSONObject(responseBody);
            return obj.getString("username");

        } catch (final IOException e) {
            DashboardGateway.LOG.error("Could not determine the owner of process " + processId, e);
            return null;
        }
    }

}

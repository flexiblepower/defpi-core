package org.flexiblepower.defpi.dashboardgateway;

import java.io.IOException;
import java.io.Serializable;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Base64;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Generated;

import org.eclipse.jetty.server.Server;
import org.flexiblepower.defpi.dashboardgateway.dashboard.http.Dashboard_httpConnectionHandlerImpl;
import org.flexiblepower.service.DefPiParameters;
import org.flexiblepower.service.Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * DashboardGateway provides an implementation of the Dashboard Gateway service
 *
 * File generated by org.flexiblepower.create-service-maven-plugin. NOTE: This
 * file is generated as a stub, and has to be implemented by the user.
 * Re-running the codegen plugin will not change the contents of this file.
 * Template by TNO, 2017
 * 
 * @author wilco
 */
@Generated(value = "org.flexiblepower.plugin.servicegen", date = "Oct 9, 2017 8:45:27 PM")
public class DashboardGateway implements Service<DashboardGatewayConfiguration> {

	public static final Logger LOG = LoggerFactory.getLogger(DashboardGateway.class);

	private Server server;
	private Map<String, Dashboard_httpConnectionHandlerImpl> dashboardConnections = Collections
			.synchronizedMap(new HashMap<>());

	private ServerThread serverThread;

	private DefPiParameters params;

	private class ServerThread extends Thread {
		@Override
		public void run() {
			try {
				server.start();
				server.join();
			} catch (Exception e) {
				LOG.error("Error while running Jetty HTTP Server", e);
			}
		}
	}

	@Override
	public void resumeFrom(Serializable state) {
		// TODO Auto-generated method stub

	}

	@Override
	public void init(DashboardGatewayConfiguration config, DefPiParameters params) {
		try {
			this.params = params;
			server = new Server(8080);
			server.setHandler(new GatewayHandler(this));
			serverThread = new ServerThread();
			serverThread.start();
		} catch (Exception e) {
			LOG.error("Could not start DashboardGateway HTTP server", e);
		}
	}

	@Override
	public void modify(DashboardGatewayConfiguration config) {
		// TODO Auto-generated method stub
	}

	@Override
	public Serializable suspend() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void terminate() {
		try {
			server.stop();
		} catch (Exception e) {
			LOG.error("Could not stop DashboardGateway HTTP server", e);
		}
	}

	public void addDashboardConnection(Dashboard_httpConnectionHandlerImpl connection) {
		this.dashboardConnections.put(connection.getUserEmail(), connection);
	}

	public void removeDashboardConnection(Dashboard_httpConnectionHandlerImpl connection) {
		this.dashboardConnections.remove(connection.getUserEmail());
	}

	public Dashboard_httpConnectionHandlerImpl getHandlerForUsername(String userEmail) {
		// TODO for now we pick a handler
		if (dashboardConnections.isEmpty()) {
			return null;
		} else {
			return dashboardConnections.values().iterator().next();
		}
		// return this.dashboardConnections.get(userEmail);
	}

	public boolean validCredentials(String username, String password) {
		try {
			URL orch = new URL("http://" + params.getOrchestratorHost() + ":" + params.getOrchestratorPort()
					+ "/user/by_username/" + URLEncoder.encode(username, "UTF-8"));
			HttpURLConnection con = (HttpURLConnection) orch.openConnection();
			con.setRequestProperty("Authorization",
					"Basic " + new String(Base64.getEncoder().encode((username + ":" + password).getBytes())));
			con.setRequestMethod("GET");
			int code = con.getResponseCode();
			boolean success = code == 200;
			if (success) {
				LOG.info("Attempted login for user " + username + " was successful");
			} else {
				LOG.info("Attempted login for user " + username + " failed");

			}
			return success;
		} catch (IOException e) {
			return false;
		}
	}

}

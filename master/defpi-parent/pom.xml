<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!-- This pom contains settings mostly for the docker plugins and zeromq 
		libraries which should be used by all defpi artifacts -->

	<artifactId>defpi-parent</artifactId>
	<packaging>pom</packaging>

	<parent>
		<groupId>org.flexiblepower</groupId>
		<artifactId>master</artifactId>
		<version>0.2.1-SNAPSHOT</version>
		<relativePath>..</relativePath>
	</parent>

	<properties>
		<!-- A shorthand to point to the resources folder that should be included 
			in packaged JARs (and docker) -->
		<project.resourcedir>${project.basedir}/src/main/resources</project.resourcedir>

		<!-- Specific setting for the docker image -->
		<docker.folder>docker</docker.folder>
		<docker.arm.folder>docker-arm</docker.arm.folder>
		<docker.registry>def-pi1.sensorlab.tno.nl:5000</docker.registry>
		<docker.imageName>${docker.registry}/services/${project.artifactId}:${project.version}</docker.imageName>
	</properties>

	<modules>
		<module>service-parent</module>
		<module>../../service</module>
		<module>../../orchestrator</module>
		<module>../../commons</module>
	</modules>

	<dependencies>
		<dependency>
			<groupId>com.google.protobuf</groupId>
			<artifactId>protobuf-java</artifactId>
			<version>${protobuf.version}</version>
		</dependency>

		<dependency>
			<groupId>org.zeromq</groupId>
			<artifactId>jeromq</artifactId>
			<version>0.3.5</version>
		</dependency>
	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>2.6</version>
					<configuration>
						<archive>
							<manifest>
								<mainClass>${mainClass}</mainClass>
							</manifest>
						</archive>
						<descriptorRefs>
							<descriptorRef>jar-with-dependencies</descriptorRef>
						</descriptorRefs>
					</configuration>
					<executions>
						<execution>
							<id>make-assembly</id>
							<phase>package</phase>
							<goals>
								<goal>single</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>com.spotify</groupId>
					<artifactId>docker-maven-plugin</artifactId>
					<version>1.0.0</version>
					<configuration>
						<buildDirectory>${project.build.directory}/docker_build</buildDirectory>
						<imageName>${docker.imageName}</imageName>
						<dockerDirectory>${project.build.directory}/${docker.folder}</dockerDirectory>
						<resources>
							<resource>
								<targetPath>/</targetPath>
								<directory>${project.build.directory}</directory>
								<include>*-jar-with-dependencies.jar</include>
							</resource>
						</resources>
					</configuration>
					<executions>
						<execution>
							<id>build-image</id>
							<phase>package</phase>
							<goals>
								<goal>build</goal>
							</goals>
						</execution>
						<execution>
							<id>push-image</id>
							<phase>deploy</phase>
							<goals>
								<goal>push</goal>
							</goals>
						</execution>
						<execution>
							<id>build-image-arm</id>
							<phase>package</phase>
							<goals>
								<goal>build</goal>
							</goals>
							<configuration>
								<dockerDirectory>${project.build.directory}/${docker.arm.folder}</dockerDirectory>
								<imageName>${docker.imageName}-arm</imageName>
							</configuration>
						</execution>
						<execution>
							<id>push-image-arm</id>
							<phase>deploy</phase>
							<goals>
								<goal>push</goal>
							</goals>
							<configuration>
								<imageName>${docker.imageName}-arm</imageName>
							</configuration>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>
			<plugin>
				<!-- The resource plugin allows us to use maven variables in the docker files -->
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.0.2</version>
				<configuration>
					<resources>
						<resource>
							<directory>${project.resourcedir}/${docker.folder}</directory>
							<targetPath>${project.build.directory}/${docker.folder}</targetPath>
							<filtering>true</filtering>
						</resource>
						<resource>
							<directory>${project.resourcedir}/${docker.arm.folder}</directory>
							<targetPath>${project.build.directory}/${docker.arm.folder}</targetPath>
							<filtering>true</filtering>
						</resource>
					</resources>
				</configuration>
				<executions>
					<execution>
						<id>build-resources</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>resources</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>

	</build>

</project>

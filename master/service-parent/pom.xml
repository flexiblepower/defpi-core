<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.flexiblepower.defpi</groupId>
	<artifactId>service-parent</artifactId>
	<version>17.11.5-SNAPSHOT</version>
	<packaging>pom</packaging>

	<name>dEF-Pi service parent POM</name>
	<description>Parent POM for dEF-Pi services, includes plugins to automate building and publishing services</description>
	<url>https://flexible-energy.eu/defpi</url>
	<inceptionYear>2017</inceptionYear>
	<organization>
		<name>Flexible Power Alliance Network</name>
		<url>http://flexible-energy.eu</url>
	</organization>

	<scm>
		<connection>scm:git:git://github.com/flexiblepower/defpi-core.git</connection>
		<developerConnection>scm:git:ssh://github.com:flexiblepower/defpi-core.git</developerConnection>
		<url>http://github.com/flexiblepower/defpi-core</url>
	</scm>

	<licenses>
		<license>
			<name>Apache License, Version 2.0</name>
			<url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<developers>
		<developer>
			<name>Maarten Kollenstart</name>
			<organization>TNO</organization>
			<organizationUrl>https://tno.nl</organizationUrl>
		</developer>

		<developer>
			<name>Wilco Wijbrandi</name>
			<organization>TNO</organization>
			<organizationUrl>https://tno.nl</organizationUrl>
		</developer>

		<developer>
			<name>Arun Subramanian</name>
			<organization>TNO</organization>
			<organizationUrl>https://tno.nl</organizationUrl>
		</developer>

		<developer>
			<name>Coen van Leeuwen</name>
			<organization>TNO</organization>
			<organizationUrl>https://tno.nl</organizationUrl>
		</developer>
	</developers>

	<properties>
		<project.resources.directory>${project.basedir}/src/main/resources</project.resources.directory>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.source>1.8</java.source>
		<java.target>1.8</java.target>

		<defpi.version>17.11.5-SNAPSHOT</defpi.version>

		<defpi.sources.generated>${project.build.directory}/generated-sources/java</defpi.sources.generated>
		<defpi.resources.generated>${project.build.directory}/generated-resources/defpi</defpi.resources.generated>
		<defpi.service.resources>defpi-resources</defpi.service.resources>
		<defpi.dockerfolder.x86>docker</defpi.dockerfolder.x86>
		<defpi.dockerfolder.arm>docker-arm</defpi.dockerfolder.arm>

		<protobuf.version>3.3.0</protobuf.version>

		<!-- Main class for any service should be the main from the library -->
		<mainClass>org.flexiblepower.service.ServiceMain</mainClass>

		<docker.registry>localhost:5000</docker.registry>
		<docker.imageName>${docker.registry}/services/${project.artifactId}</docker.imageName>
	</properties>

	<prerequisites>
		<maven>3.0</maven>
	</prerequisites>

	<modules>
		<module>../../dashboard-gateway</module>
		<module>../../dashboard</module>
	</modules>

	<!-- Where to push the service parent itself, should not be used by children -->
	<distributionManagement>
		<snapshotRepository>
			<id>ossrh</id>
			<name>Sonatype snapshot repository</name>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>
	</distributionManagement>

	<!-- Where to find dependencies -->
	<repositories>
		<repository>
			<id>sonatype-snapshot</id>
			<name>Sonatype snapshot repository</name>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

	<!-- Where to find plugins -->
	<pluginRepositories>
		<pluginRepository>
			<id>sonatype-snapshot</id>
			<name>Sonatype snapshot repository</name>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

	<dependencies>
		<!-- Use the defpi-service library to communicate with orchestrator -->
		<dependency>
			<groupId>org.flexiblepower.defpi</groupId>
			<artifactId>service</artifactId>
			<version>${defpi.version}</version>
		</dependency>
	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
			<!-- These are just to set the version -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-clean-plugin</artifactId>
					<version>3.1.0</version>
				</plugin>
				
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>2.8.2</version>
				</plugin>
				
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-install-plugin</artifactId>
					<version>2.5.2</version>
				</plugin>
				
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>3.1.0</version>
				</plugin>
				
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.1.0</version>
				</plugin>
				
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-site-plugin</artifactId>
					<version>3.7.1</version>
				</plugin>
			</plugins>
		</pluginManagement>
	
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.7.0</version>
				<configuration>
					<source>${java.source}</source>
					<target>${java.target}</target>
				</configuration>
			</plugin>
			
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>versions-maven-plugin</artifactId>
				<version>2.5</version>
				<executions>
					<execution>
						<id>check-dependency-versions</id>
						<goals>
							<goal>display-dependency-updates</goal>
						</goals>
						<phase>verify</phase>
					</execution>
						<execution>
						<id>check-plugin-versions</id>
						<goals>
							<goal>display-plugin-updates</goal>
						</goals>
						<phase>verify</phase>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<!-- This profile is only activated when there exists a Dockerfile. This 
				is one of the reasons we hardcode the dockerfile location -->
			<id>docker-image</id>
			<activation>
				<file>
					<missing>.noservice</missing>
				</file>
			</activation>
			<build>
				<plugins>
					<!-- Use the def-pi plugin to generate stubs -->
					<plugin>
						<groupId>org.flexiblepower.defpi</groupId>
						<artifactId>defpi-maven-plugin</artifactId>
						<version>${defpi.version}</version>
						<executions>
							<execution>
								<id>generate-service</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>generate</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<!-- Add generated code to the build path -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<version>3.0.0</version>
						<executions>
							<execution>
								<id>add-source</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>add-source</goal>
								</goals>
								<configuration>
									<sources>
										<source>${defpi.sources.generated}</source>
									</sources>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Create javadoc, but not for generated code -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<version>3.0.0</version>
						<executions>
							<execution>
								<id>attach-javadocs</id>
								<goals>
									<goal>jar</goal>
								</goals>
								<configuration>
									<sourceFileExcludes>
										<sourceFileExclude>${defpi.resources.generated}</sourceFileExclude>
									</sourceFileExcludes>
									<quiet>true</quiet>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Surefire executes JUnits tests during testing -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.21.0</version>
						<configuration>
							<systemProperties>
								<property>
									<name>log4j.configurationFile</name>
									<value>src/test/resources/log4j2.xml</value>
								</property>
							</systemProperties>
						</configuration>
					</plugin>

					<!-- The resource plugin resolves maven variables in the docker files -->
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<version>3.0.2</version>
						<configuration>
							<resources>
								<resource>
									<directory>${defpi.resources.generated}/${defpi.dockerfolder.x86}</directory>
									<targetPath>${project.build.directory}/docker</targetPath>
									<include>Dockerfile</include>
									<filtering>true</filtering>
								</resource>
								<resource>
									<directory>${defpi.resources.generated}/${defpi.dockerfolder.arm}</directory>
									<targetPath>${project.build.directory}/docker-arm</targetPath>
									<include>Dockerfile</include>
									<filtering>true</filtering>
								</resource>
								<resource>
									<directory>${project.resources.directory}/${defpi.service.resources}</directory>
									<targetPath>${project.build.directory}/docker/defpi-resources</targetPath>
								</resource>
								<resource>
									<directory>${project.resources.directory}</directory>
									<include>log4j2.xml</include>
								</resource>
								<resources>
									<directory>${project.build.directory}/generated-sources/license</directory>
									<include>THIRD-PARTY.txt</include>
								</resources>
							</resources>
						</configuration>
					</plugin>

					<!--Attach sources when packaging -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-source-plugin</artifactId>
						<version>3.0.1</version>
						<executions>
							<execution>
								<id>attach-sources</id>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<!-- The assembly plugin puts all java code in one jar -->
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<version>3.1.0</version>
						<configuration>
							<archive>
								<manifest>
									<mainClass>${mainClass}</mainClass>
								</manifest>
							</archive>
							<descriptorRefs>
								<descriptorRef>jar-with-dependencies</descriptorRef>
							</descriptorRefs>
							<includeProjectBuildFilters>true</includeProjectBuildFilters>
						</configuration>
						<executions>
							<execution>
								<id>make-assembly</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<!-- Spotify's docker plugin builds, tags and pushed docker images -->
					<plugin>
						<groupId>com.spotify</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>1.1.1</version>
						<executions>
							<execution>
								<!-- Build x86_64 image -->
								<id>build-image</id>
								<phase>package</phase>
								<goals>
									<goal>build</goal>
								</goals>
								<configuration>
									<dockerDirectory>${project.build.directory}/docker</dockerDirectory>
									<resources>
										<resource>
											<directory>${project.build.directory}</directory>
											<include>${project.artifactId}-${project.version}-jar-with-dependencies.jar</include>
										</resource>
									</resources>
									<imageName>${docker.imageName}:latest</imageName>
									<imageTags>
										<imageTag>${project.version}</imageTag>
									</imageTags>
								</configuration>
							</execution>
							<execution>
								<!-- Push latest image -->
								<id>push-latest-image</id>
								<phase>deploy</phase>
								<goals>
									<goal>push</goal>
								</goals>
								<configuration>
									<imageName>${docker.imageName}:latest</imageName>
								</configuration>
							</execution>
							<execution>
								<!-- Push versioned image -->
								<id>push-versioned-image</id>
								<phase>deploy</phase>
								<goals>
									<goal>push</goal>
								</goals>
								<configuration>
									<imageName>${docker.imageName}:${project.version}</imageName>
								</configuration>
							</execution>

							<execution>
								<!-- Build ARM image -->
								<id>build-image-arm</id>
								<phase>package</phase>
								<goals>
									<goal>build</goal>
								</goals>
								<configuration>
									<dockerDirectory>${project.build.directory}/docker-arm</dockerDirectory>
									<resources>
										<resource>
											<directory>${project.build.directory}</directory>
											<include>${project.artifactId}-${project.version}-jar-with-dependencies.jar</include>
										</resource>
									</resources>
									<imageName>${docker.imageName}:latest-arm</imageName>
									<imageTags>
										<imageTag>${project.version}-arm</imageTag>
									</imageTags>
								</configuration>
							</execution>
							<execution>
								<!-- Push latest ARM image -->
								<id>push-latest-image-arm</id>
								<phase>deploy</phase>
								<goals>
									<goal>push</goal>
								</goals>
								<configuration>
									<imageName>${docker.imageName}:latest-arm</imageName>
								</configuration>
							</execution>
							<execution>
								<!-- Push versioned ARM image -->
								<id>push-versioned-image-arm</id>
								<phase>deploy</phase>
								<goals>
									<goal>push</goal>
								</goals>
								<configuration>
									<imageName>${docker.imageName}:${project.version}-arm</imageName>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Make sure we don't deploy to artifactory -->
					<plugin>
						<artifactId>maven-deploy-plugin</artifactId>
						<version>2.8.2</version>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- This profile is for how to release THIS pom, not the children -->
			<id>release</id>

			<distributionManagement>
				<repository>
					<id>ossrh</id>
					<name>Sonatype deployment repository</name>
					<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
				</repository>
			</distributionManagement>

			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>license-maven-plugin</artifactId>
						<version>1.16</version>
						<executions>
							<execution>
								<id>add-third-party</id>
								<goals>
									<goal>add-third-party</goal>
								</goals>
								<phase>generate-sources</phase>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>1.6</version>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>
</project>

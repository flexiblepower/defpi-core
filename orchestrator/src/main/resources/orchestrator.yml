# this is an example of the Uber API
# as a demonstration of an API spec in YAML
swagger: '2.0'
info:
  title: EF-Pi Orchestrator
  description: EF-Pi Orchestrator API
  version: "1.0.0"
# the domain of the service
# host: api.uber.com
# array of all schemes that your API supports
schemes:
  - http
# will be prefixed to all paths
basePath: /v1
produces:
  - application/json
securityDefinitions:
  UserSecurity:
    type: basic
  AdminSecurity:
    type: basic
security:
  - UserSecurity: [] 
paths:
  /user:
    get:
      security:
        - AdminSecurity: []
      operationId: listUsers
      summary: List users
      tags: 
        - User
      responses:
        200:
          description: An array of Users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - User
      security:
        - AdminSecurity: []
      responses:
        201:
          description: New user created
          schema:
            $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /user/{user_id}:
    get:
      summary: Get user data
      tags:
        - User
      operationId: getUserById
      parameters:
        - in: path
          name: user_id
          description: The id of the User that needs to be fetched
          required: true
          type: string
      responses:
        200:
          description: User data
          schema:
            $ref: '#/definitions/User'
        404:
          description: User not found
    delete:
      summary: Delete this user
      tags:
        - User
      operationId: deleteUser
      security:
        - AdminSecurity: []
      parameters:
        - in: path
          name: user_id
          description: The id that needs to be fetched
          required: true
          type: string
      responses:
        200:
          description: User data
          schema:
            $ref: '#/definitions/User'
        404:
          description: User not found
  /node/private:
    get:
      summary: Lists the private nodes of the current user
      tags:
        - Node
      operationId: listPrivateNodes
      responses:
        200:
          description: List of private nodes owned by this user
          schema:
            type: array
            items:
              $ref: '#/definitions/PrivateNode'
    post:
      summary: Create a private node based on the id of an unidentified node
      tags:
        - Node
      operationId: createPrivateNode
      security:
        - AdminSecurity: []
      responses:
        201:
          description: Private node succesfully created
          schema:
            $ref: '#/definitions/PrivateNode'
        404:
          description: Unidentified node not found
  /node/private/{node_id}:
    get:
      summary: Lists all private nodes
      tags:
        - Node
      operationId: getPrivateNode
      parameters:
        - in: path
          name: node_id
          description: The id of the Node that needs to be fetched
          required: true
          type: string
      responses:
        200:
          description: List all private nodes
          schema:
            $ref: '#/definitions/PrivateNode'
    delete:
      summary: Remove a node (and make it unidentified again)
      tags:
       - Node
      operationId: deletePriivateNode
      security:
        - AdminSecurity: []
      parameters:
        - in: path
          name: node_id
          description: The id of the Node that needs to be feleted
          required: true
          type: string
      responses:
        200:
          description: Private node succesfully deleted
        404:
          description: Private node not found
  /node/public:
    get:
      summary: Lists all public nodes
      tags:
        - Node
      operationId: listPublicNodes
      responses:
        200:
          description: List all public nodes
          schema:
            type: array
            items:
              $ref: '#/definitions/PublicNode'
    post:
      summary: Create a public node based on the id of an unidentified node
      tags:
        - Node
      operationId: createPublicNode
      security:
        - AdminSecurity: []
      responses:
        201:
          description: Public node succesfully created
          schema:
            $ref: '#/definitions/PublicNode'
        404:
          description: Unidentified node not found
  /node/public/{node_id}:
    get:
      summary: Lists all public nodes
      tags:
        - Node
      operationId: getPublicNode
      parameters:
        - in: path
          name: node_id
          description: The id of the Node that needs to be fetched
          required: true
          type: string
      responses:
        200:
          description: List all public nodes
          schema:
            $ref: '#/definitions/PublicNode'
    delete:
      summary: Remove a node (and make it unidentified again)
      tags:
       - Node
      operationId: deletePublicNode
      security:
        - AdminSecurity: []
      parameters:
        - in: path
          name: node_id
          description: The id of the Node that needs to be feleted
          required: true
          type: string
      responses:
        200:
          description: Public node succesfully deleted
        404:
          description: Public node not found
  /node/unidentified:
    get:
      summary: Lists all public nodes
      tags:
        - Node
      operationId: listUnidentifiedNodes
      security:
        - AdminSecurity: []
      responses:
        200:
          description: List all unidentified nodes
          schema:
            type: array
            items:
              $ref: '#/definitions/UnidentifiedNode'
definitions:
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
  User:
    type: object
    required:
      - id
      - username
    properties:
      id:
        type: string
      username:
        type: string
        minLength: 5
      password:
        type: string
        minLength: 5
  Node:
    discriminator: node_type
    type: object
    required:
      - id
      - node_type
    properties:
      id:
        type: string
      node_type:
        type: string
  UnidentifiedNode:
    allOf:
      - $ref: '#/definitions/Node'
  PublicNode:
    allOf:
      - $ref: '#/definitions/Node'
      - properties:
          node_pool_id:
            type: string
  PrivateNode:
    allOf:
      - $ref: '#/definitions/Node'
      - properties:
          user_id:
            type: string
  NodePool:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: string
      name:
        type: string
  Process:
      type: object
      required:
        - id
        - user_id
        - service_id
      properties:
        id:
          type: string
        user_id:
          type: string
        service_id:
          type: string
  Service:
      type: object
      required:
        - id
        - docker_image
        - interfaces
      properties:
        id:
          type: string
        docker_image:
          type: string
        interfaces:
          type: array
          items:
            $ref: '#/definitions/Interface'
  Interface:
    type: object
    required:
      - name
      - interface_versions
    properties:
      name:
        type: string
      interface_versions:
        type: array
        items:
          type: object
          properties:
            version_name:
              type: string
            accepts_hash:
              type: string
            sends_hash:
              type: string
  Connection:
    type: object
    required:
      - process_a_id
      - process_b_id
      - a_to_b_hash
      - b_to_a_hash
    properties:
      process_a_id:
        type: string
      process_b_id:
        type: string
      a_to_b_hash:
        type: string
      b_to_a_hash:
        type: string
package org.flexiblepower.defpi.dashboard.observation_publisher._1;

import java.io.IOException;

import javax.annotation.Generated;

import org.flexiblepower.defpi.dashboard.Dashboard;
import org.flexiblepower.defpi.dashboard.observation_publisher._1.proto.ObservationPublisher_1Proto.Observation;
import org.flexiblepower.service.Connection;

/**
 * Implements the ObservationPublisher_1ConnectionHandler interface, handling the connection for which this class is
 * instantiated.
 *
 * File generated by org.flexiblepower.create-service-maven-plugin.
 * NOTE: This file is generated as a stub, and has to be implemented by the user. Re-running the codegen plugin will
 * not change the contents of this file.
 * Template by FAN, 2017
 *
 * @author nutmajs
 */
@Generated(value = "org.flexiblepower.plugin.servicegen", date = "Feb 13, 2018 2:37:47 PM")
public class ObservationPublisher_1ConnectionHandlerImpl implements ObservationPublisher_1ConnectionHandler {

    private final Connection connection;

    private final Dashboard service;

    /**
     * Auto-generated constructor for the ConnectionHandlers of the provided service
     *
     * @param service The service for which to handle the connections
     */
    public ObservationPublisher_1ConnectionHandlerImpl(final Connection connection, final Dashboard service) {
        this.connection = connection;
        this.service = service;
        service.registerObservationPublisher(this);
    }

    @Override
    public void onSuspend() {
        this.service.unregisterObservationPublisher(this);
    }

    @Override
    public void resumeAfterSuspend() {
        this.service.registerObservationPublisher(this);

    }

    @Override
    public void onInterrupt() {
        this.service.unregisterObservationPublisher(this);
    }

    @Override
    public void resumeAfterInterrupt() {
        this.service.unregisterObservationPublisher(this);
    }

    @Override
    public void terminated() {
        this.service.unregisterObservationPublisher(this);

    }

    public void sendObservation(final Observation message) {
        if (this.connection.isConnected()) {
            try {
                this.connection.send(message);
            } catch (final IOException e) {
                e.printStackTrace();
            }
        }
    }
}
package org.flexiblepower.defpi.dashboard;

import java.io.Serializable;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Generated;

import org.flexiblepower.defpi.dashboard.controladmin.ControlAdminFullWidget;
import org.flexiblepower.defpi.dashboard.observation_publisher._1.ObservationPublisher_1ConnectionHandlerImpl;
import org.flexiblepower.defpi.dashboard.observation_publisher._1.proto.ObservationPublisher_1Proto.Observation;
import org.flexiblepower.defpi.dashboard.observation_publisher._1.proto.ObservationPublisher_1Proto.Observation.Builder;
import org.flexiblepower.defpi.dashboard.observation_publisher._1.proto.ObservationPublisher_1Proto.Observation.StringDatapoint;
import org.flexiblepower.service.DefPiParameters;
import org.flexiblepower.service.Service;

/**
 * Dashboard provides an implementation of the Dashboard service
 *
 * File generated by org.flexiblepower.create-service-maven-plugin. NOTE: This
 * file is generated as a stub, and has to be implemented by the user.
 * Re-running the codegen plugin will not change the contents of this file.
 * Template by TNO, 2017
 *
 * @author wilco
 */
@Generated(value = "org.flexiblepower.plugin.servicegen", date = "Oct 26, 2017 12:58:33 PM")
public class Dashboard implements Service<DashboardConfiguration> {

    private HttpRouter requestRouter;
    private final FullWidgetManager fullWidgetManager = new FullWidgetManager();
    private DashboardFullWidget dashboardFullWidget;
    private DashboardConfiguration config;
    private DefPiParameters parameters;
    private ControlAdminFullWidget controlAdminFullWidget;
    private final List<ObservationPublisher_1ConnectionHandlerImpl> observationPublishers = new ArrayList<>();

    @Override
    public void resumeFrom(final Serializable state) {
        // TODO Auto-generated method stub

    }

    @Override
    public void init(final DashboardConfiguration dashboardConfig, final DefPiParameters defpiParams) {
        this.parameters = defpiParams;
        this.config = dashboardConfig;
        this.requestRouter = new HttpRouter(this.fullWidgetManager);
        this.dashboardFullWidget = new DashboardFullWidget();
        this.controlAdminFullWidget = new ControlAdminFullWidget(this);
        this.fullWidgetManager.registerFullWidget(this.dashboardFullWidget);
        this.fullWidgetManager.registerFullWidget(this.controlAdminFullWidget);
    }

    @Override
    public void modify(final DashboardConfiguration dashboardConfig) {
        // TODO Auto-generated method stub
    }

    @Override
    public Serializable suspend() {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public void terminate() {
        // TODO Auto-generated method stub
    }

    public void registerWidget(final Widget widget) {
        switch (widget.getType()) {
        case FULL:
            this.fullWidgetManager.registerFullWidget(widget);
            break;
        case SMALL:
            this.dashboardFullWidget.registerSmallWidget(widget);
            break;
        default:
            break;
        }
    }

    public void unregisterWidget(final Widget widget) {
        switch (widget.getType()) {
        case FULL:
            this.fullWidgetManager.unregisterFullWidget(widget);
            break;
        case SMALL:
            this.dashboardFullWidget.unregisterSmallWidget(widget);
            break;
        default:
            break;
        }
    }

    public HttpRouter getRequestRouter() {
        return this.requestRouter;
    }

    public DashboardConfiguration getConfig() {
        return this.config;
    }

    public DefPiParameters getParameters() {
        return this.parameters;
    }

    public void registerObservationPublisher(final ObservationPublisher_1ConnectionHandlerImpl o) {
        this.observationPublishers.add(o);
    }

    public void unregisterObservationPublisher(final ObservationPublisher_1ConnectionHandlerImpl o) {
        this.observationPublishers.remove(o);
    }

    public void publishUserDecisionObservation(final String message) {
        final Builder builder = this.createBuilder();
        builder.addStringDatapoints(StringDatapoint.newBuilder().setName("Decision").setValue(message).build());
        this.observationPublishers.forEach((o) -> o.sendObservation(builder.build()));
    }

    private Observation.Builder createBuilder() {
        final Builder builder = Observation.newBuilder()
                .setProcessId(this.parameters.getProcessId())
                .setObserverId("userDashboard")
                .setObservedAt(Instant.now().toString())
                .addStringDatapoints(StringDatapoint.newBuilder()
                        .setName("User")
                        .setValue(this.parameters.getUsername())
                        .setIndexed(true)
                        .build())
                .addStringDatapoints(StringDatapoint.newBuilder()
                        .setName("UserId")
                        .setValue(this.parameters.getUserId())
                        .setIndexed(true)
                        .build())
                .addStringDatapoints(
                        StringDatapoint.newBuilder().setName("message_type").setValue("userDecision").setIndexed(true));

        return builder;
    }

}

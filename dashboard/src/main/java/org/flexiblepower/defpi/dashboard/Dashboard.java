package org.flexiblepower.defpi.dashboard;

/*-
 * #%L
 * dEF-Pi dashboard
 * %%
 * Copyright (C) 2017 - 2018 Flexible Power Alliance Network
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import java.io.Serializable;

import javax.annotation.Generated;

import org.flexiblepower.defpi.dashboard.controladmin.ControlAdminFullWidget;
import org.flexiblepower.service.DefPiParameters;
import org.flexiblepower.service.Service;

/**
 * Dashboard provides an implementation of the Dashboard service
 *
 * File generated by org.flexiblepower.create-service-maven-plugin. NOTE: This
 * file is generated as a stub, and has to be implemented by the user.
 * Re-running the codegen plugin will not change the contents of this file.
 * Template by TNO, 2017
 *
 * @author wilco
 */
@Generated(value = "org.flexiblepower.plugin.servicegen", date = "Oct 26, 2017 12:58:33 PM")
public class Dashboard implements Service<DashboardConfiguration> {

    private HttpRouter requestRouter;
    private final FullWidgetAndPageManager fullWidgetManager = new FullWidgetAndPageManager();
    private DashboardFullWidget dashboardFullWidget;
    private DashboardConfiguration config;
    private DefPiParameters parameters;
    private ControlAdminFullWidget controlAdminFullWidget;

    @Override
    public void resumeFrom(final Serializable state) {
        // TODO Auto-generated method stub

    }

    @Override
    public void init(final DashboardConfiguration dashboardConfig, final DefPiParameters defpiParams) {
        this.parameters = defpiParams;
        this.config = dashboardConfig;
        this.requestRouter = new HttpRouter(this.fullWidgetManager);
        this.dashboardFullWidget = new DashboardFullWidget();
        this.controlAdminFullWidget = new ControlAdminFullWidget(this);
        this.fullWidgetManager.registerFullWidgetOrPage(this.dashboardFullWidget);
        this.fullWidgetManager.registerFullWidgetOrPage(this.controlAdminFullWidget);
    }

    @Override
    public void modify(final DashboardConfiguration dashboardConfig) {
        // TODO Auto-generated method stub
    }

    @Override
    public Serializable suspend() {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public void terminate() {
        // TODO Auto-generated method stub
    }

    public void registerWidget(final Widget widget) {
        switch (widget.getType()) {
        case FULL_WIDGET:
        case PAGE:
            this.fullWidgetManager.registerFullWidgetOrPage(widget);
            break;
        case SMALL_WIDGET:
            this.dashboardFullWidget.registerSmallWidget(widget);
            break;
        default:
            break;
        }
    }

    public void unregisterWidget(final Widget widget) {
        switch (widget.getType()) {
        case FULL_WIDGET:
        case PAGE:
            this.fullWidgetManager.unregisterFullWidgetOrPage(widget);
            break;
        case SMALL_WIDGET:
            this.dashboardFullWidget.unregisterSmallWidget(widget);
            break;
        default:
            break;
        }
    }

    public HttpRouter getRequestRouter() {
        return this.requestRouter;
    }

    public DashboardConfiguration getConfig() {
        return this.config;
    }

    public DefPiParameters getParameters() {
        return this.parameters;
    }

}

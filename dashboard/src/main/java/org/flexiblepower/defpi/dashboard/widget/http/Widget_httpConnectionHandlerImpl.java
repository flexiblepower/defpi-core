package org.flexiblepower.defpi.dashboard.widget.http;

import java.io.IOException;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import javax.annotation.Generated;

import org.flexiblepower.defpi.dashboard.Dashboard;
import org.flexiblepower.defpi.dashboard.HttpTask;
import org.flexiblepower.defpi.dashboard.HttpUtils;
import org.flexiblepower.defpi.dashboard.Widget;
import org.flexiblepower.defpi.dashboard.gateway.http.proto.Gateway_httpProto.HTTPRequest;
import org.flexiblepower.defpi.dashboard.gateway.http.proto.Gateway_httpProto.HTTPResponse;
import org.flexiblepower.defpi.dashboard.widget.http.proto.Widget_httpProto.WidgetHTTPRequest;
import org.flexiblepower.defpi.dashboard.widget.http.proto.Widget_httpProto.WidgetHTTPRequest.Method;
import org.flexiblepower.defpi.dashboard.widget.http.proto.Widget_httpProto.WidgetHTTPResponse;
import org.flexiblepower.defpi.dashboard.widget.http.proto.Widget_httpProto.WidgetInfo;
import org.flexiblepower.defpi.dashboard.widget.http.proto.Widget_httpProto.WidgetInfo.WidgetType;
import org.flexiblepower.service.Connection;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Widget_httpConnectionHandlerImpl
 *
 * File generated by org.flexiblepower.create-service-maven-plugin. NOTE: This
 * file is generated as a stub, and has to be implemented by the user.
 * Re-running the codegen plugin will not change the contents of this file.
 * Template by TNO, 2017
 *
 * @author wilco
 */
@Generated(value = "org.flexiblepower.plugin.servicegen", date = "Oct 26, 2017 12:58:33 PM")
public class Widget_httpConnectionHandlerImpl implements Widget_httpConnectionHandler, Widget {

    public static final Logger LOG = LoggerFactory.getLogger(Widget_httpConnectionHandlerImpl.class);

    private final Connection connection;
    private final Dashboard service;
    private final Map<Integer, HttpTask> responseList = new ConcurrentHashMap<>();
    private WidgetInfo widgetInfo = null;

    /**
     * Auto-generated constructor for the ConnectionHandlers of the provided service
     *
     * @param service
     *            ' * The service for which to handle the connections
     */
    public Widget_httpConnectionHandlerImpl(final Connection connection, final Dashboard service) {
        this.connection = connection;
        this.service = service;
    }

    @Override
    public void handleWidgetHTTPResponseMessage(final WidgetHTTPResponse message) {
        Widget_httpConnectionHandlerImpl.LOG.debug("Received response " + message.getId());
        final HttpTask httpTask = this.responseList.get(message.getId());
        if (httpTask == null) {
            Widget_httpConnectionHandlerImpl.LOG
                    .error("Received HTTPResponse for unknown request id: " + message.getId());
        } else {
            httpTask.respond(HTTPResponse.newBuilder()
                    .setId(message.getId())
                    .setBody(message.getBody())
                    .setStatus(message.getStatus())
                    .putAllHeaders(message.getHeadersMap())
                    .build());
        }
    }

    @Override
    public void handleWidgetInfoMessage(final WidgetInfo message) {
        if (this.widgetInfo == null) {
            // Ah, now we're ready to register!
            Widget_httpConnectionHandlerImpl.LOG
                    .debug("Received WidgetInfo, registering widegt of type " + message.getType());
            this.widgetInfo = message;
            this.service.registerWidget(this);
        }
    }

    @Override
    public void onSuspend() {
        // TODO Auto-generated method stub

    }

    @Override
    public void resumeAfterSuspend() {
        // TODO Auto-generated method stub

    }

    @Override
    public void onInterrupt() {
        // TODO Auto-generated method stub

    }

    @Override
    public void resumeAfterInterrupt() {
        // TODO Auto-generated method stub

    }

    @Override
    public void terminated() {
        if (this.widgetInfo != null) {
            // if this.widgetInfo == null we never registered
            this.service.unregisterWidget(this);
        }
    }

    @Override
    public void handle(final HttpTask httpTask) {
        final HTTPRequest r = httpTask.getRequest();
        final WidgetHTTPRequest widgetRequest = WidgetHTTPRequest.newBuilder()
                .setId(r.getId())
                .setUri(r.getUri())
                .setBody(r.getBody())
                .setMethod(Method.valueOf(r.getMethod().toString()))
                .putAllHeaders(r.getHeadersMap())
                .build();

        this.responseList.put(r.getId(), httpTask);

        Widget_httpConnectionHandlerImpl.LOG.debug("Sending request " + r.getId());
        try {
            this.connection.send(widgetRequest);
        } catch (final IOException e) {
            Widget_httpConnectionHandlerImpl.LOG.error("Could not send HTTP request for Widget", e);
            HttpUtils.internalError(httpTask);
        }
    }

    @Override
    public String getWidgetId() {
        return this.widgetInfo.getId();
    }

    @Override
    public String getTitle() {
        return this.widgetInfo.getTitle();
    }

    @Override
    public Type getType() {
        if (this.widgetInfo == null) {
            return null;
        } else if (this.widgetInfo.getType() == WidgetType.FULL_WIDGET) {
            return Widget.Type.FULL_WIDGET;
        } else if (this.widgetInfo.getType() == WidgetType.PAGE) {
            return Widget.Type.PAGE;
        } else {
            return Widget.Type.SMALL_WIDGET;
        }
    }

}
package org.flexiblepower.defpi.dashboard.widget.http;

import java.nio.charset.Charset;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import javax.annotation.Generated;

import org.flexiblepower.defpi.dashboard.Dashboard;
import org.flexiblepower.defpi.dashboard.Widget;
import org.flexiblepower.defpi.dashboard.gateway.http.proto.Gateway_httpProto.HTTPRequest;
import org.flexiblepower.defpi.dashboard.gateway.http.proto.Gateway_httpProto.HTTPResponse;
import org.flexiblepower.defpi.dashboard.widget.http.proto.Widget_httpProto.WidgetHTTPRequest;
import org.flexiblepower.defpi.dashboard.widget.http.proto.Widget_httpProto.WidgetHTTPRequest.Method;
import org.flexiblepower.defpi.dashboard.widget.http.proto.Widget_httpProto.WidgetHTTPResponse;
import org.flexiblepower.service.Connection;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.protobuf.ByteString;

/**
 * Widget_httpConnectionHandlerImpl
 *
 * File generated by org.flexiblepower.create-service-maven-plugin. NOTE: This
 * file is generated as a stub, and has to be implemented by the user.
 * Re-running the codegen plugin will not change the contents of this file.
 * Template by TNO, 2017
 * 
 * @author wilco
 */
@Generated(value = "org.flexiblepower.plugin.servicegen", date = "Oct 26, 2017 12:58:33 PM")
public class Widget_httpConnectionHandlerImpl implements Widget_httpConnectionHandler, Widget {

	public static final Logger LOG = LoggerFactory.getLogger(Widget_httpConnectionHandlerImpl.class);

	private final Connection connection;
	private final Dashboard service;
	private final Map<Integer, CompletableFuture<HTTPResponse>> responseList = new ConcurrentHashMap<>();

	/**
	 * Auto-generated constructor for the ConnectionHandlers of the provided service
	 *
	 * @param service
	 *            ' * The service for which to handle the connections
	 */
	public Widget_httpConnectionHandlerImpl(Connection connection, Dashboard service) {
		this.connection = connection;
		this.service = service;
		this.service.registerWidget(this);
	}

	@Override
	public void handleWidgetHTTPResponseMessage(WidgetHTTPResponse message) {
		CompletableFuture<HTTPResponse> completableFuture = this.responseList.get(message.getId());
		if (completableFuture == null) {
			LOG.error("Received HTTPResponse for unknown request id: " + message.getId());
		} else {
			HTTPResponse response = HTTPResponse.newBuilder().setId(message.getId()).setBody(message.getBody())
					.setStatus(message.getStatus()).putAllHeaders(message.getHeadersMap()).build();
			completableFuture.complete(response);
		}
	}

	@Override
	public void onSuspend() {
		// TODO Auto-generated method stub

	}

	@Override
	public void resumeAfterSuspend() {
		// TODO Auto-generated method stub

	}

	@Override
	public void onInterrupt() {
		// TODO Auto-generated method stub

	}

	@Override
	public void resumeAfterInterrupt() {
		// TODO Auto-generated method stub

	}

	@Override
	public void terminated() {
		this.service.unregisterWidget(this);
	}

	@Override
	public HTTPResponse handle(HTTPRequest r) {
		WidgetHTTPRequest widgetRequest = WidgetHTTPRequest.newBuilder().setId(r.getId()).setBody(r.getBody())
				.setMethod(Method.valueOf(r.getMethod().toString())).putAllHeaders(r.getHeadersMap()).build();
		connection.send(widgetRequest);
		return waitForResponse(r.getId());
	}

	private HTTPResponse waitForResponse(Integer requestId) {
		try {
			LOG.debug("Waiting for response");
			HTTPResponse httpResponse = responseList.get(requestId).get(30, TimeUnit.SECONDS);
			responseList.remove(requestId);
			return httpResponse;
		} catch (TimeoutException e) {
			LOG.debug("Gateway Timeout");
			return HTTPResponse.newBuilder().setId(requestId).setStatus(504)
					.setBody(ByteString.copyFrom("Gateway timeout", Charset.defaultCharset())).build();
		} catch (InterruptedException | ExecutionException e) {
			LOG.error("Error while waiting for response", e);
			return HTTPResponse.newBuilder().setId(requestId).setStatus(500)
					.setBody(ByteString.copyFrom("Error", Charset.defaultCharset())).build();
		}
	}

	@Override
	public String getFullWidgetId() {
		return "";
	}

	@Override
	public String getTitle() {
		return "Title TODO";
	}

	@Override
	public Type getType() {
		return Widget.Type.SMALL;
	}

}